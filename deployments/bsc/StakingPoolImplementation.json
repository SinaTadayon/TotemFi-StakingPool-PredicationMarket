{
  "address": "0x800F6a6323c662696D47F6fFa40a4706C671753c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ApproveTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "stakeAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "predictions",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indexOfFirstStake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indexOfLastStake",
          "type": "uint256"
        }
      ],
      "name": "BatchStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DistributedBTC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PoolActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PoolDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PoolDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PoolLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PoolMatured",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PoolSorted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReceivedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pricePrediction",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indexOfStake",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakingReturn",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStakingReturn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totemPrize",
          "type": "uint256"
        }
      ],
      "name": "WithdrawTotemPrize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wrappedTokenPrize",
          "type": "uint256"
        }
      ],
      "name": "WithdrawWrappedTokenPrize",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "__PriceConsumer_initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "swapRouterAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "BUSDContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "WrappedTokenContractAddress",
          "type": "address"
        }
      ],
      "name": "__WrappedTokenDistributor_initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
<<<<<<< HEAD
=======
      "inputs": [],
      "name": "averagePricePrediction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
>>>>>>> dev
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_stakingAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_predictions",
          "type": "uint256[]"
        }
      ],
      "name": "batchStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collaborativeRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collaborativeReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "declareEmergency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deletePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergentWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
<<<<<<< HEAD
      "name": "getAveragePricePrediction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
=======
>>>>>>> dev
      "name": "getDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prediction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_range",
          "type": "uint256"
        }
      ],
      "name": "getDifference",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getEstimatedWrappedTokenForUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "getIndexedPrize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "getIndexedStakingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPathForUSDToWrappedToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getPrize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getStakingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenTaxRate",
          "type": "uint256"
        }
      ],
      "name": "getStakingTax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSwapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUSDBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUSDToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWrappedTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "hasUnStaked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "indexedClaimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAnEmergency",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDeleted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isEnhancedEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMatured",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "launchDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturingPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdPrizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collaborativeReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "oracleDecimals",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isEnhancedEnabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isMatured",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maturingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maturityTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "potentialCollabReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "predictions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakedBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakedTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountWithdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastWithdrawalTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pricePrediction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "difference",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rank",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "prizeRewardWithdrawn",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "didUnstake",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prizeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "prizeRewardRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rank",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "purchaseWrappedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardManager",
      "outputs": [
        {
          "internalType": "contract IRewardManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_activationStatus",
          "type": "bool"
        }
      ],
      "name": "setActivationStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setOracleToZero",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[25]",
          "name": "addrArray",
          "type": "address[25]"
        },
        {
          "internalType": "uint256[25]",
          "name": "indexArray",
          "type": "uint256[25]"
        }
      ],
      "name": "setSortedStakers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sizeAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sizeLimitRangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sortedStakers",
      "outputs": [
        {
          "internalType": "address",
          "name": "stakerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_pricePrediction",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeTaxRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "address",
          "name": "stakerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingPoolImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totemToken",
      "outputs": [
        {
          "internalType": "contract ITotemToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "updateMaturingPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgradeEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdPrizeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stuckToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "withdrawStuckTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedTokenSymbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
<<<<<<< HEAD
  "transactionHash": "0x6ce5e1eff530359a1e73f45e26f76c91fe0003b19ddb6a32c48617d2415142dc",
  "receipt": {
    "to": null,
    "from": "0x6aB29B1766256F01df388B3a25d02C24f454020c",
    "contractAddress": "0x7b103440EAdF9e6F7D2F5ba4879A91Fc6d169B87",
    "transactionIndex": 0,
    "gasUsed": "4641684",
    "logsBloom": "0x
    "blockHash": "0xee43340012ea0243f445cf0e202d62e30d8f13d1a1e39a89581f87d10a2b686f",
    "transactionHash": "0x6ce5e1eff530359a1e73f45e26f76c91fe0003b19ddb6a32c48617d2415142dc",
    "logs": [],
    "blockNumber": 15070748,
    "cumulativeGasUsed": "4641684",
=======
  "transactionHash": "0xf6d860e71bc182cf30e2b4e2f707c405d53e1abb7176d90041335953e005c54e",
  "receipt": {
    "to": null,
    "from": "0x1E8a9D0Bd8C19bB27CBb38A997b16B8373578E8a",
    "contractAddress": "0x3414be9304955208D3e7fC130a1A420Ddc7Dd9dc",
    "transactionIndex": 2,
    "gasUsed": "4600485",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x6b456d147ff2ebfb3a6800cd7f5e31359f58bc90d725be7e1542357df4cf75f6",
    "transactionHash": "0xf6d860e71bc182cf30e2b4e2f707c405d53e1abb7176d90041335953e005c54e",
    "logs": [],
    "blockNumber": 17124651,
    "cumulativeGasUsed": "4863776",
>>>>>>> dev
    "status": 1,
    "byzantium": true
  },
  "args": [],
<<<<<<< HEAD
  "solcInputHash": "f418e0b3078895dfb45e8a53562f05cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ApproveTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"stakeAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"predictions\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexOfFirstStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexOfLastStake\",\"type\":\"uint256\"}],\"name\":\"BatchStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributedBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolMatured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolSorted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePrediction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexOfStake\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingReturn\",\"type\":\"uint256\"}],\"name\":\"WithdrawStakingReturn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totemPrize\",\"type\":\"uint256\"}],\"name\":\"WithdrawTotemPrize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wrappedTokenPrize\",\"type\":\"uint256\"}],\"name\":\"WithdrawWrappedTokenPrize\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"__PriceConsumer_initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"BUSDContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WrappedTokenContractAddress\",\"type\":\"address\"}],\"name\":\"__WrappedTokenDistributor_initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_stakingAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_predictions\",\"type\":\"uint256[]\"}],\"name\":\"batchStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collaborativeRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collaborativeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"declareEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deletePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergentWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAveragePricePrediction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prediction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_range\",\"type\":\"uint256\"}],\"name\":\"getDifference\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getEstimatedWrappedTokenForUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getIndexedPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getIndexedStakingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPathForUSDToWrappedToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTaxRate\",\"type\":\"uint256\"}],\"name\":\"getStakingTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWrappedTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"hasUnStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"indexedClaimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAnEmergency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDeleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEnhancedEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMatured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"launchDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdPrizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collaborativeReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleDecimals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnhancedEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMatured\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturityTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potentialCollabReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"predictions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePrediction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"difference\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"prizeRewardWithdrawn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"didUnstake\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizeRewardRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"purchaseWrappedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"contract IRewardManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_activationStatus\",\"type\":\"bool\"}],\"name\":\"setActivationStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOracleToZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[25]\",\"name\":\"addrArray\",\"type\":\"address[25]\"},{\"internalType\":\"uint256[25]\",\"name\":\"indexArray\",\"type\":\"uint256[25]\"}],\"name\":\"setSortedStakers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sizeAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sizeLimitRangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sortedStakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePrediction\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totemToken\",\"outputs\":[{\"internalType\":\"contract ITotemToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateMaturingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdPrizeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stuckToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedTokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"__PriceConsumer_initialize(address)\":{\"params\":{\"_oracle\":\"The chainlink node oracle address to send requests\"}},\"getEstimatedWrappedTokenForUSD(uint256)\":{\"params\":{\"_amount\":\"Amount\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateMaturingPrice(uint256)\":{\"params\":{\"_price\":\"is ignored if oracle is not zero address.When there is no oracle, _price is the maturingPrice and is set manually by the pool creator\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collaborativeReward()\":{\"notice\":\"Based on the white paper, the collaborative reward can be 20% (2000), 25% (2500) or 35% (3500).\"},\"getAveragePricePrediction()\":{\"notice\":\"Gets the avgerage price prediction for calculating collaborative reward\"},\"getDecimals()\":{\"notice\":\"Returns decimals for oracle contract\"},\"getLatestPrice()\":{\"notice\":\"Returns the latest price from oracle contract\"},\"hasUnStaked(address,uint256)\":{\"notice\":\"hasUnStaked return true if the user staked in the pool and then  has unStaked it (claimed)\"},\"setOracleToZero()\":{\"notice\":\"Sets oracle to zero in case it was given incorrectly by the owner,         or it is not available\"},\"usdPrizeAmount()\":{\"notice\":\"usdPrizeAmount is the enabler of WrappedToken rewarder; If it is set to 0  then the pool is only TOTM rewarder.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking/StakingPoolImplementation.sol\":\"StakingPoolImplementation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/Distribution/USDRetriever.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract USDRetriever {\\n    IERC20 internal USDCContract;\\n\\n    event ReceivedTokens(address indexed from, uint256 amount);\\n    event TransferTokens(address indexed to, uint256 amount);\\n    event ApproveTokens(address indexed to, uint256 amount);\\n\\n    function setUSDToken(address _usdContractAddress) internal {\\n        USDCContract = IERC20(_usdContractAddress);\\n    }\\n\\n    function approveTokens(address _to, uint256 _amount) internal {\\n        USDCContract.approve(_to, _amount);\\n        emit ApproveTokens(_to, _amount);\\n    }\\n\\n    function getUSDBalance() external view returns (uint256) {\\n        return USDCContract.balanceOf(address(this));\\n    }\\n\\n    function getUSDToken() external view returns (address) {\\n        return address(USDCContract);\\n    }\\n}\\n\",\"keccak256\":\"0xf8ce825a5e793fc484345dc3f0a6740a30789f5350e78e88ec8299a37b5f6e29\",\"license\":\"UNLICENSED\"},\"contracts/Distribution/WrappedTokenDistributorUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IPancakeRouter.sol\\\";\\n\\ncontract WrappedTokenDistributorUpgradeable is Initializable{\\n    IPancakeRouter02 internal swapRouter;\\n    address internal BUSD_CONTRACT_ADDRESS;\\n    address internal WRAPPED_Token_CONTRACT_ADDRESS;\\n\\n    event DistributedBTC(address indexed to, uint256 amount);\\n\\n    function __WrappedTokenDistributor_initialize(\\n        address swapRouterAddress,\\n        address BUSDContractAddress,\\n        address WrappedTokenContractAddress\\n    ) public initializer {\\n        swapRouter = IPancakeRouter02(swapRouterAddress);\\n        BUSD_CONTRACT_ADDRESS = BUSDContractAddress;\\n        WRAPPED_Token_CONTRACT_ADDRESS = WrappedTokenContractAddress;\\n    }\\n\\n    /**\\n     * @param _to Reciever address\\n     * @param _usdAmount USD Amount\\n     * @param _wrappedTokenAmount Wrapped Token Amount\\n     */\\n    function transferTokensThroughSwap(\\n        address _to,\\n        uint256 _usdAmount,\\n        uint256 _wrappedTokenAmount,\\n        uint256 _deadline\\n    ) internal {\\n        require(_to != address(0));\\n        // Get max USD price we can spend for this amount.\\n        swapRouter.swapExactTokensForTokens(\\n            _usdAmount,\\n            _wrappedTokenAmount,\\n            getPathForUSDToWrappedToken(),\\n            _to,\\n            _deadline\\n        );\\n    }\\n\\n    /**\\n     * @param _amount Amount\\n     */\\n    function getEstimatedWrappedTokenForUSD(uint256 _amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256[] memory wrappedTokenAmount =\\n            swapRouter.getAmountsOut(_amount, getPathForUSDToWrappedToken());\\n        // since in the path the wrappedToken is the second one, so we should retuen the second one also here    \\n        return wrappedTokenAmount[1];\\n    }\\n\\n    function getPathForUSDToWrappedToken() public view returns (address[] memory) {\\n        address[] memory path = new address[](2);\\n        path[0] = BUSD_CONTRACT_ADDRESS;\\n        path[1] = WRAPPED_Token_CONTRACT_ADDRESS;\\n\\n        return path;\\n    }\\n\\n    function getSwapRouter() public view returns (address) {\\n        return address(swapRouter);\\n    }\\n}\\n\",\"keccak256\":\"0xd7e60cfdab6b448bf1119bd8f7a320db4ef747d1e0e1d81c5c74795de00870f6\",\"license\":\"UNLICENSED\"},\"contracts/Price/PriceConsumerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract PriceConsumerUpgradeable is Initializable {\\n    AggregatorV3Interface internal priceFeed;\\n\\n    /**\\n     * @param _oracle The chainlink node oracle address to send requests\\n    */\\n    function __PriceConsumer_initialize(address _oracle) public initializer {\\n        priceFeed = AggregatorV3Interface(_oracle);\\n    }\\n\\n    /**\\n     * @notice Returns decimals for oracle contract\\n    */\\n    function getDecimals() public view returns (uint8) {\\n        uint8 decimals = priceFeed.decimals();\\n        return decimals;\\n    }\\n\\n    /**\\n     * @notice Returns the latest price from oracle contract\\n    */\\n    function getLatestPrice() public view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        return price >= 0 ? uint256(price) : 0;\\n    }\\n}\\n\",\"keccak256\":\"0x0e06dab9db0ea365065a1a636d6a28d6856a5459301e23bd456a22bb6acc575d\",\"license\":\"UNLICENSED\"},\"contracts/Staking/StakingPoolImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./StakingPoolStorageStructure.sol\\\";\\n\\ncontract StakingPoolImplementation is StakingPoolStorageStructure {\\n    using BasisPoints for uint256;\\n    using SafeMath for uint256;\\n    using CalculateRewardLib for *;\\n    using IndexedClaimRewardLib for *;\\n    using ClaimRewardLib for *;\\n \\n    modifier onlyPoolCreator {\\n        require(\\n            _msgSender() == poolCreator,\\n            \\\"0300 caller is not a pool creator\\\"\\n        );\\n        _;\\n    }\\n\\n    event Stake(address indexed user, uint256 amount, uint256 pricePrediction, uint256 indexOfStake);\\n\\n    // TODO: add the index of stakes for BatchStake event too\\n    event BatchStake(address indexed user, uint256[] stakeAmounts, uint256[] predictions, uint256 indexOfFirstStake, uint256 indexOfLastStake);\\n\\n    event WithdrawStakingReturn(address indexed user, uint256 stakingReturn);\\n    event WithdrawTotemPrize(address indexed user, uint256 totemPrize);\\n    event WithdrawWrappedTokenPrize(address indexed user, uint256 wrappedTokenPrize);\\n    event Unstake(address indexed user, uint256 amount);\\n\\n    event PoolActivated();\\n    event PoolDeactivated();\\n    event PoolLocked();\\n    event PoolSorted();\\n    event PoolMatured();\\n    event PoolDeleted();\\n\\n    function setActivationStatus(bool _activationStatus) \\n        external \\n        onlyPoolCreator \\n    {\\n        require(isActive != _activationStatus, \\\"Not changing the activation status\\\");\\n        isActive = _activationStatus;\\n\\n        if (isActive) emit PoolActivated();\\n        else emit PoolDeactivated();\\n    }\\n\\n    function stake(uint256 _amount, uint256 _pricePrediction) external {\\n        require(\\n            isActive && block.timestamp > launchDate,\\n            \\\"0313 pool is not active\\\"\\n        );\\n        require(\\n            block.timestamp < (launchDate + lockTime),\\n            \\\"0316 Can not stake after lock date\\\"\\n        );\\n        require(\\n            !isLocked, \\n            \\\"0310 Pool is locked\\\"\\n        );\\n        require(\\n            _amount >= minimumStakeAmount, \\n            \\\"0311 Amount can't be less than the minimum\\\"\\n        );\\n        \\n        uint256 limitRange = sizeAllocation.mul(sizeLimitRangeRate).div(100);\\n        uint256 taxRate = totemToken.taxRate();\\n        uint256 tax =\\n            totemToken.taxExempt(_msgSender()) ? 0 : _amount.mulBP(taxRate);\\n        \\n        require(\\n            totalStaked.add(_amount).sub(tax) <= sizeAllocation.add(limitRange), \\n            \\\"0312 Can't stake above size allocation\\\"\\n        );\\n\\n        \\n        uint256 stakeTaxAmount;\\n\\n        (stakeTaxAmount, _amount) = getStakingTax(_amount, taxRate);\\n\\n        totemToken.transferFrom(\\n            _msgSender(),\\n            address(this),\\n            (_amount + stakeTaxAmount)\\n        );\\n    \\n        /// @dev This is to remove token tax (not staking tax) from the amount\\n        _amount = _amount.sub(tax);\\n\\n        if (stakeTaxAmount > 0)\\n            totemToken.transfer(totemToken.taxationWallet(), stakeTaxAmount);\\n\\n        totalStaked = totalStaked.add(_amount);\\n\\n        uint256 indexOfStake = predictions[_msgSender()].length;\\n\\n        _stake(_msgSender(), _amount, _pricePrediction);\\n\\n        if (totalStaked >= sizeAllocation) {\\n            _lockPool();\\n        }\\n\\n        emit Stake(_msgSender(), _amount, _pricePrediction, indexOfStake);\\n    }\\n\\n    function batchStake(\\n        uint256[] calldata _stakingAmounts, \\n        uint256[] calldata _predictions\\n    ) external \\n    {\\n        require(\\n            isActive && block.timestamp > launchDate,\\n            \\\"0313 pool is not active\\\"\\n        );\\n        require(\\n            block.timestamp < (launchDate + lockTime),\\n            \\\"0316 Can not stake after lock date\\\"\\n        );\\n        require(\\n            !isLocked, \\n            \\\"0310 Pool is locked\\\"\\n        );\\n        require(\\n            _stakingAmounts.length == _predictions.length, \\n            \\\"0315 stakingAmount and predictions length mismatch\\\"\\n        );\\n\\n        uint256 totalStakingAmount = 0;\\n\\n        for(uint256 i; i < _stakingAmounts.length; i++) {\\n            require(\\n                _stakingAmounts[i] >= minimumStakeAmount, \\n                \\\"0311 Amount can't be less than the minimum\\\"\\n            );\\n            totalStakingAmount = totalStakingAmount.add(_stakingAmounts[i]);\\n        }\\n\\n        uint256 limitRange = sizeAllocation.mul(sizeLimitRangeRate).div(100);\\n        uint256 taxRate = totemToken.taxRate();\\n        uint256 tax =\\n            totemToken.taxExempt(_msgSender()) ? 0 : totalStakingAmount.mulBP(taxRate);\\n\\n        require(\\n            totalStaked.add(totalStakingAmount).sub(tax) <= sizeAllocation.add(limitRange), \\n            \\\"0312 Can't stake above size allocation\\\"\\n        );\\n\\n        uint256 stakeTaxAmount;\\n\\n        (stakeTaxAmount, totalStakingAmount) = getStakingTax(totalStakingAmount, taxRate);\\n\\n        totemToken.transferFrom(\\n            _msgSender(),\\n            address(this),\\n            (totalStakingAmount + stakeTaxAmount)\\n        );\\n    \\n        /// @dev This is to remove token tax (not staking tax) from the amount\\n        totalStakingAmount = totalStakingAmount.sub(tax);\\n\\n        if (stakeTaxAmount > 0)\\n            totemToken.transfer(totemToken.taxationWallet(), stakeTaxAmount);\\n\\n        totalStaked = totalStaked.add(totalStakingAmount);\\n\\n        uint256 indexOfFirstStake = predictions[_msgSender()].length;\\n\\n        for(uint256 i; i < _stakingAmounts.length; i++) {\\n\\n            uint256 stakingAmount = _stakingAmounts[i];\\n\\n            tax = totemToken.taxExempt(_msgSender()) ? 0 : stakingAmount.mulBP(taxRate);\\n        \\n            (stakeTaxAmount, stakingAmount) = getStakingTax(stakingAmount, taxRate);\\n\\n            /// @dev This is to remove token tax (not staking tax) from the amount\\n            stakingAmount = stakingAmount.sub(tax);\\n\\n            _stake(_msgSender(), stakingAmount, _predictions[i]);\\n        }\\n\\n        uint256 indexOfLastStake = predictions[_msgSender()].length - 1;\\n\\n        if (totalStaked >= sizeAllocation) {\\n            _lockPool();\\n        }\\n\\n        // TODO: add the index of stakes for BatchStake event too\\n        emit BatchStake(_msgSender(), _stakingAmounts, _predictions, indexOfFirstStake, indexOfLastStake);\\n    }\\n\\n    function _stake(address _staker, uint256 _amount, uint256 _pricePrediction) internal {\\n\\n        stakers.push(\\n            Staker({\\n                stakerAddress: _staker,\\n                index: predictions[_staker].length\\n            })\\n        );\\n\\n        predictions[_staker].push(\\n            StakeWithPrediction({\\n                stakedBalance: _amount,\\n                stakedTime: block.timestamp,\\n                amountWithdrawn: 0,\\n                lastWithdrawalTime: block.timestamp,\\n                pricePrediction: _pricePrediction,\\n                difference: type(uint256).max,\\n                rank: type(uint256).max,\\n                prizeRewardWithdrawn: false,\\n                didUnstake: false\\n            })\\n        );\\n    }\\n\\n    function getStakingTax(uint256 amount, uint256 tokenTaxRate)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 newStakeTaxRate =\\n            stakeTaxRate > tokenTaxRate ? stakeTaxRate.sub(tokenTaxRate) : 0;\\n        if (newStakeTaxRate == 0) {\\n            return (0, amount);\\n        }\\n        return (\\n            amount.mulBP(newStakeTaxRate),\\n            amount.sub(amount.mulBP(newStakeTaxRate))\\n        );\\n    }\\n\\n    function claimReward() external {\\n\\n        uint256 stakingReturn = ClaimRewardLib.getStakingReturn(predictions[_msgSender()],lps);\\n\\n        (uint256 totemPrize, uint256 wrappedTokenPrize) = \\n            ClaimRewardLib.getPrize(\\n                predictions[_msgSender()],\\n                lps,\\n                prizeRewardRates\\n            )\\n        ;\\n\\n        uint256 withdrawableTotemReward = totemPrize + stakingReturn;\\n        \\n        if (isMatured) {\\n            if (usdPrizeAmount > 0) {\\n                if (wrappedTokenPrize > 0) {\\n\\n                    /// @dev Not the actual withdraw, only updating the array in the mapping\\n                    ClaimRewardLib.withdrawPrize(predictions[_msgSender()]);\\n\\n                    require(wrappedToken.transfer(_msgSender(), wrappedTokenPrize), \\\"0320\\\");\\n\\n                    emit WithdrawWrappedTokenPrize(_msgSender(), wrappedTokenPrize);\\n                }\\n            }\\n\\n            if (totemPrize > 0) {\\n                ClaimRewardLib.withdrawPrize(predictions[_msgSender()]);\\n            }\\n\\n            uint256 stakedBalance = CalculateRewardLib.getTotalStakedBalance(predictions[_msgSender()]);\\n            \\n            if (stakedBalance > 0) {\\n\\n                ClaimRewardLib.withdrawStakedBalance(predictions[_msgSender()]);\\n\\n                totemToken.transfer(_msgSender(), stakedBalance);\\n\\n                emit Unstake(_msgSender(), stakedBalance);\\n            }\\n        }\\n\\n        /// @dev before maturity, totemPrize is always zero\\n        if (withdrawableTotemReward > 0) {\\n\\n            /// @dev Send the token reward only when rewardManager has the enough funds\\n            require(\\n                totemToken.balanceOf(address(rewardManager)) >= withdrawableTotemReward, \\n                \\\"Not enough balance in reward manager\\\"\\n            );\\n\\n            ClaimRewardLib.withdrawStakingReturn(predictions[_msgSender()], lps);\\n\\n            rewardManager.rewardUser(_msgSender(), withdrawableTotemReward);\\n\\n            emit WithdrawStakingReturn(_msgSender(), stakingReturn);\\n            emit WithdrawTotemPrize(_msgSender(), totemPrize);\\n        }\\n    }\\n\\n    function indexedClaimReward(uint256 stakeIndex) external {\\n        require(predictions[_msgSender()].length >= stakeIndex, \\\"Index does not exist\\\");\\n        require(predictions[_msgSender()].length != 0, \\\"User does not have any stakes\\\");\\n\\n        uint256 stakingReturn = IndexedClaimRewardLib.\\n            getIndexedStakingReturn(\\n                predictions[_msgSender()],\\n                stakeIndex,\\n                lps\\n            );\\n\\n        (uint256 totemPrize, uint256 wrappedTokenPrize) = IndexedClaimRewardLib.\\n            getIndexedPrize(\\n                predictions[_msgSender()],\\n                stakeIndex,\\n                lps,\\n                prizeRewardRates\\n            );\\n\\n        uint256 withdrawableTotemReward = totemPrize + stakingReturn;\\n        \\n        if (isMatured) {\\n            \\n            if (usdPrizeAmount > 0) {\\n                if (wrappedTokenPrize > 0) {\\n\\n                    IndexedClaimRewardLib.withdrawIndexedPrize(\\n                        predictions[_msgSender()], \\n                        stakeIndex\\n                    );\\n\\n                    require(wrappedToken.transfer(_msgSender(), wrappedTokenPrize), \\\"0330\\\");\\n\\n                    emit WithdrawWrappedTokenPrize(_msgSender(), wrappedTokenPrize);\\n                }\\n            }\\n\\n            if (totemPrize > 0) {\\n                IndexedClaimRewardLib.withdrawIndexedPrize(predictions[_msgSender()], stakeIndex);\\n            }\\n\\n            uint256 stakedBalance = IndexedClaimRewardLib.getIndexedStakedBalance(\\n                predictions[_msgSender()], \\n                stakeIndex\\n            );\\n\\n            if (stakedBalance > 0) {\\n                IndexedClaimRewardLib.withdrawIndexedStakedBalance(\\n                    predictions[_msgSender()], \\n                    stakeIndex\\n                );\\n\\n                totemToken.transfer(_msgSender(), stakedBalance);\\n\\n                emit Unstake(_msgSender(), stakedBalance);\\n            }\\n        }\\n\\n        /// @dev before maturity, totemPrize is always zero\\n        if (withdrawableTotemReward > 0) {\\n\\n            /// @dev Send the token reward only when rewardManager has the enough funds\\n            require(\\n                totemToken.balanceOf(address(rewardManager)) >= withdrawableTotemReward, \\n                \\\"Not enough balance in reward manager\\\"\\n            );\\n\\n            IndexedClaimRewardLib.withdrawIndexedStakingReturn(\\n                predictions[_msgSender()], \\n                stakeIndex,\\n                lps\\n            );\\n                \\n            rewardManager.rewardUser(_msgSender(), withdrawableTotemReward);\\n\\n            emit WithdrawStakingReturn(_msgSender(), stakingReturn);\\n            emit WithdrawTotemPrize(_msgSender(), totemPrize);\\n        }\\n    }\\n\\n    function purchaseWrappedToken(uint256 usdAmount, uint256 deadline)\\n        external\\n        onlyPoolCreator\\n    {\\n        //TODO: require usdAmount to be more than usdPrizeAmount, to have enough rewards\\n        require(\\n            usdPrizeAmount > 0, \\n            \\\"0340 The pool is only TOTM rewarder\\\"\\n        );\\n        \\n        require(\\n            usdAmount > 0, \\n            \\\"0341 Amount can't be zero\\\"\\n        );\\n\\n        require(\\n            deadline >= block.timestamp, \\n            \\\"0342 Deadline is low\\\"\\n        );\\n\\n        address swapRouterAddress = getSwapRouter();\\n        approveTokens(swapRouterAddress, usdAmount);\\n        \\n        uint256 wrappedTokenAmount = getEstimatedWrappedTokenForUSD(usdAmount);\\n\\n        uint256 wrappedTokenAmountWithSlippage =\\n            wrappedTokenAmount.sub(wrappedTokenAmount.mulBP(300));\\n\\n        transferTokensThroughSwap(\\n            address(this),\\n            usdAmount,\\n            wrappedTokenAmountWithSlippage,\\n            deadline\\n        );\\n    }\\n\\n    function getWrappedTokenBalance() public view returns (uint256) {\\n        return wrappedToken.balanceOf(address(this));\\n    }\\n\\n    function lockPool() public onlyPoolCreator virtual {\\n        _lockPool();\\n    }\\n\\n    function _lockPool() internal {\\n        isLocked = true;\\n\\n        emit PoolLocked();\\n    }\\n\\n    /**\\n     * @param _price is ignored if oracle is not zero address.When there is no oracle,\\n             _price is the maturingPrice and is set manually by the pool creator\\n    */\\n    function updateMaturingPrice(uint256 _price) external onlyPoolCreator {\\n        require(\\n            block.timestamp >= launchDate + lockTime + maturityTime,\\n            \\\"0350 Can't set maturing price before the maturity time\\\"\\n        );\\n\\n        if (oracleContract == address(0)) {\\n            maturingPrice = _price;\\n            lps.maturingPrice = maturingPrice;\\n        } else {\\n            maturingPrice = getLatestPrice();\\n            lps.maturingPrice = maturingPrice;\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets oracle to zero in case it was given incorrectly by the owner,\\n     *         or it is not available\\n     */\\n    function setOracleToZero() external onlyPoolCreator {\\n        oracleContract = address(0);\\n    }\\n\\n    function setSortedStakers(address[25] calldata addrArray, uint256[25] calldata indexArray)\\n        external \\n        onlyPoolCreator \\n    {\\n        if(sortedStakers.length != 0) {\\n            delete sortedStakers;\\n        }\\n\\n        for (uint256 i = 0; i < addrArray.length; i++) {\\n\\n            /// @dev The first 0 address means the other addresses are also 0 so they won't be checked\\n            if (addrArray[i] == address(0)) break;\\n\\n            sortedStakers.push(\\n            Staker({\\n                stakerAddress: addrArray[i],\\n                index: indexArray[i]\\n                })\\n            );\\n        }\\n\\n        emit PoolSorted();\\n    }\\n\\n    function endPool() external onlyPoolCreator {\\n        require(\\n            block.timestamp >= launchDate + lockTime + maturityTime,\\n            \\\"0360 Can't end pool before the maturity time\\\"\\n        );\\n        //TODO: check to see if there is enough USD to buy the wrapped token with, the mimimum USD\\n        // must be usdPrizeAmount, if there is not, do not allow endPool\\n        if (usdPrizeAmount > 0) {\\n            require(\\n                getWrappedTokenBalance() != 0, \\n                \\\"0361 WrappedToken Rewards not available\\\"\\n            );\\n        }\\n\\n        if (stakers.length > 0) {\\n            require(\\n                sortedStakers.length != 0,\\n                \\\"0362 first should sort\\\"\\n            );\\n        }\\n\\n        /** \\n         *  @dev potentialCollabReward allows the admin to set the collaborateive reward \\n         *  @notice the collaborative reward is only given to the pools which the average price\\n         *          predicted has the accuracy of 25$\\n        */\\n        if (potentialCollabReward > 0) {\\n            uint256 avgPricePrediction = getAveragePricePrediction();\\n            if (getDifference(avgPricePrediction, collaborativeRange) == 0) {\\n                collaborativeReward = potentialCollabReward;\\n                lps.collaborativeReward = collaborativeReward;\\n            }\\n        }\\n\\n        uint256 max = sortedStakers.length > 25 ? 25 : sortedStakers.length;\\n        for (uint256 i = 0; i < max; i++) {\\n            predictions[sortedStakers[i].stakerAddress][sortedStakers[i].index].rank =\\n                i + 1;\\n        }\\n\\n        isLocked = true;\\n        isMatured = true;\\n        lps.isMatured = isMatured;\\n\\n        emit PoolMatured();\\n    }\\n\\n    function getDifference(uint256 prediction, uint256 _range)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_range > prediction) return 0;\\n\\n        if (prediction > maturingPrice) {\\n            if (prediction.sub(_range) <= maturingPrice) return 0;\\n            else return prediction.sub(_range).sub(maturingPrice);\\n        } else {\\n            if (prediction.add(_range) >= maturingPrice) return 0;\\n            else return maturingPrice.sub(prediction.add(_range));\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the avgerage price prediction for calculating collaborative reward\\n     */ \\n    function getAveragePricePrediction() public view returns (uint256) {\\n        if (totalStaked == 0) return 0;\\n        uint256 avgPricePrediction = 0;\\n\\n        for (uint256 i = 0; i < stakers.length; i++) {\\n            StakeWithPrediction memory prediction =\\n                predictions[stakers[i].stakerAddress][stakers[i].index];\\n\\n            avgPricePrediction = avgPricePrediction.add(\\n                prediction.pricePrediction.mul(prediction.stakedBalance)\\n            );\\n        }\\n\\n        avgPricePrediction = avgPricePrediction.div(totalStaked);\\n\\n        return avgPricePrediction;\\n    }\\n\\n    function deletePool() external onlyPoolCreator {\\n        isDeleted = true;\\n        emit PoolDeleted();\\n    }\\n\\n    function getStakers() \\n        public \\n        view \\n        returns(address[] memory, uint256[] memory) \\n    {\\n        address[] memory addrs = new address[](stakers.length);\\n        uint256[] memory indexes = new uint256[](stakers.length);\\n\\n        for (uint256 i = 0; i < stakers.length; i++) {\\n            addrs[i] = stakers[i].stakerAddress;\\n            indexes[i] = stakers[i].index;\\n        }\\n\\n        return (addrs, indexes);\\n    }\\n\\n    function getStakingReward(address _staker) \\n        public \\n        view \\n        returns (uint256) \\n    {\\n        uint256 reward = ClaimRewardLib.getStakingReturn(\\n            predictions[_staker],\\n            lps\\n        );\\n\\n        return reward;\\n    }\\n\\n    function getIndexedStakingReward(address _staker, uint256 _stakeIndex) \\n        public \\n        view \\n        returns (uint256) \\n    {\\n        uint256 reward = IndexedClaimRewardLib.getIndexedStakingReturn(\\n            predictions[_staker], \\n            _stakeIndex,\\n            lps\\n        );\\n\\n        return reward;\\n    }\\n\\n     function getPrize(address _staker)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        (uint256 reward, uint256 wrappedTokenReward) = ClaimRewardLib.getPrize(\\n                predictions[_staker],\\n                lps,\\n                prizeRewardRates\\n            )\\n        ;\\n\\n        return (reward, wrappedTokenReward);\\n    }\\n\\n    function getIndexedPrize(address _staker, uint256 _stakeIndex)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        (uint256 reward, uint256 wrappedTokenReward) = IndexedClaimRewardLib.getIndexedPrize(\\n            predictions[_staker], \\n            _stakeIndex,\\n            lps,\\n            prizeRewardRates\\n        );\\n\\n        return (reward, wrappedTokenReward);\\n    }\\n\\n    /**  \\n     * @notice hasUnStaked return true if the user staked in the pool and then \\n            has unStaked it (claimed)\\n    */\\n    function hasUnStaked(address staker, uint256 stakeIndex) external view returns (bool) {\\n        StakeWithPrediction[] memory userStakes = predictions[staker];\\n\\n        require(\\n            userStakes.length > 0,\\n            \\\"0380 this address didn't stake in this pool\\\"\\n        );\\n\\n        require(\\n            stakeIndex < userStakes.length,\\n            \\\"0381 this index exceeds\\\"\\n        );\\n    \\n\\n        if (userStakes[stakeIndex].didUnstake) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function withdrawStuckTokens(address _stuckToken, uint256 amount, address receiver)\\n        external\\n        onlyPoolCreator\\n    {\\n        require(\\n            _stuckToken != address(totemToken), \\n            \\\"0370 totems can not be transfered\\\"\\n        );\\n        IERC20 stuckToken = IERC20(_stuckToken);\\n        stuckToken.transfer(receiver, amount);\\n    }\\n\\n    function declareEmergency()\\n        external\\n        onlyPoolCreator\\n    {\\n        isActive = false;\\n        isAnEmergency = true;\\n\\n        _lockPool();\\n    }\\n\\n    function emergentWithdraw() external {\\n        require(\\n            isAnEmergency,\\n            \\\"it's not an emergency\\\"\\n        );\\n\\n        uint256 stakedBalance = CalculateRewardLib.getTotalStakedBalance(predictions[_msgSender()]);\\n        if (stakedBalance > 0) {\\n\\n            ClaimRewardLib.withdrawStakedBalance(predictions[_msgSender()]);\\n\\n            totemToken.transfer(_msgSender(), stakedBalance);\\n\\n\\n            emit Unstake(_msgSender(), stakedBalance);\\n        }\\n    }\\n}\",\"keccak256\":\"0x8693045c1160ab4a15e07bfd9fc8da94648d82c6b329a61ef4ea4d4175317c7d\",\"license\":\"UNLICENSED\"},\"contracts/Staking/StakingPoolStorageStructure.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"../Distribution/USDRetriever.sol\\\";\\nimport \\\"../Price/PriceConsumerUpgradeable.sol\\\";\\nimport \\\"../Distribution/WrappedTokenDistributorUpgradeable.sol\\\";\\n\\nimport \\\"../libraries/BasisPoints.sol\\\";\\nimport \\\"../libraries/CalculateRewardLib.sol\\\";\\nimport \\\"../libraries/IndexedClaimRewardLib.sol\\\";\\nimport \\\"../libraries/ClaimRewardLib.sol\\\";\\n\\nimport \\\"../interfaces/ITotemToken.sol\\\";\\nimport \\\"../interfaces/IRewardManager.sol\\\";\\n\\ncontract StakingPoolStorageStructure is \\n    OwnableUpgradeable,  \\n    PriceConsumerUpgradeable,\\n    USDRetriever,\\n    WrappedTokenDistributorUpgradeable\\n{\\n    address public stakingPoolImplementation;\\n    address public poolCreator;\\n    address public oracleContract;\\n\\n    /**\\n     * @notice Declared for passing the needed params to libraries.\\n     */\\n    struct LibParams {\\n        uint256 launchDate;\\n        uint256 lockTime;\\n        uint256 maturityTime;\\n        uint256 maturingPrice;\\n        uint256 usdPrizeAmount;\\n        uint256 prizeAmount;\\n        uint256 stakeApr;\\n        uint256 collaborativeReward;\\n        uint256 oracleDecimals;\\n        bool isEnhancedEnabled;\\n        bool isMatured;\\n    }\\n\\n    struct StakeWithPrediction {\\n        uint256 stakedBalance;\\n        uint256 stakedTime;\\n        uint256 amountWithdrawn;\\n        uint256 lastWithdrawalTime;\\n        uint256 pricePrediction;\\n        uint256 difference;\\n        uint256 rank;\\n        bool prizeRewardWithdrawn;\\n        bool didUnstake;\\n    }\\n\\n    struct Staker {\\n        address stakerAddress;\\n        uint256 index;\\n    }\\n\\n    struct PrizeRewardRate {\\n        uint256 rank;\\n        uint256 percentage;\\n    }\\n\\n    LibParams public lps;\\n\\n    PrizeRewardRate[] public prizeRewardRates;\\n    Staker[] public stakers;\\n    Staker[] public sortedStakers;\\n\\n    mapping(address => StakeWithPrediction[]) public predictions;\\n\\n    ITotemToken public totemToken;\\n    IRewardManager public rewardManager;\\n    IERC20 public wrappedToken;\\n\\n    string public wrappedTokenSymbol;\\n    string public poolType;\\n\\n    uint256 public constant sizeLimitRangeRate = 5;\\n\\n    uint256 public launchDate;\\n    uint256 public lockTime;\\n    uint256 public maturityTime;\\n    uint256 public sizeAllocation;\\n    uint256 public stakeApr;\\n    uint256 public prizeAmount;\\n    /**\\n     * @notice usdPrizeAmount is the enabler of WrappedToken rewarder; If it is set to 0 \\n            then the pool is only TOTM rewarder.\\n     */\\n    uint256 public usdPrizeAmount;\\n    uint256 public stakeTaxRate;\\n    uint256 public minimumStakeAmount;\\n    uint256 public totalStaked;\\n    uint256 public maturingPrice;\\n    uint256 public potentialCollabReward;\\n    uint256 public collaborativeRange;\\n    /**\\n     * @notice Based on the white paper, the collaborative reward can be 20% (2000),\\n             25% (2500) or 35% (3500).\\n     */\\n    uint256 public collaborativeReward;\\n    uint256 public oracleDecimals; \\n\\n    bool public isAnEmergency;\\n    bool public isEnhancedEnabled;\\n    bool public isActive;\\n    bool public isLocked;\\n    bool public isMatured;\\n    bool public isDeleted;\\n    /**\\n     * @dev StakingPoolImplementation can't be upgraded unless superAdmin sets this flag.\\n     */\\n    bool public upgradeEnabled;\\n}\\n\",\"keccak256\":\"0x2fe6ebfad893056089253a01b1909f029d87702709f4b4b1b319d99d06ebd1ce\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPancakeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x40ff7201ca90e848ee6f006c4d114891619f28c21e713d74dc62b1ffc48d0461\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IRewardManager {\\n\\n    function setOperator(address _newOperator) external;\\n\\n    function addPool(address _poolAddress) external;\\n\\n    function rewardUser(address _user, uint256 _amount) external;\\n\\n    event SetOperator(address operator);\\n    event SetRewarder(address rewarder);\\n\\n}\",\"keccak256\":\"0xab39a767c897abdfa93b0a33593cd3c179fd5222f2a37de798d298ccf66e5adb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITotemToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface ITotemToken {\\n    \\n    function setLocker(address _locker) external;\\n\\n    function setDistributionTeamsAddresses(\\n        address _CommunityDevelopmentAddr,\\n        address _StakingRewardsAddr,\\n        address _LiquidityPoolAddr,\\n        address _PublicSaleAddr,\\n        address _AdvisorsAddr,\\n        address _SeedInvestmentAddr,\\n        address _PrivateSaleAddr,\\n        address _TeamAllocationAddr,\\n        address _StrategicRoundAddr\\n    ) external;\\n\\n    function distributeTokens() external;\\n\\n    function setTaxRate(uint256 newTaxRate) external;\\n\\n    function setTaxExemptStatus(address account, bool status) external;\\n\\n    function setTaxationWallet(address newTaxationWallet) external;\\n\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function taxRate() external returns (uint256);\\n\\n    function taxationWallet() external returns (address);\\n\\n    function taxExempt(address _msgSender) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1ba963229ac039a0550990884eb976a06fb2fe7691848ff27af1c14574346531\",\"license\":\"UNLICENSED\"},\"contracts/libraries/BasisPoints.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary BasisPoints {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant BASIS_POINTS = 10000;\\n\\n    function mulBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        return amt.mul(bp).div(BASIS_POINTS);\\n    }\\n\\n    function divBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        require(bp > 0, \\\"Cannot divide by zero.\\\");\\n        return amt.mul(BASIS_POINTS).div(bp);\\n    }\\n\\n    function addBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        if (amt == 0) return 0;\\n        if (bp == 0) return amt;\\n        return amt.add(mulBP(amt, bp));\\n    }\\n\\n    function subBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        if (amt == 0) return 0;\\n        if (bp == 0) return amt;\\n        return amt.sub(mulBP(amt, bp));\\n    }\\n}\\n\",\"keccak256\":\"0xcbe25ead953d92501d8fc100fbc9d1c5d3885b6360b3619309063fdd3b874a31\",\"license\":\"UNLICENSED\"},\"contracts/libraries/CalculateRewardLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/BasisPoints.sol\\\";\\nimport \\\"../Staking/StakingPoolStorageStructure.sol\\\";\\n\\nlibrary CalculateRewardLib {\\n\\n    using BasisPoints for uint256;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant foo = 0;\\n\\n    function getTotalStakedBalance(StakingPoolStorageStructure.StakeWithPrediction[] storage _staker)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_staker.length == 0) return 0;\\n\\n        uint256 totalStakedBalance = 0;\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            if (!_staker[i].didUnstake) {\\n                totalStakedBalance = totalStakedBalance.add(\\n                    _staker[i].stakedBalance\\n                );\\n            }\\n        }\\n\\n        return totalStakedBalance;\\n    }\\n\\n    /**\\n     * @notice the reward formula is:\\n          ((1 + stakeAPR +enhancedReward)^((MaturingDate - StakingDate)/365) - 1) * StakingBalance\\n    */\\n    function _getStakingRewardPerStake(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 maturityDate = \\n            _lps.launchDate + \\n            _lps.lockTime + \\n            _lps.maturityTime;\\n\\n        uint256 timeTo =\\n            block.timestamp > maturityDate ? maturityDate : block.timestamp;\\n\\n        uint256 enhancedApr;\\n        if ( _lps.isEnhancedEnabled ) {\\n            enhancedApr = _getEnhancedRewardRate(\\n                _staker[_stakeIndex].stakedTime,\\n                _lps\\n            );\\n        }\\n\\n        uint256 rewardPerStake = _calcStakingReturn(\\n            _lps.stakeApr.add(enhancedApr),\\n            timeTo.sub(_staker[_stakeIndex].stakedTime),\\n            _staker[_stakeIndex].stakedBalance\\n        );\\n\\n        rewardPerStake = rewardPerStake.sub(_staker[_stakeIndex].amountWithdrawn);\\n\\n        return rewardPerStake;\\n    }\\n\\n    function _getEnhancedRewardRate(\\n        uint256 stakedTime,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n\\n        if (!_lps.isEnhancedEnabled) {\\n            return 0;\\n        }\\n\\n        uint256 lockDate = _lps.launchDate.add(_lps.lockTime);\\n        uint256 difference = lockDate.sub(stakedTime);\\n\\n        if (difference < 48 hours) {\\n            return 0;\\n        } else if (difference < 72 hours) {\\n            return 100;\\n        } else if (difference < 96 hours) {\\n            return 200;\\n        } else if (difference < 120 hours) {\\n            return 300;\\n        } else if (difference < 144 hours) {\\n            return 400;\\n        } else {\\n            return 500;\\n        }\\n    }\\n\\n    function _calcStakingReturn(uint256 totalRewardRate, uint256 timeDuration, uint256 totalStakedBalance) \\n        internal \\n        pure\\n        returns (uint256) \\n    {\\n        uint256 yearInSeconds = 365 days;\\n\\n        uint256 first = (yearInSeconds**2)\\n            .mul(10**8);\\n\\n        uint256 second = timeDuration\\n            .mul(totalRewardRate) \\n            .mul(yearInSeconds)\\n            .mul(5000);\\n        \\n        uint256 third = totalRewardRate\\n            .mul(yearInSeconds**2)\\n            .mul(5000);\\n\\n        uint256 forth = (timeDuration**2)\\n            .mul(totalRewardRate**2)\\n            .div(6);\\n\\n        uint256 fifth = timeDuration\\n            .mul(totalRewardRate**2)\\n            .mul(yearInSeconds)\\n            .div(2);\\n\\n        uint256 sixth = (totalRewardRate**2)\\n            .mul(yearInSeconds**2)\\n            .div(3);\\n \\n        uint256 rewardPerStake = first.add(second).add(forth).add(sixth);\\n\\n        rewardPerStake = rewardPerStake.sub(third).sub(fifth);\\n\\n        rewardPerStake = rewardPerStake\\n            .mul(totalRewardRate)\\n            .mul(timeDuration);\\n\\n        rewardPerStake = rewardPerStake\\n            .mul(totalStakedBalance)\\n            .div(yearInSeconds**3)\\n            .div(10**12);\\n\\n        return rewardPerStake; \\n    }\\n\\n    function _getPercentageReward(\\n        uint256 _rank, \\n        StakingPoolStorageStructure.PrizeRewardRate[] storage _prizeRewardRates\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        for (uint256 i = 0; i < _prizeRewardRates.length; i++) {\\n            if (_rank <= _prizeRewardRates[i].rank) {\\n                return _prizeRewardRates[i].percentage;\\n            }\\n        }\\n\\n        return 0;\\n    }        \\n\\n\\n\\n}\",\"keccak256\":\"0xc712e3d29c87edcd36233abc68310220ad0914694200663dded7328044638e8b\",\"license\":\"UNLICENSED\"},\"contracts/libraries/ClaimRewardLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CalculateRewardLib.sol\\\";\\nimport \\\"../libraries/BasisPoints.sol\\\";\\nimport \\\"../Staking/StakingPoolStorageStructure.sol\\\";\\n\\nlibrary ClaimRewardLib {\\n\\n    using CalculateRewardLib for *;\\n    using BasisPoints for uint256; \\n    using SafeMath for uint256;\\n\\n    uint256 public constant foo = 0;\\n\\n    function withdrawStakingReturn(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    )\\n        public \\n    {\\n        \\n        if (_staker.length == 0) return;\\n\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            uint256 rewardPerStake = CalculateRewardLib._getStakingRewardPerStake(\\n                _staker, \\n                i, \\n                _lps);\\n\\n            _staker[i].lastWithdrawalTime = block.timestamp;\\n            _staker[i].amountWithdrawn = _staker[i].amountWithdrawn.add(\\n                rewardPerStake\\n            );\\n        }\\n    }\\n\\n    function withdrawPrize(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker\\n    ) \\n        public\\n    {\\n        if (_staker.length == 0) return;\\n\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            _staker[i].prizeRewardWithdrawn = true;\\n        }\\n    }\\n\\n    function withdrawStakedBalance(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker\\n    )\\n        public \\n    {\\n        \\n        if (_staker.length == 0) return;\\n\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            _staker[i].didUnstake = true;\\n        }\\n    }\\n\\n    function getStakingReturn(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker,\\n        StakingPoolStorageStructure.LibParams storage _lps  \\n    ) \\n        public \\n        view \\n        returns (uint256) \\n    {\\n        if (_staker.length == 0) return 0;\\n\\n        uint256 reward = 0;\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            uint256 rewardPerStake = CalculateRewardLib._getStakingRewardPerStake(\\n                _staker,\\n                i, \\n                _lps\\n            );\\n\\n            reward = reward.add(rewardPerStake);\\n        }\\n\\n        return reward;\\n    }\\n\\n    function getPrize(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        StakingPoolStorageStructure.LibParams storage _lps,\\n        StakingPoolStorageStructure.PrizeRewardRate[] storage _prizeRewardRates\\n    )\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        if (!_lps.isMatured) return (0, 0);\\n\\n        if (_staker.length == 0) return (0, 0);\\n\\n        uint256 maturingWrappedTokenPrizeAmount =\\n            (_lps.usdPrizeAmount.mul(10**_lps.oracleDecimals)).div(_lps.maturingPrice);\\n\\n        uint256 reward = 0;\\n        uint256 wrappedTokenReward = 0;\\n\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            if (!_staker[i].prizeRewardWithdrawn) {\\n\\n                uint256 _percent = CalculateRewardLib._getPercentageReward(\\n                    _staker[i].rank,\\n                    _prizeRewardRates\\n                );\\n\\n                reward = reward.add(\\n                            _lps.prizeAmount.mulBP(_percent)\\n                        );\\n\\n                wrappedTokenReward = wrappedTokenReward.add(\\n                            maturingWrappedTokenPrizeAmount\\n                                .mulBP(_percent)\\n                        );        \\n            }\\n        }\\n\\n        if (_lps.collaborativeReward > 0) {\\n            reward = reward.addBP(_lps.collaborativeReward);\\n            wrappedTokenReward = wrappedTokenReward.addBP(_lps.collaborativeReward);\\n        }\\n\\n        return (reward, wrappedTokenReward);\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0xec7d4e480f58753b28aa26b3a2e588c256303039bbeeac3e241ee803af5121a4\",\"license\":\"UNLICENSED\"},\"contracts/libraries/IndexedClaimRewardLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CalculateRewardLib.sol\\\";\\nimport \\\"../libraries/BasisPoints.sol\\\";\\nimport \\\"../Staking/StakingPoolStorageStructure.sol\\\";\\n\\nlibrary IndexedClaimRewardLib {\\n\\n    using CalculateRewardLib for *;\\n    using BasisPoints for uint256; \\n    using SafeMath for uint256;\\n\\n    uint256 public constant foo = 0;\\n\\n    function withdrawIndexedStakingReturn(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    ) \\n        public\\n    {\\n        if (_staker.length == 0) return;\\n        if (_stakeIndex >= _staker.length) return;\\n\\n        uint256 rewardPerStake = CalculateRewardLib._getStakingRewardPerStake(\\n            _staker, \\n            _stakeIndex,\\n            _lps\\n        );\\n\\n        _staker[_stakeIndex].lastWithdrawalTime = block.timestamp;\\n        _staker[_stakeIndex].amountWithdrawn = _staker[_stakeIndex].amountWithdrawn.add(\\n            rewardPerStake\\n        );\\n    }\\n\\n    function withdrawIndexedPrize(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex\\n    ) \\n        public \\n    {\\n        if (_staker.length == 0) return;\\n        if (_staker[_stakeIndex].prizeRewardWithdrawn) return;\\n\\n        _staker[_stakeIndex].prizeRewardWithdrawn = true;\\n    }\\n\\n    function withdrawIndexedStakedBalance(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex\\n    ) \\n        public\\n    {\\n        if (_staker.length == 0) return;\\n        if (_stakeIndex >= _staker.length) return;\\n\\n        _staker[_stakeIndex].didUnstake = true;\\n    }\\n\\n    function getIndexedStakedBalance(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_staker.length == 0) return 0;\\n        if (_stakeIndex >= _staker.length) return 0; \\n\\n        uint256 totalStakedBalance = 0;\\n\\n        if (!_staker[_stakeIndex].didUnstake) {\\n            totalStakedBalance = totalStakedBalance.add(\\n                _staker[_stakeIndex].stakedBalance\\n            );\\n        }\\n\\n        return totalStakedBalance;\\n    }\\n\\n    function getIndexedStakingReturn(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    ) \\n        public\\n        view \\n        returns (uint256) \\n    {\\n        if (_staker.length == 0) return 0;\\n        if (_stakeIndex >= _staker.length) return 0;\\n\\n        uint256 reward = 0;\\n        \\n        uint256 rewardPerStake = CalculateRewardLib._getStakingRewardPerStake(\\n            _staker, \\n            _stakeIndex,\\n            _lps\\n        );\\n        reward = reward.add(rewardPerStake);\\n\\n        return reward;\\n    }\\n\\n    function getIndexedPrize(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex,\\n        StakingPoolStorageStructure.LibParams storage _lps,\\n        StakingPoolStorageStructure.PrizeRewardRate[] storage _prizeRewardRates\\n    )\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        if (!_lps.isMatured) return (0, 0);\\n\\n        if (_staker.length == 0) return (0, 0);\\n\\n        if (_stakeIndex >= _staker.length) return (0,0);\\n\\n        if (_staker[_stakeIndex].prizeRewardWithdrawn) return (0, 0);\\n\\n        uint256 maturingWrappedTokenPrizeAmount =\\n            (_lps.usdPrizeAmount.mul(10**_lps.oracleDecimals)).div(_lps.maturingPrice);\\n\\n        uint256 reward = 0;\\n        uint256 wrappedTokenReward = 0;\\n\\n        uint256 _percent = CalculateRewardLib._getPercentageReward(\\n            _staker[_stakeIndex].rank,\\n            _prizeRewardRates\\n        );\\n\\n        reward = reward.add(\\n                        _lps.prizeAmount.mulBP(_percent)\\n                    );\\n\\n        wrappedTokenReward = wrappedTokenReward.add(\\n                        maturingWrappedTokenPrizeAmount\\n                            .mulBP(_percent)\\n                    );            \\n\\n        if (_lps.collaborativeReward > 0) {\\n            reward = reward.addBP(_lps.collaborativeReward);\\n            wrappedTokenReward = wrappedTokenReward.addBP(_lps.collaborativeReward);\\n        }\\n\\n        return (reward, wrappedTokenReward);\\n    }\\n}\\n\\n\",\"keccak256\":\"0xbc6ba78bfd18f5ed2e8b635f25eb3934e224a6ccea017141f9354ba2112e6db8\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615305806100206000396000f3fe608060405234801561001057600080fd5b50600436106104335760003560e01c80638da5cb5b11610236578063c6c1decd1161013b578063e8153c93116100c3578063f3d9dc0d11610087578063f3d9dc0d146107f9578063f5e96fc914610801578063f8e829c314610809578063f8eeed6214610811578063fd5e6dd11461081957610433565b8063e8153c93146107ae578063eb850ae1146107b6578063f0141d84146107be578063f1b17a8b146107d3578063f2fde38b146107e657610433565b8063de09ee201161010a578063de09ee2014610756578063df7f92e014610777578063e08186691461077f578063e425df8c1461079e578063e68b52e7146107a657610433565b8063c6c1decd1461072b578063d025188b14610733578063d49fab8a1461073b578063d7efb6b71461074e57610433565b8063a8f7b346116101be578063b7b301701161018d578063b7b30170146106f8578063b88a802f1461070b578063bece753214610713578063bf8521961461071b578063c12010541461072357610433565b8063a8f7b346146106c2578063aa7bcb57146106d5578063b1b1e1c0146106dd578063b1dd61b6146106f057610433565b8063a08b2c7911610205578063a08b2c7914610677578063a118c9a71461067f578063a35ef3a714610692578063a4e2d634146106a7578063a7a48681146106af57610433565b80638da5cb5b146106575780638e15f4731461065f57806395c2ba4714610667578063996c6cc31461066f57610433565b80634ddc1bdc1161033c578063785fa627116102c4578063817b1cd211610293578063817b1cd21461060f578063850fa7cb146106175780638a9920b71461063f5780638bfbbcbe146106475780638cf0e21e1461064f57610433565b8063785fa627146105d957806378f4d413146105e15780637b0472f0146105f45780637f2b6a0d1461060757610433565b80636847d0c51161030b5780636847d0c5146105b15780636b036f45146105b9578063715018a6146105c1578063725c9c49146105c957806373f31703146105d157610433565b80634ddc1bdc1461057b5780634e8bfdaa1461058e57806351eacbf0146105965780635d2631e21461059e57610433565b806337c4f6a4116103bf57806343352d611161038e57806343352d6114610524578063444a49021461053a57806345e913191461054d5780634bc4eeb2146105605780634c7c77fc1461056857610433565b806337c4f6a4146104e3578063395b3dac146104f65780633fcdd82c146105095780634026478e1461051c57610433565b8063238a6c7411610406578063238a6c74146104935780632aa8195e146104a85780632d42cf7d146104b05780632d5cd1d6146104ba57806331e244e5146104db57610433565b80630d668087146104385780630f4ef8a61461045657806322f3e2d41461046b5780632342e48014610480575b600080fd5b61044061082c565b60405161044d919061496d565b60405180910390f35b61045e610832565b60405161044d91906148b3565b610473610841565b60405161044d91906149f2565b61044061048e366004614566565b610850565b61049b6108fe565b60405161044d91906149fd565b61045e61098c565b6104b861099b565b005b6104cd6104c83660046144e4565b610c05565b60405161044d929190614976565b6104b8610cb9565b6104b86104f13660046144e4565b610d0c565b6104cd610504366004614788565b610d9d565b610440610517366004614758565b610dfe565b6104b8610ec2565b61052c610f04565b60405161044d929190614917565b6104b86105483660046145c7565b6110c1565b61047361055b366004614566565b61125c565b6104736113ae565b610440610576366004614788565b6113bc565b6104b8610589366004614788565b611440565b61044061152c565b610440611532565b6104b86105ac366004614591565b611538565b610440611622565b610440611628565b6104b861162e565b61045e611677565b610440611687565b61044061168d565b6104406105ef3660046144e4565b611693565b6104b8610602366004614788565b61173c565b610473611be9565b610440611bfa565b61062a610625366004614566565b611c00565b60405161044d99989796959493929190615119565b6104b8611c6e565b6104b8611eb6565b610473611f32565b61045e611f45565b610440611f54565b610440611ffb565b61045e612000565b61047361200f565b6104b861068d366004614720565b612018565b61069a612101565b60405161044d9190614904565b6104736121b0565b6104b86106bd366004614758565b6121c0565b6104b86106d036600461451c565b612268565b61044061231d565b6104b86106eb366004614758565b612323565b61049b612be2565b6104cd610706366004614566565b612bef565b6104b8612ca6565b61045e6134cf565b6104406134de565b610440613665565b61045e6136eb565b6104406136fa565b6104b86107493660046145fd565b613700565b610473613db4565b610769610764366004614758565b613dc6565b60405161044d9291906148eb565b6104b8613dfe565b610787613e4a565b60405161044d9b9a9998979695949392919061515c565b610440613e77565b610440613e7d565b61045e613e83565b610440613e92565b6107c6613e98565b60405161044d91906151ae565b6104cd6107e1366004614758565b613f21565b6104b86107f43660046144e4565b613f4f565b610440613fbd565b61045e613fc3565b610440613fd2565b610440614003565b610769610827366004614758565b614009565b60815481565b607c546001600160a01b031681565b608f5462010000900460ff1681565b6001600160a01b0382166000908152607a60205260408082209051634f16042360e01b815282917377D1b776f3b99b85Fbe0FC777008abcac3a12C2091634f160423916108a4918790606d90600401614984565b60206040518083038186803b1580156108bc57600080fd5b505af41580156108d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f49190614770565b9150505b92915050565b607e805461090b9061522a565b80601f01602080910402602001604051908101604052809291908181526020018280546109379061522a565b80156109845780601f1061095957610100808354040283529160200191610984565b820191906000526020600020905b81548152906001019060200180831161096757829003601f168201915b505050505081565b606a546001600160a01b031681565b606b546001600160a01b03166109af614019565b6001600160a01b0316146109de5760405162461bcd60e51b81526004016109d590614e91565b60405180910390fd5b6082546081546080546109f191906151bc565b6109fb91906151bc565b421015610a1a5760405162461bcd60e51b81526004016109d590614bd1565b60865415610a4657610a2a613fd2565b610a465760405162461bcd60e51b81526004016109d590614fd3565b60785415610a6d57607954610a6d5760405162461bcd60e51b81526004016109d590614c1d565b608b5415610a9f576000610a7f6134de565b9050610a8d81608c546113bc565b610a9d57608b54608d8190556074555b505b607954600090601910610ab457607954610ab7565b60195b905060005b81811015610b9557610acf8160016151bc565b607a600060798481548110610af457634e487b7160e01b600052603260045260246000fd5b600091825260208083206002909202909101546001600160a01b0316835282019290925260400190206079805484908110610b3f57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016001015481548110610b6f57634e487b7160e01b600052603260045260246000fd5b600091825260209091206006600890920201015580610b8d81615265565b915050610abc565b50608f805464ff000000001963ff000000199091166301000000171664010000000090811791829055607680549190920460ff1615156101000261ff00199091161790556040517fe8ef7a17c92d025d9c1ead1c6b3ca3b44d3283d0ee954f615c5c476911f629a590600090a150565b6001600160a01b0381166000908152607a602052604080822090516332a1b32160e01b8152829182918291733D22ad37588c9052e26D932C0C5BA6851518F062916332a1b32191610c5e91606d90607790600401614984565b604080518083038186803b158015610c7557600080fd5b505af4158015610c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cad91906147a9565b90945092505050915091565b606b546001600160a01b0316610ccd614019565b6001600160a01b031614610cf35760405162461bcd60e51b81526004016109d590614e91565b608f805462ff00ff19166001179055610d0a61401d565b565b600054610100900460ff1680610d25575060005460ff16155b610d415760405162461bcd60e51b81526004016109d590614e43565b600054610100900460ff16158015610d6c576000805460ff1961ff0019909116610100171660011790555b606580546001600160a01b0319166001600160a01b0384161790558015610d99576000805461ff00191690555b5050565b60008060008360875411610db2576000610dbf565b608754610dbf908561405b565b905080610dd3576000859250925050610df7565b610ddd8582614067565b610df1610dea8784614067565b879061405b565b92509250505b9250929050565b60675460009081906001600160a01b031663d06ca61f84610e1d612101565b6040518363ffffffff1660e01b8152600401610e3a9291906150bc565b60006040518083038186803b158015610e5257600080fd5b505afa158015610e66573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e8e9190810190614666565b905080600181518110610eb157634e487b7160e01b600052603260045260246000fd5b60200260200101519150505b919050565b606b546001600160a01b0316610ed6614019565b6001600160a01b031614610efc5760405162461bcd60e51b81526004016109d590614e91565b610d0a61401d565b606080600060788054905067ffffffffffffffff811115610f3557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f5e578160200160208202803683370190505b5060785490915060009067ffffffffffffffff811115610f8e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610fb7578160200160208202803683370190505b50905060005b6078548110156110b75760788181548110610fe857634e487b7160e01b600052603260045260246000fd5b600091825260209091206002909102015483516001600160a01b039091169084908390811061102757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250506078818154811061106857634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016001015482828151811061109a57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806110af81615265565b915050610fbd565b5090925090509091565b606b546001600160a01b03166110d5614019565b6001600160a01b0316146110fb5760405162461bcd60e51b81526004016109d590614e91565b6079541561110f5761110f60796000614430565b60005b601981101561122e57600083826019811061113d57634e487b7160e01b600052603260045260246000fd5b60200201602081019061115091906144e4565b6001600160a01b031614156111645761122e565b6079604051806040016040528085846019811061119157634e487b7160e01b600052603260045260246000fd5b6020020160208101906111a491906144e4565b6001600160a01b031681526020018484601981106111d257634e487b7160e01b600052603260045260246000fd5b60209081029190910135909152825460018082018555600094855293829020835160029092020180546001600160a01b0319166001600160a01b039092169190911781559101519101558061122681615265565b915050611112565b506040517f5c243cc6e4f210bf2dd86b8eca0ca891d3f8ad2eb09fbf91735eb348bc199c7e90600090a15050565b6001600160a01b0382166000908152607a6020908152604080832080548251818502810185019093528083528493849084015b8282101561132157600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e08501526101009182900416151590830152908352909201910161128f565b50505050905060008151116113485760405162461bcd60e51b81526004016109d590614f07565b805183106113685760405162461bcd60e51b81526004016109d590614a50565b80838151811061138857634e487b7160e01b600052603260045260246000fd5b60200260200101516101000151156113a45760019150506108f8565b5060009392505050565b608f54610100900460ff1681565b6000828211156113ce575060006108f8565b608a5483111561141057608a546113e5848461405b565b116113f2575060006108f8565b608a5461140990611403858561405b565b9061405b565b90506108f8565b608a5461141d8484614079565b1061142a575060006108f8565b6114096114378484614079565b608a549061405b565b606b546001600160a01b0316611454614019565b6001600160a01b03161461147a5760405162461bcd60e51b81526004016109d590614e91565b60006086541161149c5760405162461bcd60e51b81526004016109d590614b48565b600082116114bc5760405162461bcd60e51b81526004016109d590614ddd565b428110156114dc5760405162461bcd60e51b81526004016109d590614c4d565b60006114e6611677565b90506114f28184614085565b60006114fd84610dfe565b905060006115176115108361012c614067565b839061405b565b90506115253086838761414f565b5050505050565b60825481565b60835481565b606b546001600160a01b031661154c614019565b6001600160a01b0316146115725760405162461bcd60e51b81526004016109d590614e91565b607b546001600160a01b03848116911614156115a05760405162461bcd60e51b81526004016109d590614d9c565b60405163a9059cbb60e01b815283906001600160a01b0382169063a9059cbb906115d090859087906004016148eb565b602060405180830381600087803b1580156115ea57600080fd5b505af11580156115fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611525919061473c565b60875481565b60885481565b611636614019565b6001600160a01b0316611647611f45565b6001600160a01b03161461166d5760405162461bcd60e51b81526004016109d590614ed2565b610d0a60006141f5565b6067546001600160a01b03165b90565b60865481565b60855481565b6001600160a01b0381166000908152607a60205260408082209051630d46757760e41b81528291733D22ad37588c9052e26D932C0C5BA6851518F0629163d4675770916116e591606d90600401614976565b60206040518083038186803b1580156116fd57600080fd5b505af4158015611711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117359190614770565b9392505050565b608f5462010000900460ff168015611755575060805442115b6117715760405162461bcd60e51b81526004016109d590614f52565b60815460805461178191906151bc565b421061179f5760405162461bcd60e51b81526004016109d590614ab4565b608f546301000000900460ff16156117c95760405162461bcd60e51b81526004016109d590614a87565b6088548210156117eb5760405162461bcd60e51b81526004016109d590614f89565b600061180e6064611808600560835461424790919063ffffffff16565b90614253565b90506000607b60009054906101000a90046001600160a01b03166001600160a01b031663771a3a1d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561186257600080fd5b505af1158015611876573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189a9190614770565b607b549091506000906001600160a01b031663d1ecfc686118b9614019565b6040518263ffffffff1660e01b81526004016118d591906148b3565b602060405180830381600087803b1580156118ef57600080fd5b505af1158015611903573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611927919061473c565b61193a576119358583614067565b61193d565b60005b60835490915061194d9084614079565b611966826114038860895461407990919063ffffffff16565b11156119845760405162461bcd60e51b81526004016109d590614d56565b60006119908684610d9d565b607b549097509091506001600160a01b03166323b872dd6119af614019565b306119ba858b6151bc565b6040518463ffffffff1660e01b81526004016119d8939291906148c7565b602060405180830381600087803b1580156119f257600080fd5b505af1158015611a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2a919061473c565b50611a35868361405b565b95508015611b3657607b5460408051634a5db0a960e01b815290516001600160a01b039092169163a9059cbb918391634a5db0a9916004808201926020929091908290030181600087803b158015611a8c57600080fd5b505af1158015611aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac49190614500565b836040518363ffffffff1660e01b8152600401611ae29291906148eb565b602060405180830381600087803b158015611afc57600080fd5b505af1158015611b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b34919061473c565b505b608954611b439087614079565b6089556000607a81611b53614019565b6001600160a01b031681526020810191909152604001600020549050611b81611b7a614019565b888861425f565b60835460895410611b9457611b9461401d565b611b9c614019565b6001600160a01b03167ff556991011e831bcfac4f406d547e5e32cdd98267efab83935230d5f8d02c446888884604051611bd893929190614984565b60405180910390a250505050505050565b608f54640100000000900460ff1681565b60895481565b607a6020528160005260406000208181548110611c1c57600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701549598509396509194909391929160ff8082169161010090041689565b608f5460ff16611c905760405162461bcd60e51b81526004016109d590614e14565b6000738bb1FB368152C5c2B772e1c5c0D6B506c330D41f63066f1dee607a6000611cb8614019565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401611cf4919061496d565b60206040518083038186803b158015611d0c57600080fd5b505af4158015611d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d449190614770565b90508015611eb357733D22ad37588c9052e26D932C0C5BA6851518F06263f66d9a4d607a6000611d72614019565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401611dae919061496d565b60006040518083038186803b158015611dc657600080fd5b505af4158015611dda573d6000803e3d6000fd5b5050607b546001600160a01b0316915063a9059cbb9050611df9614019565b836040518363ffffffff1660e01b8152600401611e179291906148eb565b602060405180830381600087803b158015611e3157600080fd5b505af1158015611e45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e69919061473c565b50611e72614019565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd82604051611eaa919061496d565b60405180910390a25b50565b606b546001600160a01b0316611eca614019565b6001600160a01b031614611ef05760405162461bcd60e51b81526004016109d590614e91565b608f805465ff00000000001916650100000000001790556040517f9331b2a38c658c57a39ea19b2709d928c28a12cc8fbb838d12b85148550f937d90600090a1565b608f546601000000000000900460ff1681565b6033546001600160a01b031690565b600080606560009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611fa557600080fd5b505afa158015611fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdd91906147cc565b5050509150506000811215611ff3576000611ff5565b805b91505090565b600581565b607d546001600160a01b031681565b608f5460ff1681565b606b546001600160a01b031661202c614019565b6001600160a01b0316146120525760405162461bcd60e51b81526004016109d590614e91565b608f5460ff6201000090910416151581151514156120825760405162461bcd60e51b81526004016109d590614cd0565b608f805462ff00001916620100008315158102919091179182905560ff910416156120d5576040517f3d31b97eef590df350bb2cdbc390034c613c9f23ea6ae1906682628c85248b5390600090a1611eb3565b6040517f763d36bfedf6707954f8bb39c2011a58a47a54844f2b3cdcd326c71cad0aa75390600090a150565b60408051600280825260608083018452926000929190602083019080368337505060685482519293506001600160a01b03169183915060009061215457634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260695482519116908290600190811061219357634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152905090565b608f546301000000900460ff1681565b606b546001600160a01b03166121d4614019565b6001600160a01b0316146121fa5760405162461bcd60e51b81526004016109d590614e91565b60825460815460805461220d91906151bc565b61221791906151bc565b4210156122365760405162461bcd60e51b81526004016109d590615048565b606c546001600160a01b031661225557608a8190556070819055611eb3565b61225d611f54565b608a81905560705550565b600054610100900460ff1680612281575060005460ff16155b61229d5760405162461bcd60e51b81526004016109d590614e43565b600054610100900460ff161580156122c8576000805460ff1961ff0019909116610100171660011790555b606780546001600160a01b038087166001600160a01b0319928316179092556068805486841690831617905560698054928516929091169190911790558015612317576000805461ff00191690555b50505050565b60845481565b80607a6000612330614019565b6001600160a01b0316815260208101919091526040016000205410156123685760405162461bcd60e51b81526004016109d59061501a565b607a6000612374614019565b6001600160a01b031681526020810191909152604001600020546123aa5760405162461bcd60e51b81526004016109d590614c7b565b60007377D1b776f3b99b85Fbe0FC777008abcac3a12C20634f160423607a60006123d2614019565b6001600160a01b03166001600160a01b0316815260200190815260200160002084606d6040518463ffffffff1660e01b815260040161241393929190614984565b60206040518083038186803b15801561242b57600080fd5b505af415801561243f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124639190614770565b90506000807377D1b776f3b99b85Fbe0FC777008abcac3a12C2063f7ac9cba607a600061248e614019565b6001600160a01b03166001600160a01b0316815260200190815260200160002086606d60776040518563ffffffff1660e01b81526004016124d2949392919061499a565b604080518083038186803b1580156124e957600080fd5b505af41580156124fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252191906147a9565b9092509050600061253284846151bc565b608f54909150640100000000900460ff161561299e57608654156126da5781156126da577377D1b776f3b99b85Fbe0FC777008abcac3a12C206393aaeaf9607a600061257c614019565b6001600160a01b03166001600160a01b03168152602001908152602001600020876040518363ffffffff1660e01b81526004016125ba929190614976565b60006040518083038186803b1580156125d257600080fd5b505af41580156125e6573d6000803e3d6000fd5b5050607d546001600160a01b0316915063a9059cbb9050612605614019565b846040518363ffffffff1660e01b81526004016126239291906148eb565b602060405180830381600087803b15801561263d57600080fd5b505af1158015612651573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612675919061473c565b6126915760405162461bcd60e51b81526004016109d59061509e565b612699614019565b6001600160a01b03167fd93fc6d1e8779271f55cdb0d5f7b6b05be64a2226a1ad050d3036f5609c1cdcf836040516126d1919061496d565b60405180910390a25b8215612775577377D1b776f3b99b85Fbe0FC777008abcac3a12C206393aaeaf9607a6000612706614019565b6001600160a01b03166001600160a01b03168152602001908152602001600020876040518363ffffffff1660e01b8152600401612744929190614976565b60006040518083038186803b15801561275c57600080fd5b505af4158015612770573d6000803e3d6000fd5b505050505b60007377D1b776f3b99b85Fbe0FC777008abcac3a12C20635eac7af3607a600061279d614019565b6001600160a01b03166001600160a01b03168152602001908152602001600020886040518363ffffffff1660e01b81526004016127db929190614976565b60206040518083038186803b1580156127f357600080fd5b505af4158015612807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282b9190614770565b9050801561299c577377D1b776f3b99b85Fbe0FC777008abcac3a12C2063ec8ecc02607a6000612859614019565b6001600160a01b03166001600160a01b03168152602001908152602001600020886040518363ffffffff1660e01b8152600401612897929190614976565b60006040518083038186803b1580156128af57600080fd5b505af41580156128c3573d6000803e3d6000fd5b5050607b546001600160a01b0316915063a9059cbb90506128e2614019565b836040518363ffffffff1660e01b81526004016129009291906148eb565b602060405180830381600087803b15801561291a57600080fd5b505af115801561292e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612952919061473c565b5061295b614019565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd82604051612993919061496d565b60405180910390a25b505b801561152557607b54607c546040516370a0823160e01b815283926001600160a01b03908116926370a08231926129db92909116906004016148b3565b60206040518083038186803b1580156129f357600080fd5b505afa158015612a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a2b9190614770565b1015612a495760405162461bcd60e51b81526004016109d590614d12565b7377D1b776f3b99b85Fbe0FC777008abcac3a12C2063eaff3050607a6000612a6f614019565b6001600160a01b03166001600160a01b0316815260200190815260200160002087606d6040518463ffffffff1660e01b8152600401612ab093929190614984565b60006040518083038186803b158015612ac857600080fd5b505af4158015612adc573d6000803e3d6000fd5b5050607c546001600160a01b0316915063e4e103dc9050612afb614019565b836040518363ffffffff1660e01b8152600401612b199291906148eb565b600060405180830381600087803b158015612b3357600080fd5b505af1158015612b47573d6000803e3d6000fd5b50505050612b53614019565b6001600160a01b03167f115e2fe760f98d4fd0828d7741ae2070e7db700f892efbfe98448b53ac58388685604051612b8b919061496d565b60405180910390a2612b9b614019565b6001600160a01b03167f723b06f6c3a94dc82019852e6aa01c0241fba5f84410b9003ddc3440ad499e5984604051612bd3919061496d565b60405180910390a25050505050565b607f805461090b9061522a565b6001600160a01b0382166000908152607a60205260408082209051637bd64e5d60e11b81528291829182917377D1b776f3b99b85Fbe0FC777008abcac3a12C209163f7ac9cba91612c4a918990606d9060779060040161499a565b604080518083038186803b158015612c6157600080fd5b505af4158015612c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9991906147a9565b9097909650945050505050565b6000733D22ad37588c9052e26D932C0C5BA6851518F06263d4675770607a6000612cce614019565b6001600160a01b03166001600160a01b03168152602001908152602001600020606d6040518363ffffffff1660e01b8152600401612d0d929190614976565b60206040518083038186803b158015612d2557600080fd5b505af4158015612d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d5d9190614770565b9050600080733D22ad37588c9052e26D932C0C5BA6851518F0626332a1b321607a6000612d88614019565b6001600160a01b03166001600160a01b03168152602001908152602001600020606d60776040518463ffffffff1660e01b8152600401612dca93929190614984565b604080518083038186803b158015612de157600080fd5b505af4158015612df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1991906147a9565b90925090506000612e2a84846151bc565b608f54909150640100000000900460ff161561328e5760865415612fd0578115612fd057733D22ad37588c9052e26D932C0C5BA6851518F0626347dc9eee607a6000612e74614019565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401612eb0919061496d565b60006040518083038186803b158015612ec857600080fd5b505af4158015612edc573d6000803e3d6000fd5b5050607d546001600160a01b0316915063a9059cbb9050612efb614019565b846040518363ffffffff1660e01b8152600401612f199291906148eb565b602060405180830381600087803b158015612f3357600080fd5b505af1158015612f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6b919061473c565b612f875760405162461bcd60e51b81526004016109d590614cb2565b612f8f614019565b6001600160a01b03167fd93fc6d1e8779271f55cdb0d5f7b6b05be64a2226a1ad050d3036f5609c1cdcf83604051612fc7919061496d565b60405180910390a25b821561306957733D22ad37588c9052e26D932C0C5BA6851518F0626347dc9eee607a6000612ffc614019565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401613038919061496d565b60006040518083038186803b15801561305057600080fd5b505af4158015613064573d6000803e3d6000fd5b505050505b6000738bb1FB368152C5c2B772e1c5c0D6B506c330D41f63066f1dee607a6000613091614019565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b81526004016130cd919061496d565b60206040518083038186803b1580156130e557600080fd5b505af41580156130f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311d9190614770565b9050801561328c57733D22ad37588c9052e26D932C0C5BA6851518F06263f66d9a4d607a600061314b614019565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401613187919061496d565b60006040518083038186803b15801561319f57600080fd5b505af41580156131b3573d6000803e3d6000fd5b5050607b546001600160a01b0316915063a9059cbb90506131d2614019565b836040518363ffffffff1660e01b81526004016131f09291906148eb565b602060405180830381600087803b15801561320a57600080fd5b505af115801561321e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613242919061473c565b5061324b614019565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd82604051613283919061496d565b60405180910390a25b505b801561231757607b54607c546040516370a0823160e01b815283926001600160a01b03908116926370a08231926132cb92909116906004016148b3565b60206040518083038186803b1580156132e357600080fd5b505afa1580156132f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061331b9190614770565b10156133395760405162461bcd60e51b81526004016109d590614d12565b733D22ad37588c9052e26D932C0C5BA6851518F062634142c652607a600061335f614019565b6001600160a01b03166001600160a01b03168152602001908152602001600020606d6040518363ffffffff1660e01b815260040161339e929190614976565b60006040518083038186803b1580156133b657600080fd5b505af41580156133ca573d6000803e3d6000fd5b5050607c546001600160a01b0316915063e4e103dc90506133e9614019565b836040518363ffffffff1660e01b81526004016134079291906148eb565b600060405180830381600087803b15801561342157600080fd5b505af1158015613435573d6000803e3d6000fd5b50505050613441614019565b6001600160a01b03167f115e2fe760f98d4fd0828d7741ae2070e7db700f892efbfe98448b53ac58388685604051613479919061496d565b60405180910390a2613489614019565b6001600160a01b03167f723b06f6c3a94dc82019852e6aa01c0241fba5f84410b9003ddc3440ad499e59846040516134c1919061496d565b60405180910390a250505050565b606c546001600160a01b031681565b6000608954600014156134f357506000611684565b6000805b607854811015613656576000607a60006078848154811061352857634e487b7160e01b600052603260045260246000fd5b600091825260208083206002909202909101546001600160a01b031683528201929092526040019020607880548490811061357357634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154815481106135a357634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051610120810182526008909302909101805480845260018201549484019490945260028101549183019190915260038101546060830152600481015460808301819052600582015460a0840152600682015460c084015260079091015460ff808216151560e08501526101009182900416151590830152909250613640916136399190614247565b8490614079565b925050808061364e90615265565b9150506134f7565b50608954611ff5908290614253565b6066546040516370a0823160e01b81526000916001600160a01b0316906370a08231906136969030906004016148b3565b60206040518083038186803b1580156136ae57600080fd5b505afa1580156136c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136e69190614770565b905090565b606b546001600160a01b031681565b608a5481565b608f5462010000900460ff168015613719575060805442115b6137355760405162461bcd60e51b81526004016109d590614f52565b60815460805461374591906151bc565b42106137635760405162461bcd60e51b81526004016109d590614ab4565b608f546301000000900460ff161561378d5760405162461bcd60e51b81526004016109d590614a87565b8281146137ac5760405162461bcd60e51b81526004016109d590614af6565b6000805b8481101561384d576088548686838181106137db57634e487b7160e01b600052603260045260246000fd5b9050602002013510156138005760405162461bcd60e51b81526004016109d590614f89565b61383986868381811061382357634e487b7160e01b600052603260045260246000fd5b905060200201358361407990919063ffffffff16565b91508061384581615265565b9150506137b0565b50600061386b6064611808600560835461424790919063ffffffff16565b90506000607b60009054906101000a90046001600160a01b03166001600160a01b031663771a3a1d6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156138bf57600080fd5b505af11580156138d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138f79190614770565b607b549091506000906001600160a01b031663d1ecfc68613916614019565b6040518263ffffffff1660e01b815260040161393291906148b3565b602060405180830381600087803b15801561394c57600080fd5b505af1158015613960573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613984919061473c565b613997576139928483614067565b61399a565b60005b6083549091506139aa9084614079565b6139c3826114038760895461407990919063ffffffff16565b11156139e15760405162461bcd60e51b81526004016109d590614d56565b60006139ed8584610d9d565b607b549096509091506001600160a01b03166323b872dd613a0c614019565b30613a17858a6151bc565b6040518463ffffffff1660e01b8152600401613a35939291906148c7565b602060405180830381600087803b158015613a4f57600080fd5b505af1158015613a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a87919061473c565b50613a92858361405b565b94508015613b9357607b5460408051634a5db0a960e01b815290516001600160a01b039092169163a9059cbb918391634a5db0a9916004808201926020929091908290030181600087803b158015613ae957600080fd5b505af1158015613afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b219190614500565b836040518363ffffffff1660e01b8152600401613b3f9291906148eb565b602060405180830381600087803b158015613b5957600080fd5b505af1158015613b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b91919061473c565b505b608954613ba09086614079565b6089556000607a81613bb0614019565b6001600160a01b03168152602081019190915260400160009081205491505b89811015613d0b5760008b8b83818110613bf957634e487b7160e01b600052603260045260246000fd5b607b54602090910292909201359250506001600160a01b031663d1ecfc68613c1f614019565b6040518263ffffffff1660e01b8152600401613c3b91906148b3565b602060405180830381600087803b158015613c5557600080fd5b505af1158015613c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c8d919061473c565b613ca057613c9b8187614067565b613ca3565b60005b9450613caf8187610d9d565b9094509050613cbe818661405b565b9050613cf8613ccb614019565b828c8c86818110613cec57634e487b7160e01b600052603260045260246000fd5b9050602002013561425f565b5080613d0381615265565b915050613bcf565b5060006001607a6000613d1c614019565b6001600160a01b03168152602081019190915260400160002054613d409190615213565b905060835460895410613d5557613d5561401d565b613d5d614019565b6001600160a01b03167f852fe7a2ad7b2c8c0a0e9b927734feb1acc3e8bc608b8921d4c4768c6193c33b8c8c8c8c8787604051613d9f969594939291906149b5565b60405180910390a25050505050505050505050565b608f5465010000000000900460ff1681565b60798181548110613dd657600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b606b546001600160a01b0316613e12614019565b6001600160a01b031614613e385760405162461bcd60e51b81526004016109d590614e91565b606c80546001600160a01b0319169055565b606d54606e54606f5460705460715460725460735460745460755460765460ff808216916101009004168b565b608b5481565b608e5481565b607b546001600160a01b031681565b608c5481565b600080606560009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015613ee957600080fd5b505afa158015613efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff5919061481b565b60778181548110613f3157600080fd5b60009182526020909120600290910201805460019091015490915082565b613f57614019565b6001600160a01b0316613f68611f45565b6001600160a01b031614613f8e5760405162461bcd60e51b81526004016109d590614ed2565b6001600160a01b038116613fb45760405162461bcd60e51b81526004016109d590614b8b565b611eb3816141f5565b608d5481565b6066546001600160a01b031690565b607d546040516370a0823160e01b81526000916001600160a01b0316906370a08231906136969030906004016148b3565b60805481565b60788181548110613dd657600080fd5b3390565b608f805463ff000000191663010000001790556040517f2e136745550967f28b779ce8c395ca060a2f844edfb5b06631fe677f66f9e30590600090a1565b60006117358284615213565b60006117356127106118088585614247565b600061173582846151bc565b60665460405163095ea7b360e01b81526001600160a01b039091169063095ea7b3906140b790859085906004016148eb565b602060405180830381600087803b1580156140d157600080fd5b505af11580156140e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614109919061473c565b50816001600160a01b03167fd77df63d9076d067d9fd7af16c3d67db48b84064c3314f5900ae919922d364a182604051614143919061496d565b60405180910390a25050565b6001600160a01b03841661416257600080fd5b6067546001600160a01b03166338ed1739848461417d612101565b88866040518663ffffffff1660e01b815260040161419f9594939291906150dd565b600060405180830381600087803b1580156141b957600080fd5b505af11580156141cd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115259190810190614666565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061173582846151f4565b600061173582846151d4565b60786040518060400160405280856001600160a01b03168152602001607a6000876001600160a01b03166001600160a01b0316815260200190815260200160002080549050815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101555050607a6000846001600160a01b03166001600160a01b031681526020019081526020016000206040518061012001604052808481526020014281526020016000815260200142815260200183815260200160001981526020016000198152602001600015158152602001600015158152509080600181540180825580915050600190039060005260206000209060080201600090919091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff0219169083151502179055506101008201518160070160016101000a81548160ff0219169083151502179055505050505050565b5080546000825560020290600052602060002090810190611eb391905b808211156144725780546001600160a01b03191681556000600182015560020161444d565b5090565b8061032081018310156108f857600080fd5b60008083601f840112614499578182fd5b50813567ffffffffffffffff8111156144b0578182fd5b6020830191508360208083028501011115610df757600080fd5b805169ffffffffffffffffffff81168114610ebd57600080fd5b6000602082840312156144f5578081fd5b8135611735816152ac565b600060208284031215614511578081fd5b8151611735816152ac565b600080600060608486031215614530578182fd5b833561453b816152ac565b9250602084013561454b816152ac565b9150604084013561455b816152ac565b809150509250925092565b60008060408385031215614578578182fd5b8235614583816152ac565b946020939093013593505050565b6000806000606084860312156145a5578283fd5b83356145b0816152ac565b925060208401359150604084013561455b816152ac565b60008061064083850312156145da578182fd5b6145e48484614476565b91506145f4846103208501614476565b90509250929050565b60008060008060408587031215614612578081fd5b843567ffffffffffffffff80821115614629578283fd5b61463588838901614488565b9096509450602087013591508082111561464d578283fd5b5061465a87828801614488565b95989497509550505050565b60006020808385031215614678578182fd5b825167ffffffffffffffff8082111561468f578384fd5b818501915085601f8301126146a2578384fd5b8151818111156146b4576146b4615296565b838102604051858282010181811085821117156146d3576146d3615296565b604052828152858101935084860182860187018a10156146f1578788fd5b8795505b838610156147135780518552600195909501949386019386016146f5565b5098975050505050505050565b600060208284031215614731578081fd5b8135611735816152c1565b60006020828403121561474d578081fd5b8151611735816152c1565b600060208284031215614769578081fd5b5035919050565b600060208284031215614781578081fd5b5051919050565b6000806040838503121561479a578182fd5b50508035926020909101359150565b600080604083850312156147bb578182fd5b505080516020909101519092909150565b600080600080600060a086880312156147e3578283fd5b6147ec866144ca565b945060208601519350604086015192506060860151915061480f608087016144ca565b90509295509295909350565b60006020828403121561482c578081fd5b815160ff81168114611735578182fd5b6000815180845260208085019450808401835b838110156148745781516001600160a01b03168752958201959082019060010161484f565b509495945050505050565b81835260006001600160fb1b03831115614897578081fd5b6020830280836020870137939093016020019283525090919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b600060208252611735602083018461483c565b60006040825261492a604083018561483c565b828103602084810191909152845180835285820192820190845b8181101561496057845183529383019391830191600101614944565b5090979650505050505050565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b6000608082526149c960808301888a61487f565b82810360208401526149dc81878961487f565b6040840195909552505060600152949350505050565b901515815260200190565b6000602080835283518082850152825b81811015614a2957858101830151858201604001528201614a0d565b81811115614a3a5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526017908201527f30333831207468697320696e6465782065786365656473000000000000000000604082015260600190565b6020808252601390820152720c0ccc4c08141bdbdb081a5cc81b1bd8dad959606a1b604082015260600190565b60208082526022908201527f303331362043616e206e6f74207374616b65206166746572206c6f636b206461604082015261746560f01b606082015260800190565b60208082526032908201527f30333135207374616b696e67416d6f756e7420616e642070726564696374696f6040820152710dce640d8cadccee8d040dad2e6dac2e8c6d60731b606082015260800190565b60208082526023908201527f303334302054686520706f6f6c206973206f6e6c7920544f544d2072657761726040820152623232b960e91b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252602c908201527f303336302043616e277420656e6420706f6f6c206265666f726520746865206d60408201526b617475726974792074696d6560a01b606082015260800190565b6020808252601690820152750c0ccd8c88199a5c9cdd081cda1bdd5b19081cdbdc9d60521b604082015260600190565b6020808252601490820152733033343220446561646c696e65206973206c6f7760601b604082015260600190565b6020808252601d908201527f5573657220646f6573206e6f74206861766520616e79207374616b6573000000604082015260600190565b6020808252600490820152630303332360e41b604082015260600190565b60208082526022908201527f4e6f74206368616e67696e67207468652061637469766174696f6e2073746174604082015261757360f01b606082015260800190565b60208082526024908201527f4e6f7420656e6f7567682062616c616e636520696e20726577617264206d616e60408201526330b3b2b960e11b606082015260800190565b60208082526026908201527f303331322043616e2774207374616b652061626f76652073697a6520616c6c6f60408201526531b0ba34b7b760d11b606082015260800190565b60208082526021908201527f3033373020746f74656d732063616e206e6f74206265207472616e73666572656040820152601960fa1b606082015260800190565b60208082526019908201527f3033343120416d6f756e742063616e2774206265207a65726f00000000000000604082015260600190565b60208082526015908201527469742773206e6f7420616e20656d657267656e637960581b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526021908201527f303330302063616c6c6572206973206e6f74206120706f6f6c2063726561746f6040820152603960f91b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f3033383020746869732061646472657373206469646e2774207374616b65206960408201526a1b881d1a1a5cc81c1bdbdb60aa1b606082015260800190565b60208082526017908201527f3033313320706f6f6c206973206e6f7420616374697665000000000000000000604082015260600190565b6020808252602a908201527f3033313120416d6f756e742063616e2774206265206c657373207468616e20746040820152696865206d696e696d756d60b01b606082015260800190565b60208082526027908201527f303336312057726170706564546f6b656e2052657761726473206e6f7420617660408201526661696c61626c6560c81b606082015260800190565b602080825260149082015273125b99195e08191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b60208082526036908201527f303335302043616e277420736574206d61747572696e67207072696365206265604082015275666f726520746865206d617475726974792074696d6560501b606082015260800190565b6020808252600490820152630303333360e41b604082015260600190565b6000838252604060208301526150d5604083018461483c565b949350505050565b600086825285602083015260a060408301526150fc60a083018661483c565b6001600160a01b0394909416606083015250608001529392505050565b988952602089019790975260408801959095526060870193909352608086019190915260a085015260c0840152151560e083015215156101008201526101200190565b9a8b5260208b019990995260408a01979097526060890195909552608088019390935260a087019190915260c086015260e0850152610100840152151561012083015215156101408201526101600190565b60ff91909116815260200190565b600082198211156151cf576151cf615280565b500190565b6000826151ef57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561520e5761520e615280565b500290565b60008282101561522557615225615280565b500390565b60028104600182168061523e57607f821691505b6020821081141561525f57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561527957615279615280565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611eb357600080fd5b8015158114611eb357600080fdfea264697066735822122035db294c0a750e8cf676d88f357032ef92b9bb1eddc56d58659f0c085f02803e64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104335760003560e01c80638da5cb5b11610236578063c6c1decd1161013b578063e8153c93116100c3578063f3d9dc0d11610087578063f3d9dc0d146107f9578063f5e96fc914610801578063f8e829c314610809578063f8eeed6214610811578063fd5e6dd11461081957610433565b8063e8153c93146107ae578063eb850ae1146107b6578063f0141d84146107be578063f1b17a8b146107d3578063f2fde38b146107e657610433565b8063de09ee201161010a578063de09ee2014610756578063df7f92e014610777578063e08186691461077f578063e425df8c1461079e578063e68b52e7146107a657610433565b8063c6c1decd1461072b578063d025188b14610733578063d49fab8a1461073b578063d7efb6b71461074e57610433565b8063a8f7b346116101be578063b7b301701161018d578063b7b30170146106f8578063b88a802f1461070b578063bece753214610713578063bf8521961461071b578063c12010541461072357610433565b8063a8f7b346146106c2578063aa7bcb57146106d5578063b1b1e1c0146106dd578063b1dd61b6146106f057610433565b8063a08b2c7911610205578063a08b2c7914610677578063a118c9a71461067f578063a35ef3a714610692578063a4e2d634146106a7578063a7a48681146106af57610433565b80638da5cb5b146106575780638e15f4731461065f57806395c2ba4714610667578063996c6cc31461066f57610433565b80634ddc1bdc1161033c578063785fa627116102c4578063817b1cd211610293578063817b1cd21461060f578063850fa7cb146106175780638a9920b71461063f5780638bfbbcbe146106475780638cf0e21e1461064f57610433565b8063785fa627146105d957806378f4d413146105e15780637b0472f0146105f45780637f2b6a0d1461060757610433565b80636847d0c51161030b5780636847d0c5146105b15780636b036f45146105b9578063715018a6146105c1578063725c9c49146105c957806373f31703146105d157610433565b80634ddc1bdc1461057b5780634e8bfdaa1461058e57806351eacbf0146105965780635d2631e21461059e57610433565b806337c4f6a4116103bf57806343352d611161038e57806343352d6114610524578063444a49021461053a57806345e913191461054d5780634bc4eeb2146105605780634c7c77fc1461056857610433565b806337c4f6a4146104e3578063395b3dac146104f65780633fcdd82c146105095780634026478e1461051c57610433565b8063238a6c7411610406578063238a6c74146104935780632aa8195e146104a85780632d42cf7d146104b05780632d5cd1d6146104ba57806331e244e5146104db57610433565b80630d668087146104385780630f4ef8a61461045657806322f3e2d41461046b5780632342e48014610480575b600080fd5b61044061082c565b60405161044d919061496d565b60405180910390f35b61045e610832565b60405161044d91906148b3565b610473610841565b60405161044d91906149f2565b61044061048e366004614566565b610850565b61049b6108fe565b60405161044d91906149fd565b61045e61098c565b6104b861099b565b005b6104cd6104c83660046144e4565b610c05565b60405161044d929190614976565b6104b8610cb9565b6104b86104f13660046144e4565b610d0c565b6104cd610504366004614788565b610d9d565b610440610517366004614758565b610dfe565b6104b8610ec2565b61052c610f04565b60405161044d929190614917565b6104b86105483660046145c7565b6110c1565b61047361055b366004614566565b61125c565b6104736113ae565b610440610576366004614788565b6113bc565b6104b8610589366004614788565b611440565b61044061152c565b610440611532565b6104b86105ac366004614591565b611538565b610440611622565b610440611628565b6104b861162e565b61045e611677565b610440611687565b61044061168d565b6104406105ef3660046144e4565b611693565b6104b8610602366004614788565b61173c565b610473611be9565b610440611bfa565b61062a610625366004614566565b611c00565b60405161044d99989796959493929190615119565b6104b8611c6e565b6104b8611eb6565b610473611f32565b61045e611f45565b610440611f54565b610440611ffb565b61045e612000565b61047361200f565b6104b861068d366004614720565b612018565b61069a612101565b60405161044d9190614904565b6104736121b0565b6104b86106bd366004614758565b6121c0565b6104b86106d036600461451c565b612268565b61044061231d565b6104b86106eb366004614758565b612323565b61049b612be2565b6104cd610706366004614566565b612bef565b6104b8612ca6565b61045e6134cf565b6104406134de565b610440613665565b61045e6136eb565b6104406136fa565b6104b86107493660046145fd565b613700565b610473613db4565b610769610764366004614758565b613dc6565b60405161044d9291906148eb565b6104b8613dfe565b610787613e4a565b60405161044d9b9a9998979695949392919061515c565b610440613e77565b610440613e7d565b61045e613e83565b610440613e92565b6107c6613e98565b60405161044d91906151ae565b6104cd6107e1366004614758565b613f21565b6104b86107f43660046144e4565b613f4f565b610440613fbd565b61045e613fc3565b610440613fd2565b610440614003565b610769610827366004614758565b614009565b60815481565b607c546001600160a01b031681565b608f5462010000900460ff1681565b6001600160a01b0382166000908152607a60205260408082209051634f16042360e01b8152829173__$7fd944d8f8efff7c575121b9e933203c2c$__91634f160423916108a4918790606d90600401614984565b60206040518083038186803b1580156108bc57600080fd5b505af41580156108d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f49190614770565b9150505b92915050565b607e805461090b9061522a565b80601f01602080910402602001604051908101604052809291908181526020018280546109379061522a565b80156109845780601f1061095957610100808354040283529160200191610984565b820191906000526020600020905b81548152906001019060200180831161096757829003601f168201915b505050505081565b606a546001600160a01b031681565b606b546001600160a01b03166109af614019565b6001600160a01b0316146109de5760405162461bcd60e51b81526004016109d590614e91565b60405180910390fd5b6082546081546080546109f191906151bc565b6109fb91906151bc565b421015610a1a5760405162461bcd60e51b81526004016109d590614bd1565b60865415610a4657610a2a613fd2565b610a465760405162461bcd60e51b81526004016109d590614fd3565b60785415610a6d57607954610a6d5760405162461bcd60e51b81526004016109d590614c1d565b608b5415610a9f576000610a7f6134de565b9050610a8d81608c546113bc565b610a9d57608b54608d8190556074555b505b607954600090601910610ab457607954610ab7565b60195b905060005b81811015610b9557610acf8160016151bc565b607a600060798481548110610af457634e487b7160e01b600052603260045260246000fd5b600091825260208083206002909202909101546001600160a01b0316835282019290925260400190206079805484908110610b3f57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016001015481548110610b6f57634e487b7160e01b600052603260045260246000fd5b600091825260209091206006600890920201015580610b8d81615265565b915050610abc565b50608f805464ff000000001963ff000000199091166301000000171664010000000090811791829055607680549190920460ff1615156101000261ff00199091161790556040517fe8ef7a17c92d025d9c1ead1c6b3ca3b44d3283d0ee954f615c5c476911f629a590600090a150565b6001600160a01b0381166000908152607a602052604080822090516332a1b32160e01b815282918291829173__$171d2da81d2a08eb52330533595f0c4998$__916332a1b32191610c5e91606d90607790600401614984565b604080518083038186803b158015610c7557600080fd5b505af4158015610c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cad91906147a9565b90945092505050915091565b606b546001600160a01b0316610ccd614019565b6001600160a01b031614610cf35760405162461bcd60e51b81526004016109d590614e91565b608f805462ff00ff19166001179055610d0a61401d565b565b600054610100900460ff1680610d25575060005460ff16155b610d415760405162461bcd60e51b81526004016109d590614e43565b600054610100900460ff16158015610d6c576000805460ff1961ff0019909116610100171660011790555b606580546001600160a01b0319166001600160a01b0384161790558015610d99576000805461ff00191690555b5050565b60008060008360875411610db2576000610dbf565b608754610dbf908561405b565b905080610dd3576000859250925050610df7565b610ddd8582614067565b610df1610dea8784614067565b879061405b565b92509250505b9250929050565b60675460009081906001600160a01b031663d06ca61f84610e1d612101565b6040518363ffffffff1660e01b8152600401610e3a9291906150bc565b60006040518083038186803b158015610e5257600080fd5b505afa158015610e66573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e8e9190810190614666565b905080600181518110610eb157634e487b7160e01b600052603260045260246000fd5b60200260200101519150505b919050565b606b546001600160a01b0316610ed6614019565b6001600160a01b031614610efc5760405162461bcd60e51b81526004016109d590614e91565b610d0a61401d565b606080600060788054905067ffffffffffffffff811115610f3557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f5e578160200160208202803683370190505b5060785490915060009067ffffffffffffffff811115610f8e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610fb7578160200160208202803683370190505b50905060005b6078548110156110b75760788181548110610fe857634e487b7160e01b600052603260045260246000fd5b600091825260209091206002909102015483516001600160a01b039091169084908390811061102757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250506078818154811061106857634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016001015482828151811061109a57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806110af81615265565b915050610fbd565b5090925090509091565b606b546001600160a01b03166110d5614019565b6001600160a01b0316146110fb5760405162461bcd60e51b81526004016109d590614e91565b6079541561110f5761110f60796000614430565b60005b601981101561122e57600083826019811061113d57634e487b7160e01b600052603260045260246000fd5b60200201602081019061115091906144e4565b6001600160a01b031614156111645761122e565b6079604051806040016040528085846019811061119157634e487b7160e01b600052603260045260246000fd5b6020020160208101906111a491906144e4565b6001600160a01b031681526020018484601981106111d257634e487b7160e01b600052603260045260246000fd5b60209081029190910135909152825460018082018555600094855293829020835160029092020180546001600160a01b0319166001600160a01b039092169190911781559101519101558061122681615265565b915050611112565b506040517f5c243cc6e4f210bf2dd86b8eca0ca891d3f8ad2eb09fbf91735eb348bc199c7e90600090a15050565b6001600160a01b0382166000908152607a6020908152604080832080548251818502810185019093528083528493849084015b8282101561132157600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e08501526101009182900416151590830152908352909201910161128f565b50505050905060008151116113485760405162461bcd60e51b81526004016109d590614f07565b805183106113685760405162461bcd60e51b81526004016109d590614a50565b80838151811061138857634e487b7160e01b600052603260045260246000fd5b60200260200101516101000151156113a45760019150506108f8565b5060009392505050565b608f54610100900460ff1681565b6000828211156113ce575060006108f8565b608a5483111561141057608a546113e5848461405b565b116113f2575060006108f8565b608a5461140990611403858561405b565b9061405b565b90506108f8565b608a5461141d8484614079565b1061142a575060006108f8565b6114096114378484614079565b608a549061405b565b606b546001600160a01b0316611454614019565b6001600160a01b03161461147a5760405162461bcd60e51b81526004016109d590614e91565b60006086541161149c5760405162461bcd60e51b81526004016109d590614b48565b600082116114bc5760405162461bcd60e51b81526004016109d590614ddd565b428110156114dc5760405162461bcd60e51b81526004016109d590614c4d565b60006114e6611677565b90506114f28184614085565b60006114fd84610dfe565b905060006115176115108361012c614067565b839061405b565b90506115253086838761414f565b5050505050565b60825481565b60835481565b606b546001600160a01b031661154c614019565b6001600160a01b0316146115725760405162461bcd60e51b81526004016109d590614e91565b607b546001600160a01b03848116911614156115a05760405162461bcd60e51b81526004016109d590614d9c565b60405163a9059cbb60e01b815283906001600160a01b0382169063a9059cbb906115d090859087906004016148eb565b602060405180830381600087803b1580156115ea57600080fd5b505af11580156115fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611525919061473c565b60875481565b60885481565b611636614019565b6001600160a01b0316611647611f45565b6001600160a01b03161461166d5760405162461bcd60e51b81526004016109d590614ed2565b610d0a60006141f5565b6067546001600160a01b03165b90565b60865481565b60855481565b6001600160a01b0381166000908152607a60205260408082209051630d46757760e41b8152829173__$171d2da81d2a08eb52330533595f0c4998$__9163d4675770916116e591606d90600401614976565b60206040518083038186803b1580156116fd57600080fd5b505af4158015611711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117359190614770565b9392505050565b608f5462010000900460ff168015611755575060805442115b6117715760405162461bcd60e51b81526004016109d590614f52565b60815460805461178191906151bc565b421061179f5760405162461bcd60e51b81526004016109d590614ab4565b608f546301000000900460ff16156117c95760405162461bcd60e51b81526004016109d590614a87565b6088548210156117eb5760405162461bcd60e51b81526004016109d590614f89565b600061180e6064611808600560835461424790919063ffffffff16565b90614253565b90506000607b60009054906101000a90046001600160a01b03166001600160a01b031663771a3a1d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561186257600080fd5b505af1158015611876573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189a9190614770565b607b549091506000906001600160a01b031663d1ecfc686118b9614019565b6040518263ffffffff1660e01b81526004016118d591906148b3565b602060405180830381600087803b1580156118ef57600080fd5b505af1158015611903573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611927919061473c565b61193a576119358583614067565b61193d565b60005b60835490915061194d9084614079565b611966826114038860895461407990919063ffffffff16565b11156119845760405162461bcd60e51b81526004016109d590614d56565b60006119908684610d9d565b607b549097509091506001600160a01b03166323b872dd6119af614019565b306119ba858b6151bc565b6040518463ffffffff1660e01b81526004016119d8939291906148c7565b602060405180830381600087803b1580156119f257600080fd5b505af1158015611a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2a919061473c565b50611a35868361405b565b95508015611b3657607b5460408051634a5db0a960e01b815290516001600160a01b039092169163a9059cbb918391634a5db0a9916004808201926020929091908290030181600087803b158015611a8c57600080fd5b505af1158015611aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac49190614500565b836040518363ffffffff1660e01b8152600401611ae29291906148eb565b602060405180830381600087803b158015611afc57600080fd5b505af1158015611b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b34919061473c565b505b608954611b439087614079565b6089556000607a81611b53614019565b6001600160a01b031681526020810191909152604001600020549050611b81611b7a614019565b888861425f565b60835460895410611b9457611b9461401d565b611b9c614019565b6001600160a01b03167ff556991011e831bcfac4f406d547e5e32cdd98267efab83935230d5f8d02c446888884604051611bd893929190614984565b60405180910390a250505050505050565b608f54640100000000900460ff1681565b60895481565b607a6020528160005260406000208181548110611c1c57600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701549598509396509194909391929160ff8082169161010090041689565b608f5460ff16611c905760405162461bcd60e51b81526004016109d590614e14565b600073__$60b6e19b11029f04c25a43d0435d86b2be$__63066f1dee607a6000611cb8614019565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401611cf4919061496d565b60206040518083038186803b158015611d0c57600080fd5b505af4158015611d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d449190614770565b90508015611eb35773__$171d2da81d2a08eb52330533595f0c4998$__63f66d9a4d607a6000611d72614019565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401611dae919061496d565b60006040518083038186803b158015611dc657600080fd5b505af4158015611dda573d6000803e3d6000fd5b5050607b546001600160a01b0316915063a9059cbb9050611df9614019565b836040518363ffffffff1660e01b8152600401611e179291906148eb565b602060405180830381600087803b158015611e3157600080fd5b505af1158015611e45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e69919061473c565b50611e72614019565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd82604051611eaa919061496d565b60405180910390a25b50565b606b546001600160a01b0316611eca614019565b6001600160a01b031614611ef05760405162461bcd60e51b81526004016109d590614e91565b608f805465ff00000000001916650100000000001790556040517f9331b2a38c658c57a39ea19b2709d928c28a12cc8fbb838d12b85148550f937d90600090a1565b608f546601000000000000900460ff1681565b6033546001600160a01b031690565b600080606560009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611fa557600080fd5b505afa158015611fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdd91906147cc565b5050509150506000811215611ff3576000611ff5565b805b91505090565b600581565b607d546001600160a01b031681565b608f5460ff1681565b606b546001600160a01b031661202c614019565b6001600160a01b0316146120525760405162461bcd60e51b81526004016109d590614e91565b608f5460ff6201000090910416151581151514156120825760405162461bcd60e51b81526004016109d590614cd0565b608f805462ff00001916620100008315158102919091179182905560ff910416156120d5576040517f3d31b97eef590df350bb2cdbc390034c613c9f23ea6ae1906682628c85248b5390600090a1611eb3565b6040517f763d36bfedf6707954f8bb39c2011a58a47a54844f2b3cdcd326c71cad0aa75390600090a150565b60408051600280825260608083018452926000929190602083019080368337505060685482519293506001600160a01b03169183915060009061215457634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260695482519116908290600190811061219357634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152905090565b608f546301000000900460ff1681565b606b546001600160a01b03166121d4614019565b6001600160a01b0316146121fa5760405162461bcd60e51b81526004016109d590614e91565b60825460815460805461220d91906151bc565b61221791906151bc565b4210156122365760405162461bcd60e51b81526004016109d590615048565b606c546001600160a01b031661225557608a8190556070819055611eb3565b61225d611f54565b608a81905560705550565b600054610100900460ff1680612281575060005460ff16155b61229d5760405162461bcd60e51b81526004016109d590614e43565b600054610100900460ff161580156122c8576000805460ff1961ff0019909116610100171660011790555b606780546001600160a01b038087166001600160a01b0319928316179092556068805486841690831617905560698054928516929091169190911790558015612317576000805461ff00191690555b50505050565b60845481565b80607a6000612330614019565b6001600160a01b0316815260208101919091526040016000205410156123685760405162461bcd60e51b81526004016109d59061501a565b607a6000612374614019565b6001600160a01b031681526020810191909152604001600020546123aa5760405162461bcd60e51b81526004016109d590614c7b565b600073__$7fd944d8f8efff7c575121b9e933203c2c$__634f160423607a60006123d2614019565b6001600160a01b03166001600160a01b0316815260200190815260200160002084606d6040518463ffffffff1660e01b815260040161241393929190614984565b60206040518083038186803b15801561242b57600080fd5b505af415801561243f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124639190614770565b905060008073__$7fd944d8f8efff7c575121b9e933203c2c$__63f7ac9cba607a600061248e614019565b6001600160a01b03166001600160a01b0316815260200190815260200160002086606d60776040518563ffffffff1660e01b81526004016124d2949392919061499a565b604080518083038186803b1580156124e957600080fd5b505af41580156124fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252191906147a9565b9092509050600061253284846151bc565b608f54909150640100000000900460ff161561299e57608654156126da5781156126da5773__$7fd944d8f8efff7c575121b9e933203c2c$__6393aaeaf9607a600061257c614019565b6001600160a01b03166001600160a01b03168152602001908152602001600020876040518363ffffffff1660e01b81526004016125ba929190614976565b60006040518083038186803b1580156125d257600080fd5b505af41580156125e6573d6000803e3d6000fd5b5050607d546001600160a01b0316915063a9059cbb9050612605614019565b846040518363ffffffff1660e01b81526004016126239291906148eb565b602060405180830381600087803b15801561263d57600080fd5b505af1158015612651573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612675919061473c565b6126915760405162461bcd60e51b81526004016109d59061509e565b612699614019565b6001600160a01b03167fd93fc6d1e8779271f55cdb0d5f7b6b05be64a2226a1ad050d3036f5609c1cdcf836040516126d1919061496d565b60405180910390a25b82156127755773__$7fd944d8f8efff7c575121b9e933203c2c$__6393aaeaf9607a6000612706614019565b6001600160a01b03166001600160a01b03168152602001908152602001600020876040518363ffffffff1660e01b8152600401612744929190614976565b60006040518083038186803b15801561275c57600080fd5b505af4158015612770573d6000803e3d6000fd5b505050505b600073__$7fd944d8f8efff7c575121b9e933203c2c$__635eac7af3607a600061279d614019565b6001600160a01b03166001600160a01b03168152602001908152602001600020886040518363ffffffff1660e01b81526004016127db929190614976565b60206040518083038186803b1580156127f357600080fd5b505af4158015612807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282b9190614770565b9050801561299c5773__$7fd944d8f8efff7c575121b9e933203c2c$__63ec8ecc02607a6000612859614019565b6001600160a01b03166001600160a01b03168152602001908152602001600020886040518363ffffffff1660e01b8152600401612897929190614976565b60006040518083038186803b1580156128af57600080fd5b505af41580156128c3573d6000803e3d6000fd5b5050607b546001600160a01b0316915063a9059cbb90506128e2614019565b836040518363ffffffff1660e01b81526004016129009291906148eb565b602060405180830381600087803b15801561291a57600080fd5b505af115801561292e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612952919061473c565b5061295b614019565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd82604051612993919061496d565b60405180910390a25b505b801561152557607b54607c546040516370a0823160e01b815283926001600160a01b03908116926370a08231926129db92909116906004016148b3565b60206040518083038186803b1580156129f357600080fd5b505afa158015612a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a2b9190614770565b1015612a495760405162461bcd60e51b81526004016109d590614d12565b73__$7fd944d8f8efff7c575121b9e933203c2c$__63eaff3050607a6000612a6f614019565b6001600160a01b03166001600160a01b0316815260200190815260200160002087606d6040518463ffffffff1660e01b8152600401612ab093929190614984565b60006040518083038186803b158015612ac857600080fd5b505af4158015612adc573d6000803e3d6000fd5b5050607c546001600160a01b0316915063e4e103dc9050612afb614019565b836040518363ffffffff1660e01b8152600401612b199291906148eb565b600060405180830381600087803b158015612b3357600080fd5b505af1158015612b47573d6000803e3d6000fd5b50505050612b53614019565b6001600160a01b03167f115e2fe760f98d4fd0828d7741ae2070e7db700f892efbfe98448b53ac58388685604051612b8b919061496d565b60405180910390a2612b9b614019565b6001600160a01b03167f723b06f6c3a94dc82019852e6aa01c0241fba5f84410b9003ddc3440ad499e5984604051612bd3919061496d565b60405180910390a25050505050565b607f805461090b9061522a565b6001600160a01b0382166000908152607a60205260408082209051637bd64e5d60e11b815282918291829173__$7fd944d8f8efff7c575121b9e933203c2c$__9163f7ac9cba91612c4a918990606d9060779060040161499a565b604080518083038186803b158015612c6157600080fd5b505af4158015612c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9991906147a9565b9097909650945050505050565b600073__$171d2da81d2a08eb52330533595f0c4998$__63d4675770607a6000612cce614019565b6001600160a01b03166001600160a01b03168152602001908152602001600020606d6040518363ffffffff1660e01b8152600401612d0d929190614976565b60206040518083038186803b158015612d2557600080fd5b505af4158015612d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d5d9190614770565b905060008073__$171d2da81d2a08eb52330533595f0c4998$__6332a1b321607a6000612d88614019565b6001600160a01b03166001600160a01b03168152602001908152602001600020606d60776040518463ffffffff1660e01b8152600401612dca93929190614984565b604080518083038186803b158015612de157600080fd5b505af4158015612df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1991906147a9565b90925090506000612e2a84846151bc565b608f54909150640100000000900460ff161561328e5760865415612fd0578115612fd05773__$171d2da81d2a08eb52330533595f0c4998$__6347dc9eee607a6000612e74614019565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401612eb0919061496d565b60006040518083038186803b158015612ec857600080fd5b505af4158015612edc573d6000803e3d6000fd5b5050607d546001600160a01b0316915063a9059cbb9050612efb614019565b846040518363ffffffff1660e01b8152600401612f199291906148eb565b602060405180830381600087803b158015612f3357600080fd5b505af1158015612f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6b919061473c565b612f875760405162461bcd60e51b81526004016109d590614cb2565b612f8f614019565b6001600160a01b03167fd93fc6d1e8779271f55cdb0d5f7b6b05be64a2226a1ad050d3036f5609c1cdcf83604051612fc7919061496d565b60405180910390a25b82156130695773__$171d2da81d2a08eb52330533595f0c4998$__6347dc9eee607a6000612ffc614019565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401613038919061496d565b60006040518083038186803b15801561305057600080fd5b505af4158015613064573d6000803e3d6000fd5b505050505b600073__$60b6e19b11029f04c25a43d0435d86b2be$__63066f1dee607a6000613091614019565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b81526004016130cd919061496d565b60206040518083038186803b1580156130e557600080fd5b505af41580156130f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311d9190614770565b9050801561328c5773__$171d2da81d2a08eb52330533595f0c4998$__63f66d9a4d607a600061314b614019565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401613187919061496d565b60006040518083038186803b15801561319f57600080fd5b505af41580156131b3573d6000803e3d6000fd5b5050607b546001600160a01b0316915063a9059cbb90506131d2614019565b836040518363ffffffff1660e01b81526004016131f09291906148eb565b602060405180830381600087803b15801561320a57600080fd5b505af115801561321e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613242919061473c565b5061324b614019565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd82604051613283919061496d565b60405180910390a25b505b801561231757607b54607c546040516370a0823160e01b815283926001600160a01b03908116926370a08231926132cb92909116906004016148b3565b60206040518083038186803b1580156132e357600080fd5b505afa1580156132f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061331b9190614770565b10156133395760405162461bcd60e51b81526004016109d590614d12565b73__$171d2da81d2a08eb52330533595f0c4998$__634142c652607a600061335f614019565b6001600160a01b03166001600160a01b03168152602001908152602001600020606d6040518363ffffffff1660e01b815260040161339e929190614976565b60006040518083038186803b1580156133b657600080fd5b505af41580156133ca573d6000803e3d6000fd5b5050607c546001600160a01b0316915063e4e103dc90506133e9614019565b836040518363ffffffff1660e01b81526004016134079291906148eb565b600060405180830381600087803b15801561342157600080fd5b505af1158015613435573d6000803e3d6000fd5b50505050613441614019565b6001600160a01b03167f115e2fe760f98d4fd0828d7741ae2070e7db700f892efbfe98448b53ac58388685604051613479919061496d565b60405180910390a2613489614019565b6001600160a01b03167f723b06f6c3a94dc82019852e6aa01c0241fba5f84410b9003ddc3440ad499e59846040516134c1919061496d565b60405180910390a250505050565b606c546001600160a01b031681565b6000608954600014156134f357506000611684565b6000805b607854811015613656576000607a60006078848154811061352857634e487b7160e01b600052603260045260246000fd5b600091825260208083206002909202909101546001600160a01b031683528201929092526040019020607880548490811061357357634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154815481106135a357634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051610120810182526008909302909101805480845260018201549484019490945260028101549183019190915260038101546060830152600481015460808301819052600582015460a0840152600682015460c084015260079091015460ff808216151560e08501526101009182900416151590830152909250613640916136399190614247565b8490614079565b925050808061364e90615265565b9150506134f7565b50608954611ff5908290614253565b6066546040516370a0823160e01b81526000916001600160a01b0316906370a08231906136969030906004016148b3565b60206040518083038186803b1580156136ae57600080fd5b505afa1580156136c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136e69190614770565b905090565b606b546001600160a01b031681565b608a5481565b608f5462010000900460ff168015613719575060805442115b6137355760405162461bcd60e51b81526004016109d590614f52565b60815460805461374591906151bc565b42106137635760405162461bcd60e51b81526004016109d590614ab4565b608f546301000000900460ff161561378d5760405162461bcd60e51b81526004016109d590614a87565b8281146137ac5760405162461bcd60e51b81526004016109d590614af6565b6000805b8481101561384d576088548686838181106137db57634e487b7160e01b600052603260045260246000fd5b9050602002013510156138005760405162461bcd60e51b81526004016109d590614f89565b61383986868381811061382357634e487b7160e01b600052603260045260246000fd5b905060200201358361407990919063ffffffff16565b91508061384581615265565b9150506137b0565b50600061386b6064611808600560835461424790919063ffffffff16565b90506000607b60009054906101000a90046001600160a01b03166001600160a01b031663771a3a1d6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156138bf57600080fd5b505af11580156138d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138f79190614770565b607b549091506000906001600160a01b031663d1ecfc68613916614019565b6040518263ffffffff1660e01b815260040161393291906148b3565b602060405180830381600087803b15801561394c57600080fd5b505af1158015613960573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613984919061473c565b613997576139928483614067565b61399a565b60005b6083549091506139aa9084614079565b6139c3826114038760895461407990919063ffffffff16565b11156139e15760405162461bcd60e51b81526004016109d590614d56565b60006139ed8584610d9d565b607b549096509091506001600160a01b03166323b872dd613a0c614019565b30613a17858a6151bc565b6040518463ffffffff1660e01b8152600401613a35939291906148c7565b602060405180830381600087803b158015613a4f57600080fd5b505af1158015613a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a87919061473c565b50613a92858361405b565b94508015613b9357607b5460408051634a5db0a960e01b815290516001600160a01b039092169163a9059cbb918391634a5db0a9916004808201926020929091908290030181600087803b158015613ae957600080fd5b505af1158015613afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b219190614500565b836040518363ffffffff1660e01b8152600401613b3f9291906148eb565b602060405180830381600087803b158015613b5957600080fd5b505af1158015613b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b91919061473c565b505b608954613ba09086614079565b6089556000607a81613bb0614019565b6001600160a01b03168152602081019190915260400160009081205491505b89811015613d0b5760008b8b83818110613bf957634e487b7160e01b600052603260045260246000fd5b607b54602090910292909201359250506001600160a01b031663d1ecfc68613c1f614019565b6040518263ffffffff1660e01b8152600401613c3b91906148b3565b602060405180830381600087803b158015613c5557600080fd5b505af1158015613c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c8d919061473c565b613ca057613c9b8187614067565b613ca3565b60005b9450613caf8187610d9d565b9094509050613cbe818661405b565b9050613cf8613ccb614019565b828c8c86818110613cec57634e487b7160e01b600052603260045260246000fd5b9050602002013561425f565b5080613d0381615265565b915050613bcf565b5060006001607a6000613d1c614019565b6001600160a01b03168152602081019190915260400160002054613d409190615213565b905060835460895410613d5557613d5561401d565b613d5d614019565b6001600160a01b03167f852fe7a2ad7b2c8c0a0e9b927734feb1acc3e8bc608b8921d4c4768c6193c33b8c8c8c8c8787604051613d9f969594939291906149b5565b60405180910390a25050505050505050505050565b608f5465010000000000900460ff1681565b60798181548110613dd657600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b606b546001600160a01b0316613e12614019565b6001600160a01b031614613e385760405162461bcd60e51b81526004016109d590614e91565b606c80546001600160a01b0319169055565b606d54606e54606f5460705460715460725460735460745460755460765460ff808216916101009004168b565b608b5481565b608e5481565b607b546001600160a01b031681565b608c5481565b600080606560009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015613ee957600080fd5b505afa158015613efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff5919061481b565b60778181548110613f3157600080fd5b60009182526020909120600290910201805460019091015490915082565b613f57614019565b6001600160a01b0316613f68611f45565b6001600160a01b031614613f8e5760405162461bcd60e51b81526004016109d590614ed2565b6001600160a01b038116613fb45760405162461bcd60e51b81526004016109d590614b8b565b611eb3816141f5565b608d5481565b6066546001600160a01b031690565b607d546040516370a0823160e01b81526000916001600160a01b0316906370a08231906136969030906004016148b3565b60805481565b60788181548110613dd657600080fd5b3390565b608f805463ff000000191663010000001790556040517f2e136745550967f28b779ce8c395ca060a2f844edfb5b06631fe677f66f9e30590600090a1565b60006117358284615213565b60006117356127106118088585614247565b600061173582846151bc565b60665460405163095ea7b360e01b81526001600160a01b039091169063095ea7b3906140b790859085906004016148eb565b602060405180830381600087803b1580156140d157600080fd5b505af11580156140e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614109919061473c565b50816001600160a01b03167fd77df63d9076d067d9fd7af16c3d67db48b84064c3314f5900ae919922d364a182604051614143919061496d565b60405180910390a25050565b6001600160a01b03841661416257600080fd5b6067546001600160a01b03166338ed1739848461417d612101565b88866040518663ffffffff1660e01b815260040161419f9594939291906150dd565b600060405180830381600087803b1580156141b957600080fd5b505af11580156141cd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115259190810190614666565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061173582846151f4565b600061173582846151d4565b60786040518060400160405280856001600160a01b03168152602001607a6000876001600160a01b03166001600160a01b0316815260200190815260200160002080549050815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101555050607a6000846001600160a01b03166001600160a01b031681526020019081526020016000206040518061012001604052808481526020014281526020016000815260200142815260200183815260200160001981526020016000198152602001600015158152602001600015158152509080600181540180825580915050600190039060005260206000209060080201600090919091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff0219169083151502179055506101008201518160070160016101000a81548160ff0219169083151502179055505050505050565b5080546000825560020290600052602060002090810190611eb391905b808211156144725780546001600160a01b03191681556000600182015560020161444d565b5090565b8061032081018310156108f857600080fd5b60008083601f840112614499578182fd5b50813567ffffffffffffffff8111156144b0578182fd5b6020830191508360208083028501011115610df757600080fd5b805169ffffffffffffffffffff81168114610ebd57600080fd5b6000602082840312156144f5578081fd5b8135611735816152ac565b600060208284031215614511578081fd5b8151611735816152ac565b600080600060608486031215614530578182fd5b833561453b816152ac565b9250602084013561454b816152ac565b9150604084013561455b816152ac565b809150509250925092565b60008060408385031215614578578182fd5b8235614583816152ac565b946020939093013593505050565b6000806000606084860312156145a5578283fd5b83356145b0816152ac565b925060208401359150604084013561455b816152ac565b60008061064083850312156145da578182fd5b6145e48484614476565b91506145f4846103208501614476565b90509250929050565b60008060008060408587031215614612578081fd5b843567ffffffffffffffff80821115614629578283fd5b61463588838901614488565b9096509450602087013591508082111561464d578283fd5b5061465a87828801614488565b95989497509550505050565b60006020808385031215614678578182fd5b825167ffffffffffffffff8082111561468f578384fd5b818501915085601f8301126146a2578384fd5b8151818111156146b4576146b4615296565b838102604051858282010181811085821117156146d3576146d3615296565b604052828152858101935084860182860187018a10156146f1578788fd5b8795505b838610156147135780518552600195909501949386019386016146f5565b5098975050505050505050565b600060208284031215614731578081fd5b8135611735816152c1565b60006020828403121561474d578081fd5b8151611735816152c1565b600060208284031215614769578081fd5b5035919050565b600060208284031215614781578081fd5b5051919050565b6000806040838503121561479a578182fd5b50508035926020909101359150565b600080604083850312156147bb578182fd5b505080516020909101519092909150565b600080600080600060a086880312156147e3578283fd5b6147ec866144ca565b945060208601519350604086015192506060860151915061480f608087016144ca565b90509295509295909350565b60006020828403121561482c578081fd5b815160ff81168114611735578182fd5b6000815180845260208085019450808401835b838110156148745781516001600160a01b03168752958201959082019060010161484f565b509495945050505050565b81835260006001600160fb1b03831115614897578081fd5b6020830280836020870137939093016020019283525090919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b600060208252611735602083018461483c565b60006040825261492a604083018561483c565b828103602084810191909152845180835285820192820190845b8181101561496057845183529383019391830191600101614944565b5090979650505050505050565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b6000608082526149c960808301888a61487f565b82810360208401526149dc81878961487f565b6040840195909552505060600152949350505050565b901515815260200190565b6000602080835283518082850152825b81811015614a2957858101830151858201604001528201614a0d565b81811115614a3a5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526017908201527f30333831207468697320696e6465782065786365656473000000000000000000604082015260600190565b6020808252601390820152720c0ccc4c08141bdbdb081a5cc81b1bd8dad959606a1b604082015260600190565b60208082526022908201527f303331362043616e206e6f74207374616b65206166746572206c6f636b206461604082015261746560f01b606082015260800190565b60208082526032908201527f30333135207374616b696e67416d6f756e7420616e642070726564696374696f6040820152710dce640d8cadccee8d040dad2e6dac2e8c6d60731b606082015260800190565b60208082526023908201527f303334302054686520706f6f6c206973206f6e6c7920544f544d2072657761726040820152623232b960e91b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252602c908201527f303336302043616e277420656e6420706f6f6c206265666f726520746865206d60408201526b617475726974792074696d6560a01b606082015260800190565b6020808252601690820152750c0ccd8c88199a5c9cdd081cda1bdd5b19081cdbdc9d60521b604082015260600190565b6020808252601490820152733033343220446561646c696e65206973206c6f7760601b604082015260600190565b6020808252601d908201527f5573657220646f6573206e6f74206861766520616e79207374616b6573000000604082015260600190565b6020808252600490820152630303332360e41b604082015260600190565b60208082526022908201527f4e6f74206368616e67696e67207468652061637469766174696f6e2073746174604082015261757360f01b606082015260800190565b60208082526024908201527f4e6f7420656e6f7567682062616c616e636520696e20726577617264206d616e60408201526330b3b2b960e11b606082015260800190565b60208082526026908201527f303331322043616e2774207374616b652061626f76652073697a6520616c6c6f60408201526531b0ba34b7b760d11b606082015260800190565b60208082526021908201527f3033373020746f74656d732063616e206e6f74206265207472616e73666572656040820152601960fa1b606082015260800190565b60208082526019908201527f3033343120416d6f756e742063616e2774206265207a65726f00000000000000604082015260600190565b60208082526015908201527469742773206e6f7420616e20656d657267656e637960581b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526021908201527f303330302063616c6c6572206973206e6f74206120706f6f6c2063726561746f6040820152603960f91b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f3033383020746869732061646472657373206469646e2774207374616b65206960408201526a1b881d1a1a5cc81c1bdbdb60aa1b606082015260800190565b60208082526017908201527f3033313320706f6f6c206973206e6f7420616374697665000000000000000000604082015260600190565b6020808252602a908201527f3033313120416d6f756e742063616e2774206265206c657373207468616e20746040820152696865206d696e696d756d60b01b606082015260800190565b60208082526027908201527f303336312057726170706564546f6b656e2052657761726473206e6f7420617660408201526661696c61626c6560c81b606082015260800190565b602080825260149082015273125b99195e08191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b60208082526036908201527f303335302043616e277420736574206d61747572696e67207072696365206265604082015275666f726520746865206d617475726974792074696d6560501b606082015260800190565b6020808252600490820152630303333360e41b604082015260600190565b6000838252604060208301526150d5604083018461483c565b949350505050565b600086825285602083015260a060408301526150fc60a083018661483c565b6001600160a01b0394909416606083015250608001529392505050565b988952602089019790975260408801959095526060870193909352608086019190915260a085015260c0840152151560e083015215156101008201526101200190565b9a8b5260208b019990995260408a01979097526060890195909552608088019390935260a087019190915260c086015260e0850152610100840152151561012083015215156101408201526101600190565b60ff91909116815260200190565b600082198211156151cf576151cf615280565b500190565b6000826151ef57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561520e5761520e615280565b500290565b60008282101561522557615225615280565b500390565b60028104600182168061523e57607f821691505b6020821081141561525f57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561527957615279615280565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611eb357600080fd5b8015158114611eb357600080fdfea264697066735822122035db294c0a750e8cf676d88f357032ef92b9bb1eddc56d58659f0c085f02803e64736f6c63430008000033",
  "libraries": {
    "CalculateRewardLib": "0x8bb1FB368152C5c2B772e1c5c0D6B506c330D41f",
    "ClaimRewardLib": "0x3D22ad37588c9052e26D932C0C5BA6851518F062",
    "IndexedClaimRewardLib": "0x77D1b776f3b99b85Fbe0FC777008abcac3a12C20"
=======
  "solcInputHash": "135b942a636eca98288f0905f59fa9e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ApproveTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"stakeAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"predictions\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexOfFirstStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexOfLastStake\",\"type\":\"uint256\"}],\"name\":\"BatchStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributedBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolMatured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolSorted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePrediction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexOfStake\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingReturn\",\"type\":\"uint256\"}],\"name\":\"WithdrawStakingReturn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totemPrize\",\"type\":\"uint256\"}],\"name\":\"WithdrawTotemPrize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wrappedTokenPrize\",\"type\":\"uint256\"}],\"name\":\"WithdrawWrappedTokenPrize\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"__PriceConsumer_initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"BUSDContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WrappedTokenContractAddress\",\"type\":\"address\"}],\"name\":\"__WrappedTokenDistributor_initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"averagePricePrediction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_stakingAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_predictions\",\"type\":\"uint256[]\"}],\"name\":\"batchStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collaborativeRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collaborativeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"declareEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deletePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergentWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prediction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_range\",\"type\":\"uint256\"}],\"name\":\"getDifference\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getEstimatedWrappedTokenForUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getIndexedPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getIndexedStakingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPathForUSDToWrappedToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTaxRate\",\"type\":\"uint256\"}],\"name\":\"getStakingTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWrappedTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"hasUnStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"indexedClaimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAnEmergency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDeleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEnhancedEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMatured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"launchDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdPrizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collaborativeReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleDecimals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnhancedEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMatured\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturityTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potentialCollabReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"predictions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePrediction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"difference\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"prizeRewardWithdrawn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"didUnstake\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizeRewardRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"purchaseWrappedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"contract IRewardManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_activationStatus\",\"type\":\"bool\"}],\"name\":\"setActivationStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOracleToZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[25]\",\"name\":\"addrArray\",\"type\":\"address[25]\"},{\"internalType\":\"uint256[25]\",\"name\":\"indexArray\",\"type\":\"uint256[25]\"}],\"name\":\"setSortedStakers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sizeAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sizeLimitRangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sortedStakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePrediction\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totemToken\",\"outputs\":[{\"internalType\":\"contract ITotemToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateMaturingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdPrizeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stuckToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedTokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"__PriceConsumer_initialize(address)\":{\"params\":{\"_oracle\":\"The chainlink node oracle address to send requests\"}},\"getEstimatedWrappedTokenForUSD(uint256)\":{\"params\":{\"_amount\":\"Amount\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateMaturingPrice(uint256)\":{\"params\":{\"_price\":\"is ignored if oracle is not zero address.When there is no oracle, _price is the maturingPrice and is set manually by the pool creator\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collaborativeReward()\":{\"notice\":\"Based on the white paper, the collaborative reward can be 20% (2000), 25% (2500) or 35% (3500).\"},\"getDecimals()\":{\"notice\":\"Returns decimals for oracle contract\"},\"getLatestPrice()\":{\"notice\":\"Returns the latest price from oracle contract\"},\"hasUnStaked(address,uint256)\":{\"notice\":\"hasUnStaked return true if the user staked in the pool and then  has unStaked it (claimed)\"},\"setOracleToZero()\":{\"notice\":\"Sets oracle to zero in case it was given incorrectly by the owner,         or it is not available\"},\"usdPrizeAmount()\":{\"notice\":\"usdPrizeAmount is the enabler of WrappedToken rewarder; If it is set to 0  then the pool is only TOTM rewarder.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking/StakingPoolImplementation.sol\":\"StakingPoolImplementation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/Distribution/USDRetriever.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract USDRetriever {\\n    IERC20 internal USDCContract;\\n\\n    event ReceivedTokens(address indexed from, uint256 amount);\\n    event TransferTokens(address indexed to, uint256 amount);\\n    event ApproveTokens(address indexed to, uint256 amount);\\n\\n    function setUSDToken(address _usdContractAddress) internal {\\n        USDCContract = IERC20(_usdContractAddress);\\n    }\\n\\n    function approveTokens(address _to, uint256 _amount) internal {\\n        USDCContract.approve(_to, _amount);\\n        emit ApproveTokens(_to, _amount);\\n    }\\n\\n    function getUSDBalance() external view returns (uint256) {\\n        return USDCContract.balanceOf(address(this));\\n    }\\n\\n    function getUSDToken() external view returns (address) {\\n        return address(USDCContract);\\n    }\\n}\\n\",\"keccak256\":\"0xf8ce825a5e793fc484345dc3f0a6740a30789f5350e78e88ec8299a37b5f6e29\",\"license\":\"UNLICENSED\"},\"contracts/Distribution/WrappedTokenDistributorUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IPancakeRouter.sol\\\";\\n\\ncontract WrappedTokenDistributorUpgradeable is Initializable{\\n    IPancakeRouter02 internal swapRouter;\\n    address internal BUSD_CONTRACT_ADDRESS;\\n    address internal WRAPPED_Token_CONTRACT_ADDRESS;\\n\\n    event DistributedBTC(address indexed to, uint256 amount);\\n\\n    function __WrappedTokenDistributor_initialize(\\n        address swapRouterAddress,\\n        address BUSDContractAddress,\\n        address WrappedTokenContractAddress\\n    ) public initializer {\\n        swapRouter = IPancakeRouter02(swapRouterAddress);\\n        BUSD_CONTRACT_ADDRESS = BUSDContractAddress;\\n        WRAPPED_Token_CONTRACT_ADDRESS = WrappedTokenContractAddress;\\n    }\\n\\n    /**\\n     * @param _to Reciever address\\n     * @param _usdAmount USD Amount\\n     * @param _wrappedTokenAmount Wrapped Token Amount\\n     */\\n    function transferTokensThroughSwap(\\n        address _to,\\n        uint256 _usdAmount,\\n        uint256 _wrappedTokenAmount,\\n        uint256 _deadline\\n    ) internal {\\n        require(_to != address(0));\\n        // Get max USD price we can spend for this amount.\\n        swapRouter.swapExactTokensForTokens(\\n            _usdAmount,\\n            _wrappedTokenAmount,\\n            getPathForUSDToWrappedToken(),\\n            _to,\\n            _deadline\\n        );\\n    }\\n\\n    /**\\n     * @param _amount Amount\\n     */\\n    function getEstimatedWrappedTokenForUSD(uint256 _amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256[] memory wrappedTokenAmount =\\n            swapRouter.getAmountsOut(_amount, getPathForUSDToWrappedToken());\\n        // since in the path the wrappedToken is the second one, so we should retuen the second one also here    \\n        return wrappedTokenAmount[1];\\n    }\\n\\n    function getPathForUSDToWrappedToken() public view returns (address[] memory) {\\n        address[] memory path = new address[](2);\\n        path[0] = BUSD_CONTRACT_ADDRESS;\\n        path[1] = WRAPPED_Token_CONTRACT_ADDRESS;\\n\\n        return path;\\n    }\\n\\n    function getSwapRouter() public view returns (address) {\\n        return address(swapRouter);\\n    }\\n}\\n\",\"keccak256\":\"0xd7e60cfdab6b448bf1119bd8f7a320db4ef747d1e0e1d81c5c74795de00870f6\",\"license\":\"UNLICENSED\"},\"contracts/Price/PriceConsumerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract PriceConsumerUpgradeable is Initializable {\\n    AggregatorV3Interface internal priceFeed;\\n\\n    /**\\n     * @param _oracle The chainlink node oracle address to send requests\\n    */\\n    function __PriceConsumer_initialize(address _oracle) public initializer {\\n        priceFeed = AggregatorV3Interface(_oracle);\\n    }\\n\\n    /**\\n     * @notice Returns decimals for oracle contract\\n    */\\n    function getDecimals() public view returns (uint8) {\\n        uint8 decimals = priceFeed.decimals();\\n        return decimals;\\n    }\\n\\n    /**\\n     * @notice Returns the latest price from oracle contract\\n    */\\n    function getLatestPrice() public view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        return price >= 0 ? uint256(price) : 0;\\n    }\\n}\\n\",\"keccak256\":\"0x0e06dab9db0ea365065a1a636d6a28d6856a5459301e23bd456a22bb6acc575d\",\"license\":\"UNLICENSED\"},\"contracts/Staking/StakingPoolImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./StakingPoolStorageStructure.sol\\\";\\n\\ncontract StakingPoolImplementation is StakingPoolStorageStructure {\\n    using BasisPoints for uint256;\\n    using SafeMath for uint256;\\n    using CalculateRewardLib for *;\\n    using IndexedClaimRewardLib for *;\\n    using ClaimRewardLib for *;\\n \\n    modifier onlyPoolCreator {\\n        require(\\n            _msgSender() == poolCreator,\\n            \\\"0300 caller is not a pool creator\\\"\\n        );\\n        _;\\n    }\\n\\n    event Stake(address indexed user, uint256 amount, uint256 pricePrediction, uint256 indexOfStake);\\n\\n    // TODO: add the index of stakes for BatchStake event too\\n    event BatchStake(address indexed user, uint256[] stakeAmounts, uint256[] predictions, uint256 indexOfFirstStake, uint256 indexOfLastStake);\\n\\n    event WithdrawStakingReturn(address indexed user, uint256 stakingReturn);\\n    event WithdrawTotemPrize(address indexed user, uint256 totemPrize);\\n    event WithdrawWrappedTokenPrize(address indexed user, uint256 wrappedTokenPrize);\\n    event Unstake(address indexed user, uint256 amount);\\n\\n    event PoolActivated();\\n    event PoolDeactivated();\\n    event PoolLocked();\\n    event PoolSorted();\\n    event PoolMatured();\\n    event PoolDeleted();\\n\\n    function setActivationStatus(bool _activationStatus) \\n        external \\n        onlyPoolCreator \\n    {\\n        require(isActive != _activationStatus, \\\"Not changing the activation status\\\");\\n        isActive = _activationStatus;\\n\\n        if (isActive) emit PoolActivated();\\n        else emit PoolDeactivated();\\n    }\\n\\n    function stake(uint256 _amount, uint256 _pricePrediction) external {\\n        require(\\n            isActive && block.timestamp > launchDate,\\n            \\\"0313 pool is not active\\\"\\n        );\\n        require(\\n            block.timestamp < (launchDate + lockTime),\\n            \\\"0316 Can not stake after lock date\\\"\\n        );\\n        require(\\n            !isLocked, \\n            \\\"0310 Pool is locked\\\"\\n        );\\n        require(\\n            _amount >= minimumStakeAmount, \\n            \\\"0311 Amount can't be less than the minimum\\\"\\n        );\\n        \\n        // uint256 limitRange = sizeAllocation.mul(sizeLimitRangeRate).div(100);\\n        uint256 limitRange = minimumStakeAmount;\\n        uint256 taxRate = totemToken.taxRate();\\n        uint256 tax = \\n            totemToken.taxExempt(_msgSender()) ? 0 : _amount.mulBP(taxRate);\\n\\n        require(\\n            totalStaked.add(_amount).sub(tax) <= sizeAllocation.add(limitRange), \\n            \\\"0312 Can't stake above size allocation\\\"\\n        );\\n        \\n        uint256 stakeTaxAmount;\\n\\n        (stakeTaxAmount, _amount) = getStakingTax(_amount, taxRate);\\n\\n        totemToken.transferFrom(\\n            _msgSender(),\\n            address(this),\\n            (_amount + stakeTaxAmount)\\n        );\\n    \\n        /// @dev This is to remove token tax (not staking tax) from the amount\\n        _amount = _amount.sub(tax);\\n\\n        if (stakeTaxAmount > 0)\\n            totemToken.transfer(totemToken.taxationWallet(), stakeTaxAmount);\\n\\n        uint256 indexOfStake = predictions[_msgSender()].length;\\n\\n        _stake(_msgSender(), _amount, _pricePrediction);\\n\\n        totalStaked = totalStaked.add(_amount);\\n\\n        if (totalStaked >= sizeAllocation) {\\n            _lockPool();\\n        }\\n\\n        emit Stake(_msgSender(), _amount, _pricePrediction, indexOfStake);\\n    }\\n\\n    function batchStake(\\n        uint256[] calldata _stakingAmounts, \\n        uint256[] calldata _predictions\\n    ) external \\n    {\\n        require(\\n            isActive && block.timestamp > launchDate,\\n            \\\"0313 pool is not active\\\"\\n        );\\n        require(\\n            block.timestamp < (launchDate + lockTime),\\n            \\\"0316 Can not stake after lock date\\\"\\n        );\\n        require(\\n            !isLocked, \\n            \\\"0310 Pool is locked\\\"\\n        );\\n        require(\\n            _stakingAmounts.length == _predictions.length, \\n            \\\"0315 stakingAmount and predictions length mismatch\\\"\\n        );\\n\\n        uint256 totalStakingAmount = 0;\\n\\n        for(uint256 i; i < _stakingAmounts.length; i++) {\\n            require(\\n                _stakingAmounts[i] >= minimumStakeAmount, \\n                \\\"0311 Amount can't be less than the minimum\\\"\\n            );\\n            totalStakingAmount = totalStakingAmount.add(_stakingAmounts[i]);\\n        }\\n\\n        // uint256 limitRange = sizeAllocation.mul(sizeLimitRangeRate).div(100);\\n        uint256 limitRange = minimumStakeAmount;\\n        uint256 taxRate = totemToken.taxRate();\\n        uint256 tax =\\n            totemToken.taxExempt(_msgSender()) ? 0 : totalStakingAmount.mulBP(taxRate);\\n\\n        require(\\n            totalStaked.add(totalStakingAmount).sub(tax) <= sizeAllocation.add(limitRange), \\n            \\\"0312 Can't stake above size allocation\\\"\\n        );\\n\\n        uint256 stakeTaxAmount;\\n\\n        (stakeTaxAmount, totalStakingAmount) = getStakingTax(totalStakingAmount, taxRate);\\n\\n        totemToken.transferFrom(\\n            _msgSender(),\\n            address(this),\\n            (totalStakingAmount + stakeTaxAmount)\\n        );\\n    \\n        /// @dev This is to remove token tax (not staking tax) from the amount\\n        totalStakingAmount = totalStakingAmount.sub(tax);\\n\\n        if (stakeTaxAmount > 0)\\n            totemToken.transfer(totemToken.taxationWallet(), stakeTaxAmount);\\n\\n        uint256 indexOfFirstStake = predictions[_msgSender()].length;\\n\\n        for(uint256 i; i < _stakingAmounts.length; i++) {\\n\\n            uint256 stakingAmount = _stakingAmounts[i];\\n\\n            tax = totemToken.taxExempt(_msgSender()) ? 0 : stakingAmount.mulBP(taxRate);\\n        \\n            (stakeTaxAmount, stakingAmount) = getStakingTax(stakingAmount, taxRate);\\n\\n            /// @dev This is to remove token tax (not staking tax) from the amount\\n            stakingAmount = stakingAmount.sub(tax);\\n\\n            _stake(_msgSender(), stakingAmount, _predictions[i]);\\n            \\n            totalStaked = totalStaked.add(stakingAmount);\\n        }\\n\\n        uint256 indexOfLastStake = predictions[_msgSender()].length - 1;\\n\\n        if (totalStaked >= sizeAllocation) {\\n            _lockPool();\\n        }\\n\\n        emit BatchStake(_msgSender(), _stakingAmounts, _predictions, indexOfFirstStake, indexOfLastStake);\\n    }\\n\\n    function _stake(address _staker, uint256 _amount, uint256 _pricePrediction) internal {\\n\\n        stakers.push(\\n            Staker({\\n                stakerAddress: _staker,\\n                index: predictions[_staker].length\\n            })\\n        );\\n\\n        predictions[_staker].push(\\n            StakeWithPrediction({\\n                stakedBalance: _amount,\\n                stakedTime: block.timestamp,\\n                amountWithdrawn: 0,\\n                lastWithdrawalTime: block.timestamp,\\n                pricePrediction: _pricePrediction,\\n                difference: type(uint256).max,\\n                rank: type(uint256).max,\\n                prizeRewardWithdrawn: false,\\n                didUnstake: false\\n            })\\n        );\\n\\n        _getAveragePricePrediction(_pricePrediction, _amount);\\n    }\\n\\n    function getStakingTax(uint256 amount, uint256 tokenTaxRate)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 newStakeTaxRate =\\n            stakeTaxRate > tokenTaxRate ? stakeTaxRate.sub(tokenTaxRate) : 0;\\n        if (newStakeTaxRate == 0) {\\n            return (0, amount);\\n        }\\n        return (\\n            amount.mulBP(newStakeTaxRate),\\n            amount.sub(amount.mulBP(newStakeTaxRate))\\n        );\\n    }\\n\\n    function claimReward() external {\\n\\n        uint256 stakingReturn = ClaimRewardLib.getStakingReturn(predictions[_msgSender()],lps);\\n\\n        (uint256 totemPrize, uint256 wrappedTokenPrize) = \\n            ClaimRewardLib.getPrize(\\n                predictions[_msgSender()],\\n                lps,\\n                prizeRewardRates\\n            )\\n        ;\\n\\n        uint256 withdrawableTotemReward = totemPrize + stakingReturn;\\n        \\n        if (isMatured) {\\n            if (usdPrizeAmount > 0) {\\n                if (wrappedTokenPrize > 0) {\\n\\n                    /// @dev Not the actual withdraw, only updating the array in the mapping\\n                    ClaimRewardLib.withdrawPrize(predictions[_msgSender()]);\\n\\n                    require(wrappedToken.transfer(_msgSender(), wrappedTokenPrize), \\\"0320\\\");\\n\\n                    emit WithdrawWrappedTokenPrize(_msgSender(), wrappedTokenPrize);\\n                }\\n            }\\n\\n            if (totemPrize > 0) {\\n                ClaimRewardLib.withdrawPrize(predictions[_msgSender()]);\\n            }\\n\\n            uint256 stakedBalance = CalculateRewardLib.getTotalStakedBalance(predictions[_msgSender()]);\\n            \\n            if (stakedBalance > 0) {\\n\\n                ClaimRewardLib.withdrawStakedBalance(predictions[_msgSender()]);\\n\\n                totemToken.transfer(_msgSender(), stakedBalance);\\n\\n                emit Unstake(_msgSender(), stakedBalance);\\n            }\\n        }\\n\\n        /// @dev before maturity, totemPrize is always zero\\n        if (withdrawableTotemReward > 0) {\\n\\n            /// @dev Send the token reward only when rewardManager has the enough funds\\n            require(\\n                totemToken.balanceOf(address(rewardManager)) >= withdrawableTotemReward, \\n                \\\"Not enough balance in reward manager\\\"\\n            );\\n\\n            ClaimRewardLib.withdrawStakingReturn(predictions[_msgSender()], lps);\\n\\n            rewardManager.rewardUser(_msgSender(), withdrawableTotemReward);\\n\\n            emit WithdrawStakingReturn(_msgSender(), stakingReturn);\\n            emit WithdrawTotemPrize(_msgSender(), totemPrize);\\n        }\\n    }\\n\\n    function indexedClaimReward(uint256 stakeIndex) external {\\n        require(predictions[_msgSender()].length >= stakeIndex, \\\"Index does not exist\\\");\\n        require(predictions[_msgSender()].length != 0, \\\"User does not have any stakes\\\");\\n\\n        uint256 stakingReturn = IndexedClaimRewardLib.\\n            getIndexedStakingReturn(\\n                predictions[_msgSender()],\\n                stakeIndex,\\n                lps\\n            );\\n\\n        (uint256 totemPrize, uint256 wrappedTokenPrize) = IndexedClaimRewardLib.\\n            getIndexedPrize(\\n                predictions[_msgSender()],\\n                stakeIndex,\\n                lps,\\n                prizeRewardRates\\n            );\\n\\n        uint256 withdrawableTotemReward = totemPrize + stakingReturn;\\n        \\n        if (isMatured) {\\n            \\n            if (usdPrizeAmount > 0) {\\n                if (wrappedTokenPrize > 0) {\\n\\n                    IndexedClaimRewardLib.withdrawIndexedPrize(\\n                        predictions[_msgSender()], \\n                        stakeIndex\\n                    );\\n\\n                    require(wrappedToken.transfer(_msgSender(), wrappedTokenPrize), \\\"0330\\\");\\n\\n                    emit WithdrawWrappedTokenPrize(_msgSender(), wrappedTokenPrize);\\n                }\\n            }\\n\\n            if (totemPrize > 0) {\\n                IndexedClaimRewardLib.withdrawIndexedPrize(predictions[_msgSender()], stakeIndex);\\n            }\\n\\n            uint256 stakedBalance = IndexedClaimRewardLib.getIndexedStakedBalance(\\n                predictions[_msgSender()], \\n                stakeIndex\\n            );\\n\\n            if (stakedBalance > 0) {\\n                IndexedClaimRewardLib.withdrawIndexedStakedBalance(\\n                    predictions[_msgSender()], \\n                    stakeIndex\\n                );\\n\\n                totemToken.transfer(_msgSender(), stakedBalance);\\n\\n                emit Unstake(_msgSender(), stakedBalance);\\n            }\\n        }\\n\\n        /// @dev before maturity, totemPrize is always zero\\n        if (withdrawableTotemReward > 0) {\\n\\n            /// @dev Send the token reward only when rewardManager has the enough funds\\n            require(\\n                totemToken.balanceOf(address(rewardManager)) >= withdrawableTotemReward, \\n                \\\"Not enough balance in reward manager\\\"\\n            );\\n\\n            IndexedClaimRewardLib.withdrawIndexedStakingReturn(\\n                predictions[_msgSender()], \\n                stakeIndex,\\n                lps\\n            );\\n                \\n            rewardManager.rewardUser(_msgSender(), withdrawableTotemReward);\\n\\n            emit WithdrawStakingReturn(_msgSender(), stakingReturn);\\n            emit WithdrawTotemPrize(_msgSender(), totemPrize);\\n        }\\n    }\\n\\n    function purchaseWrappedToken(uint256 usdAmount, uint256 deadline)\\n        external\\n        onlyPoolCreator\\n    {\\n        //TODO: require usdAmount to be more than usdPrizeAmount, to have enough rewards\\n        require(\\n            usdPrizeAmount > 0, \\n            \\\"0340 The pool is only TOTM rewarder\\\"\\n        );\\n        \\n        require(\\n            usdAmount > 0, \\n            \\\"0341 Amount can't be zero\\\"\\n        );\\n\\n        require(\\n            deadline >= block.timestamp, \\n            \\\"0342 Deadline is low\\\"\\n        );\\n\\n        address swapRouterAddress = getSwapRouter();\\n        approveTokens(swapRouterAddress, usdAmount);\\n        \\n        uint256 wrappedTokenAmount = getEstimatedWrappedTokenForUSD(usdAmount);\\n\\n        uint256 wrappedTokenAmountWithSlippage =\\n            wrappedTokenAmount.sub(wrappedTokenAmount.mulBP(300));\\n\\n        transferTokensThroughSwap(\\n            address(this),\\n            usdAmount,\\n            wrappedTokenAmountWithSlippage,\\n            deadline\\n        );\\n    }\\n\\n    function getWrappedTokenBalance() public view returns (uint256) {\\n        return wrappedToken.balanceOf(address(this));\\n    }\\n\\n    function lockPool() public onlyPoolCreator virtual {\\n        _lockPool();\\n    }\\n\\n    function _lockPool() internal {\\n        isLocked = true;\\n\\n        emit PoolLocked();\\n    }\\n\\n    /**\\n     * @param _price is ignored if oracle is not zero address.When there is no oracle,\\n             _price is the maturingPrice and is set manually by the pool creator\\n    */\\n    function updateMaturingPrice(uint256 _price) external onlyPoolCreator {\\n        require(\\n            block.timestamp >= launchDate + lockTime + maturityTime,\\n            \\\"0350 Can't set maturing price before the maturity time\\\"\\n        );\\n\\n        if (oracleContract == address(0)) {\\n            maturingPrice = _price;\\n            lps.maturingPrice = maturingPrice;\\n        } else {\\n            maturingPrice = getLatestPrice();\\n            lps.maturingPrice = maturingPrice;\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets oracle to zero in case it was given incorrectly by the owner,\\n     *         or it is not available\\n     */\\n    function setOracleToZero() external onlyPoolCreator {\\n        oracleContract = address(0);\\n    }\\n\\n    function setSortedStakers(address[25] calldata addrArray, uint256[25] calldata indexArray)\\n        external \\n        onlyPoolCreator \\n    {\\n        require(\\n            block.timestamp >= launchDate + lockTime + maturityTime,\\n            \\\"0390 Can't set sorted stakers before the maturity time\\\"\\n        );\\n\\n        if(sortedStakers.length != 0) {\\n            delete sortedStakers;\\n        }\\n        \\n        uint256 i;\\n        for (i = 0; i < addrArray.length; i++) {\\n\\n            /// @dev The first 0 address means the other addresses are also 0 so they won't be checked\\n            if (addrArray[i] == address(0)) break;\\n\\n            sortedStakers.push(\\n            Staker({\\n                stakerAddress: addrArray[i],\\n                index: indexArray[i]\\n                })\\n            );\\n\\n            predictions[addrArray[i]][indexArray[i]].rank = i + 1;\\n        }\\n\\n        require( \\n            prizeRewardRates[prizeRewardRates.length - 1].rank >= i,\\n            \\\"number of sorted stakers must be less than or equal to the last rank\\\"\\n        );\\n\\n        emit PoolSorted();\\n    }\\n\\n    function endPool() external onlyPoolCreator {\\n        require(\\n            block.timestamp >= launchDate + lockTime + maturityTime,\\n            \\\"0360 Can't end pool before the maturity time\\\"\\n        );\\n        //TODO: check to see if there is enough USD to buy the wrapped token with, the mimimum USD\\n        // must be usdPrizeAmount, if there is not, do not allow endPool\\n        if (usdPrizeAmount > 0) {\\n            require(\\n                getWrappedTokenBalance() != 0, \\n                \\\"0361 WrappedToken Rewards not available\\\"\\n            );\\n        }\\n\\n        if (stakers.length > 0) {\\n            require(\\n                sortedStakers.length != 0,\\n                \\\"0362 first should sort\\\"\\n            );\\n        }\\n\\n        /** \\n         *  @dev potentialCollabReward allows the admin to set the collaborateive reward \\n         *  @notice the collaborative reward is only given to the pools which the average price\\n         *          predicted has the accuracy of 25$\\n        */\\n        if (potentialCollabReward > 0) {\\n            if (getDifference(averagePricePrediction, collaborativeRange) == 0) {\\n                collaborativeReward = potentialCollabReward;\\n                lps.collaborativeReward = collaborativeReward;\\n            }\\n        }\\n\\n        isLocked = true;\\n        isMatured = true;\\n        lps.isMatured = isMatured;\\n\\n        emit PoolMatured();\\n    }\\n\\n    function getDifference(uint256 prediction, uint256 _range)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_range > prediction) return 0;\\n\\n        if (prediction > maturingPrice) {\\n            if (prediction.sub(_range) <= maturingPrice) return 0;\\n            else return prediction.sub(_range).sub(maturingPrice);\\n        } else {\\n            if (prediction.add(_range) >= maturingPrice) return 0;\\n            else return maturingPrice.sub(prediction.add(_range));\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the avgerage price prediction for calculating collaborative reward\\n     */ \\n    function _getAveragePricePrediction(uint256 _prediction, uint256 _amount) internal {\\n\\n        uint256 predictionsCount = stakers.length - 1;\\n\\n        if (predictionsCount == 0) averagePricePrediction = _prediction;\\n\\n        averagePricePrediction = \\n            averagePricePrediction.mul(totalStaked).add(_prediction.mul(_amount)).div(totalStaked.add(_amount));\\n    }\\n\\n    function deletePool() external onlyPoolCreator {\\n        isDeleted = true;\\n        emit PoolDeleted();\\n    }\\n\\n    function getStakers() \\n        public \\n        view \\n        returns(address[] memory, uint256[] memory) \\n    {\\n        address[] memory addrs = new address[](stakers.length);\\n        uint256[] memory indexes = new uint256[](stakers.length);\\n\\n        for (uint256 i = 0; i < stakers.length; i++) {\\n            addrs[i] = stakers[i].stakerAddress;\\n            indexes[i] = stakers[i].index;\\n        }\\n\\n        return (addrs, indexes);\\n    }\\n\\n    function getStakingReward(address _staker) \\n        public \\n        view \\n        returns (uint256) \\n    {\\n        uint256 reward = ClaimRewardLib.getStakingReturn(\\n            predictions[_staker],\\n            lps\\n        );\\n\\n        return reward;\\n    }\\n\\n    function getIndexedStakingReward(address _staker, uint256 _stakeIndex) \\n        public \\n        view \\n        returns (uint256) \\n    {\\n        uint256 reward = IndexedClaimRewardLib.getIndexedStakingReturn(\\n            predictions[_staker], \\n            _stakeIndex,\\n            lps\\n        );\\n\\n        return reward;\\n    }\\n\\n     function getPrize(address _staker)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        (uint256 reward, uint256 wrappedTokenReward) = ClaimRewardLib.getPrize(\\n                predictions[_staker],\\n                lps,\\n                prizeRewardRates\\n            )\\n        ;\\n\\n        return (reward, wrappedTokenReward);\\n    }\\n\\n    function getIndexedPrize(address _staker, uint256 _stakeIndex)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        (uint256 reward, uint256 wrappedTokenReward) = IndexedClaimRewardLib.getIndexedPrize(\\n            predictions[_staker], \\n            _stakeIndex,\\n            lps,\\n            prizeRewardRates\\n        );\\n\\n        return (reward, wrappedTokenReward);\\n    }\\n\\n    /**  \\n     * @notice hasUnStaked return true if the user staked in the pool and then \\n            has unStaked it (claimed)\\n    */\\n    function hasUnStaked(address staker, uint256 stakeIndex) external view returns (bool) {\\n        StakeWithPrediction[] memory userStakes = predictions[staker];\\n\\n        require(\\n            userStakes.length > 0,\\n            \\\"0380 this address didn't stake in this pool\\\"\\n        );\\n\\n        require(\\n            stakeIndex < userStakes.length,\\n            \\\"0381 this index exceeds\\\"\\n        );\\n    \\n\\n        if (userStakes[stakeIndex].didUnstake) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function withdrawStuckTokens(address _stuckToken, uint256 amount, address receiver)\\n        external\\n        onlyPoolCreator\\n    {\\n        require(\\n            _stuckToken != address(totemToken), \\n            \\\"0370 totems can not be transfered\\\"\\n        );\\n        IERC20 stuckToken = IERC20(_stuckToken);\\n        stuckToken.transfer(receiver, amount);\\n    }\\n\\n    function declareEmergency()\\n        external\\n        onlyPoolCreator\\n    {\\n        isActive = false;\\n        isAnEmergency = true;\\n\\n        _lockPool();\\n    }\\n\\n    function emergentWithdraw() external {\\n        require(\\n            isAnEmergency,\\n            \\\"it's not an emergency\\\"\\n        );\\n\\n        uint256 stakedBalance = CalculateRewardLib.getTotalStakedBalance(predictions[_msgSender()]);\\n        if (stakedBalance > 0) {\\n\\n            ClaimRewardLib.withdrawStakedBalance(predictions[_msgSender()]);\\n\\n            totemToken.transfer(_msgSender(), stakedBalance);\\n\\n\\n            emit Unstake(_msgSender(), stakedBalance);\\n        }\\n    }\\n}\",\"keccak256\":\"0xb2821dc2c6860c109ff92ca6c100cbd05473c3f46b73c080850dca15bd2a68fa\",\"license\":\"UNLICENSED\"},\"contracts/Staking/StakingPoolStorageStructure.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"../Distribution/USDRetriever.sol\\\";\\nimport \\\"../Price/PriceConsumerUpgradeable.sol\\\";\\nimport \\\"../Distribution/WrappedTokenDistributorUpgradeable.sol\\\";\\n\\nimport \\\"../libraries/BasisPoints.sol\\\";\\nimport \\\"../libraries/CalculateRewardLib.sol\\\";\\nimport \\\"../libraries/IndexedClaimRewardLib.sol\\\";\\nimport \\\"../libraries/ClaimRewardLib.sol\\\";\\n\\nimport \\\"../interfaces/ITotemToken.sol\\\";\\nimport \\\"../interfaces/IRewardManager.sol\\\";\\n\\ncontract StakingPoolStorageStructure is \\n    OwnableUpgradeable,  \\n    PriceConsumerUpgradeable,\\n    USDRetriever,\\n    WrappedTokenDistributorUpgradeable\\n{\\n    address public stakingPoolImplementation;\\n    address public poolCreator;\\n    address public oracleContract;\\n\\n    /**\\n     * @notice Declared for passing the needed params to libraries.\\n     */\\n    struct LibParams {\\n        uint256 launchDate;\\n        uint256 lockTime;\\n        uint256 maturityTime;\\n        uint256 maturingPrice;\\n        uint256 usdPrizeAmount;\\n        uint256 prizeAmount;\\n        uint256 stakeApr;\\n        uint256 collaborativeReward;\\n        uint256 oracleDecimals;\\n        bool isEnhancedEnabled;\\n        bool isMatured;\\n    }\\n\\n    struct StakeWithPrediction {\\n        uint256 stakedBalance;\\n        uint256 stakedTime;\\n        uint256 amountWithdrawn;\\n        uint256 lastWithdrawalTime;\\n        uint256 pricePrediction;\\n        uint256 difference;\\n        uint256 rank;\\n        bool prizeRewardWithdrawn;\\n        bool didUnstake;\\n    }\\n\\n    struct Staker {\\n        address stakerAddress;\\n        uint256 index;\\n    }\\n\\n    struct PrizeRewardRate {\\n        uint256 rank;\\n        uint256 percentage;\\n    }\\n\\n    LibParams public lps;\\n\\n    PrizeRewardRate[] public prizeRewardRates;\\n    Staker[] public stakers;\\n    Staker[] public sortedStakers;\\n\\n    mapping(address => StakeWithPrediction[]) public predictions;\\n\\n    ITotemToken public totemToken;\\n    IRewardManager public rewardManager;\\n    IERC20 public wrappedToken;\\n\\n    string public wrappedTokenSymbol;\\n    string public poolType;\\n\\n    uint256 public constant sizeLimitRangeRate = 5;\\n\\n    uint256 public launchDate;\\n    uint256 public lockTime;\\n    uint256 public maturityTime;\\n    uint256 public sizeAllocation;\\n    uint256 public stakeApr;\\n    uint256 public prizeAmount;\\n    /**\\n     * @notice usdPrizeAmount is the enabler of WrappedToken rewarder; If it is set to 0 \\n            then the pool is only TOTM rewarder.\\n     */\\n    uint256 public usdPrizeAmount;\\n    uint256 public stakeTaxRate;\\n    uint256 public minimumStakeAmount;\\n    uint256 public totalStaked;\\n    uint256 public maturingPrice;\\n    uint256 public potentialCollabReward;\\n    uint256 public collaborativeRange;\\n    /**\\n     * @notice Based on the white paper, the collaborative reward can be 20% (2000),\\n             25% (2500) or 35% (3500).\\n     */\\n    uint256 public collaborativeReward;\\n    uint256 public oracleDecimals; \\n\\n    bool public isAnEmergency;\\n    bool public isEnhancedEnabled;\\n    bool public isActive;\\n    bool public isLocked;\\n    bool public isMatured;\\n    bool public isDeleted;\\n    /**\\n     * @dev StakingPoolImplementation can't be upgraded unless superAdmin sets this flag.\\n     */\\n    bool public upgradeEnabled;\\n\\n    uint256 public averagePricePrediction;\\n}\\n\",\"keccak256\":\"0x8a98d9857af690c58e4551d967ceaf31274b9f98643464bb2cf4fbb7144cc130\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPancakeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x40ff7201ca90e848ee6f006c4d114891619f28c21e713d74dc62b1ffc48d0461\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IRewardManager {\\n\\n    function setOperator(address _newOperator) external;\\n\\n    function addPool(address _poolAddress) external;\\n\\n    function rewardUser(address _user, uint256 _amount) external;\\n\\n    event SetOperator(address operator);\\n    event SetRewarder(address rewarder);\\n\\n}\",\"keccak256\":\"0xab39a767c897abdfa93b0a33593cd3c179fd5222f2a37de798d298ccf66e5adb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITotemToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface ITotemToken {\\n    \\n    function setLocker(address _locker) external;\\n\\n    function setDistributionTeamsAddresses(\\n        address _CommunityDevelopmentAddr,\\n        address _StakingRewardsAddr,\\n        address _LiquidityPoolAddr,\\n        address _PublicSaleAddr,\\n        address _AdvisorsAddr,\\n        address _SeedInvestmentAddr,\\n        address _PrivateSaleAddr,\\n        address _TeamAllocationAddr,\\n        address _StrategicRoundAddr\\n    ) external;\\n\\n    function distributeTokens() external;\\n\\n    function setTaxRate(uint256 newTaxRate) external;\\n\\n    function setTaxExemptStatus(address account, bool status) external;\\n\\n    function setTaxationWallet(address newTaxationWallet) external;\\n\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function taxRate() external returns (uint256);\\n\\n    function taxationWallet() external returns (address);\\n\\n    function taxExempt(address _msgSender) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1ba963229ac039a0550990884eb976a06fb2fe7691848ff27af1c14574346531\",\"license\":\"UNLICENSED\"},\"contracts/libraries/BasisPoints.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary BasisPoints {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant BASIS_POINTS = 10000;\\n\\n    function mulBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        return amt.mul(bp).div(BASIS_POINTS);\\n    }\\n\\n    function divBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        require(bp > 0, \\\"Cannot divide by zero.\\\");\\n        return amt.mul(BASIS_POINTS).div(bp);\\n    }\\n\\n    function addBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        if (amt == 0) return 0;\\n        if (bp == 0) return amt;\\n        return amt.add(mulBP(amt, bp));\\n    }\\n\\n    function subBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        if (amt == 0) return 0;\\n        if (bp == 0) return amt;\\n        return amt.sub(mulBP(amt, bp));\\n    }\\n}\\n\",\"keccak256\":\"0xcbe25ead953d92501d8fc100fbc9d1c5d3885b6360b3619309063fdd3b874a31\",\"license\":\"UNLICENSED\"},\"contracts/libraries/CalculateRewardLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/BasisPoints.sol\\\";\\nimport \\\"../Staking/StakingPoolStorageStructure.sol\\\";\\n\\nlibrary CalculateRewardLib {\\n\\n    using BasisPoints for uint256;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant foo = 0;\\n\\n    function getTotalStakedBalance(StakingPoolStorageStructure.StakeWithPrediction[] storage _staker)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_staker.length == 0) return 0;\\n\\n        uint256 totalStakedBalance = 0;\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            if (!_staker[i].didUnstake) {\\n                totalStakedBalance = totalStakedBalance.add(\\n                    _staker[i].stakedBalance\\n                );\\n            }\\n        }\\n\\n        return totalStakedBalance;\\n    }\\n\\n    /**\\n     * @notice the reward formula is:\\n          ((1 + stakeAPR +enhancedReward)^((MaturingDate - StakingDate)/365) - 1) * StakingBalance\\n    */\\n    function _getStakingRewardPerStake(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 maturityDate = \\n            _lps.launchDate + \\n            _lps.lockTime + \\n            _lps.maturityTime;\\n\\n        uint256 timeTo =\\n            block.timestamp > maturityDate ? maturityDate : block.timestamp;\\n\\n        uint256 enhancedApr;\\n        if ( _lps.isEnhancedEnabled ) {\\n            enhancedApr = _getEnhancedRewardRate(\\n                _staker[_stakeIndex].stakedTime,\\n                _lps\\n            );\\n        }\\n\\n        uint256 rewardPerStake = _calcStakingReturn(\\n            _lps.stakeApr.add(enhancedApr),\\n            timeTo.sub(_staker[_stakeIndex].stakedTime),\\n            _staker[_stakeIndex].stakedBalance\\n        );\\n\\n        rewardPerStake = rewardPerStake.sub(_staker[_stakeIndex].amountWithdrawn);\\n\\n        return rewardPerStake;\\n    }\\n\\n    function _getEnhancedRewardRate(\\n        uint256 stakedTime,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n\\n        if (!_lps.isEnhancedEnabled) {\\n            return 0;\\n        }\\n\\n        uint256 lockDate = _lps.launchDate.add(_lps.lockTime);\\n        uint256 difference = lockDate.sub(stakedTime);\\n\\n        if (difference < 48 hours) {\\n            return 0;\\n        } else if (difference < 72 hours) {\\n            return 100;\\n        } else if (difference < 96 hours) {\\n            return 200;\\n        } else if (difference < 120 hours) {\\n            return 300;\\n        } else if (difference < 144 hours) {\\n            return 400;\\n        } else {\\n            return 500;\\n        }\\n    }\\n\\n    function _calcStakingReturn(uint256 totalRewardRate, uint256 timeDuration, uint256 totalStakedBalance) \\n        internal \\n        pure\\n        returns (uint256) \\n    {\\n        uint256 yearInSeconds = 365 days;\\n\\n        uint256 first = (yearInSeconds**2)\\n            .mul(10**8);\\n\\n        uint256 second = timeDuration\\n            .mul(totalRewardRate) \\n            .mul(yearInSeconds)\\n            .mul(5000);\\n        \\n        uint256 third = totalRewardRate\\n            .mul(yearInSeconds**2)\\n            .mul(5000);\\n\\n        uint256 forth = (timeDuration**2)\\n            .mul(totalRewardRate**2)\\n            .div(6);\\n\\n        uint256 fifth = timeDuration\\n            .mul(totalRewardRate**2)\\n            .mul(yearInSeconds)\\n            .div(2);\\n\\n        uint256 sixth = (totalRewardRate**2)\\n            .mul(yearInSeconds**2)\\n            .div(3);\\n \\n        uint256 rewardPerStake = first.add(second).add(forth).add(sixth);\\n\\n        rewardPerStake = rewardPerStake.sub(third).sub(fifth);\\n\\n        rewardPerStake = rewardPerStake\\n            .mul(totalRewardRate)\\n            .mul(timeDuration);\\n\\n        rewardPerStake = rewardPerStake\\n            .mul(totalStakedBalance)\\n            .div(yearInSeconds**3)\\n            .div(10**12);\\n\\n        return rewardPerStake; \\n    }\\n\\n    function _getPercentageReward(\\n        uint256 _rank, \\n        StakingPoolStorageStructure.PrizeRewardRate[] storage _prizeRewardRates\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        for (uint256 i = 0; i < _prizeRewardRates.length; i++) {\\n            if (_rank <= _prizeRewardRates[i].rank) {\\n                return _prizeRewardRates[i].percentage;\\n            }\\n        }\\n\\n        return 0;\\n    }        \\n\\n\\n\\n}\",\"keccak256\":\"0xc712e3d29c87edcd36233abc68310220ad0914694200663dded7328044638e8b\",\"license\":\"UNLICENSED\"},\"contracts/libraries/ClaimRewardLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CalculateRewardLib.sol\\\";\\nimport \\\"../libraries/BasisPoints.sol\\\";\\nimport \\\"../Staking/StakingPoolStorageStructure.sol\\\";\\n\\nlibrary ClaimRewardLib {\\n\\n    using CalculateRewardLib for *;\\n    using BasisPoints for uint256; \\n    using SafeMath for uint256;\\n\\n    uint256 public constant foo = 0;\\n\\n    function withdrawStakingReturn(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    )\\n        public \\n    {\\n        \\n        if (_staker.length == 0) return;\\n\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            uint256 rewardPerStake = CalculateRewardLib._getStakingRewardPerStake(\\n                _staker, \\n                i, \\n                _lps);\\n\\n            _staker[i].lastWithdrawalTime = block.timestamp;\\n            _staker[i].amountWithdrawn = _staker[i].amountWithdrawn.add(\\n                rewardPerStake\\n            );\\n        }\\n    }\\n\\n    function withdrawPrize(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker\\n    ) \\n        public\\n    {\\n        if (_staker.length == 0) return;\\n\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            _staker[i].prizeRewardWithdrawn = true;\\n        }\\n    }\\n\\n    function withdrawStakedBalance(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker\\n    )\\n        public \\n    {\\n        \\n        if (_staker.length == 0) return;\\n\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            _staker[i].didUnstake = true;\\n        }\\n    }\\n\\n    function getStakingReturn(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker,\\n        StakingPoolStorageStructure.LibParams storage _lps  \\n    ) \\n        public \\n        view \\n        returns (uint256) \\n    {\\n        if (_staker.length == 0) return 0;\\n\\n        uint256 reward = 0;\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            uint256 rewardPerStake = CalculateRewardLib._getStakingRewardPerStake(\\n                _staker,\\n                i, \\n                _lps\\n            );\\n\\n            reward = reward.add(rewardPerStake);\\n        }\\n\\n        return reward;\\n    }\\n\\n    function getPrize(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        StakingPoolStorageStructure.LibParams storage _lps,\\n        StakingPoolStorageStructure.PrizeRewardRate[] storage _prizeRewardRates\\n    )\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        if (!_lps.isMatured) return (0, 0);\\n\\n        if (_staker.length == 0) return (0, 0);\\n\\n        uint256 maturingWrappedTokenPrizeAmount =\\n            (_lps.usdPrizeAmount.mul(10**_lps.oracleDecimals)).div(_lps.maturingPrice);\\n\\n        uint256 reward = 0;\\n        uint256 wrappedTokenReward = 0;\\n\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            if (!_staker[i].prizeRewardWithdrawn) {\\n\\n                uint256 _percent = CalculateRewardLib._getPercentageReward(\\n                    _staker[i].rank,\\n                    _prizeRewardRates\\n                );\\n\\n                reward = reward.add(\\n                            _lps.prizeAmount.mulBP(_percent)\\n                        );\\n\\n                wrappedTokenReward = wrappedTokenReward.add(\\n                            maturingWrappedTokenPrizeAmount\\n                                .mulBP(_percent)\\n                        );        \\n            }\\n        }\\n\\n        if (_lps.collaborativeReward > 0) {\\n            reward = reward.addBP(_lps.collaborativeReward);\\n            wrappedTokenReward = wrappedTokenReward.addBP(_lps.collaborativeReward);\\n        }\\n\\n        return (reward, wrappedTokenReward);\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0xec7d4e480f58753b28aa26b3a2e588c256303039bbeeac3e241ee803af5121a4\",\"license\":\"UNLICENSED\"},\"contracts/libraries/IndexedClaimRewardLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CalculateRewardLib.sol\\\";\\nimport \\\"../libraries/BasisPoints.sol\\\";\\nimport \\\"../Staking/StakingPoolStorageStructure.sol\\\";\\n\\nlibrary IndexedClaimRewardLib {\\n\\n    using CalculateRewardLib for *;\\n    using BasisPoints for uint256; \\n    using SafeMath for uint256;\\n\\n    uint256 public constant foo = 0;\\n\\n    function withdrawIndexedStakingReturn(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    ) \\n        public\\n    {\\n        if (_staker.length == 0) return;\\n        if (_stakeIndex >= _staker.length) return;\\n\\n        uint256 rewardPerStake = CalculateRewardLib._getStakingRewardPerStake(\\n            _staker, \\n            _stakeIndex,\\n            _lps\\n        );\\n\\n        _staker[_stakeIndex].lastWithdrawalTime = block.timestamp;\\n        _staker[_stakeIndex].amountWithdrawn = _staker[_stakeIndex].amountWithdrawn.add(\\n            rewardPerStake\\n        );\\n    }\\n\\n    function withdrawIndexedPrize(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex\\n    ) \\n        public \\n    {\\n        if (_staker.length == 0) return;\\n        if (_staker[_stakeIndex].prizeRewardWithdrawn) return;\\n\\n        _staker[_stakeIndex].prizeRewardWithdrawn = true;\\n    }\\n\\n    function withdrawIndexedStakedBalance(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex\\n    ) \\n        public\\n    {\\n        if (_staker.length == 0) return;\\n        if (_stakeIndex >= _staker.length) return;\\n\\n        _staker[_stakeIndex].didUnstake = true;\\n    }\\n\\n    function getIndexedStakedBalance(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_staker.length == 0) return 0;\\n        if (_stakeIndex >= _staker.length) return 0; \\n\\n        uint256 totalStakedBalance = 0;\\n\\n        if (!_staker[_stakeIndex].didUnstake) {\\n            totalStakedBalance = totalStakedBalance.add(\\n                _staker[_stakeIndex].stakedBalance\\n            );\\n        }\\n\\n        return totalStakedBalance;\\n    }\\n\\n    function getIndexedStakingReturn(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    ) \\n        public\\n        view \\n        returns (uint256) \\n    {\\n        if (_staker.length == 0) return 0;\\n        if (_stakeIndex >= _staker.length) return 0;\\n\\n        uint256 reward = 0;\\n        \\n        uint256 rewardPerStake = CalculateRewardLib._getStakingRewardPerStake(\\n            _staker, \\n            _stakeIndex,\\n            _lps\\n        );\\n        reward = reward.add(rewardPerStake);\\n\\n        return reward;\\n    }\\n\\n    function getIndexedPrize(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex,\\n        StakingPoolStorageStructure.LibParams storage _lps,\\n        StakingPoolStorageStructure.PrizeRewardRate[] storage _prizeRewardRates\\n    )\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        if (!_lps.isMatured) return (0, 0);\\n\\n        if (_staker.length == 0) return (0, 0);\\n\\n        if (_stakeIndex >= _staker.length) return (0,0);\\n\\n        if (_staker[_stakeIndex].prizeRewardWithdrawn) return (0, 0);\\n\\n        uint256 maturingWrappedTokenPrizeAmount =\\n            (_lps.usdPrizeAmount.mul(10**_lps.oracleDecimals)).div(_lps.maturingPrice);\\n\\n        uint256 reward = 0;\\n        uint256 wrappedTokenReward = 0;\\n\\n        uint256 _percent = CalculateRewardLib._getPercentageReward(\\n            _staker[_stakeIndex].rank,\\n            _prizeRewardRates\\n        );\\n\\n        reward = reward.add(\\n                        _lps.prizeAmount.mulBP(_percent)\\n                    );\\n\\n        wrappedTokenReward = wrappedTokenReward.add(\\n                        maturingWrappedTokenPrizeAmount\\n                            .mulBP(_percent)\\n                    );            \\n\\n        if (_lps.collaborativeReward > 0) {\\n            reward = reward.addBP(_lps.collaborativeReward);\\n            wrappedTokenReward = wrappedTokenReward.addBP(_lps.collaborativeReward);\\n        }\\n\\n        return (reward, wrappedTokenReward);\\n    }\\n}\\n\\n\",\"keccak256\":\"0xbc6ba78bfd18f5ed2e8b635f25eb3934e224a6ccea017141f9354ba2112e6db8\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615244806100206000396000f3fe608060405234801561001057600080fd5b50600436106104335760003560e01c80638cf0e21e11610236578063c6c1decd1161013b578063e8153c93116100c3578063f3d9dc0d11610087578063f3d9dc0d146107f9578063f5e96fc914610801578063f8e829c314610809578063f8eeed6214610811578063fd5e6dd11461081957610433565b8063e8153c93146107ae578063eb850ae1146107b6578063f0141d84146107be578063f1b17a8b146107d3578063f2fde38b146107e657610433565b8063de09ee201161010a578063de09ee2014610756578063df7f92e014610777578063e08186691461077f578063e425df8c1461079e578063e68b52e7146107a657610433565b8063c6c1decd1461072b578063d025188b14610733578063d49fab8a1461073b578063d7efb6b71461074e57610433565b8063a7a48681116101be578063b1dd61b61161018d578063b1dd61b6146106f8578063b7b3017014610700578063b88a802f14610713578063bece75321461071b578063c12010541461072357610433565b8063a7a48681146106b7578063a8f7b346146106ca578063aa7bcb57146106dd578063b1b1e1c0146106e557610433565b8063996c6cc311610205578063996c6cc314610677578063a08b2c791461067f578063a118c9a714610687578063a35ef3a71461069a578063a4e2d634146106af57610433565b80638cf0e21e146106575780638da5cb5b1461065f5780638e15f4731461066757806395c2ba471461066f57610433565b80634ddc1bdc1161033c578063785df1f8116102c45780637f2b6a0d116102935780637f2b6a0d1461060f578063817b1cd214610617578063850fa7cb1461061f5780638a9920b7146106475780638bfbbcbe1461064f57610433565b8063785df1f8146105d9578063785fa627146105e157806378f4d413146105e95780637b0472f0146105fc57610433565b80636847d0c51161030b5780636847d0c5146105b15780636b036f45146105b9578063715018a6146105c1578063725c9c49146105c957806373f31703146105d157610433565b80634ddc1bdc1461057b5780634e8bfdaa1461058e57806351eacbf0146105965780635d2631e21461059e57610433565b806337c4f6a4116103bf57806343352d611161038e57806343352d6114610524578063444a49021461053a57806345e913191461054d5780634bc4eeb2146105605780634c7c77fc1461056857610433565b806337c4f6a4146104e3578063395b3dac146104f65780633fcdd82c146105095780634026478e1461051c57610433565b8063238a6c7411610406578063238a6c74146104935780632aa8195e146104a85780632d42cf7d146104b05780632d5cd1d6146104ba57806331e244e5146104db57610433565b80630d668087146104385780630f4ef8a61461045657806322f3e2d41461046b5780632342e48014610480575b600080fd5b61044061082c565b60405161044d91906147ec565b60405180910390f35b61045e610832565b60405161044d9190614732565b610473610841565b60405161044d9190614871565b61044061048e3660046143e5565b610850565b61049b6108fe565b60405161044d919061487c565b61045e61098c565b6104b861099b565b005b6104cd6104c8366004614363565b610b01565b60405161044d9291906147f5565b6104b8610bb5565b6104b86104f1366004614363565b610c08565b6104cd610504366004614607565b610c99565b6104406105173660046145d7565b610cfa565b6104b8610dbe565b61052c610e00565b60405161044d929190614796565b6104b8610548366004614446565b610fbd565b61047361055b3660046143e5565b6112af565b610473611401565b610440610576366004614607565b61140f565b6104b8610589366004614607565b611493565b61044061157f565b610440611585565b6104b86105ac366004614410565b61158b565b610440611675565b61044061167b565b6104b8611681565b61045e6116ca565b6104406116d9565b6104406116df565b6104406116e5565b6104406105f7366004614363565b6116eb565b6104b861060a366004614607565b611794565b610473611c13565b610440611c24565b61063261062d3660046143e5565b611c2a565b60405161044d99989796959493929190615058565b6104b8611c98565b6104b8611ee0565b610473611f5c565b61045e611f6f565b610440611f7e565b610440612025565b61045e61202a565b610473612039565b6104b861069536600461459f565b612042565b6106a261212b565b60405161044d9190614783565b6104736121da565b6104b86106c53660046145d7565b6121ea565b6104b86106d836600461439b565b612292565b610440612347565b6104b86106f33660046145d7565b61234d565b61049b612c0c565b6104cd61070e3660046143e5565b612c19565b6104b8612cd0565b61045e6134f9565b610440613508565b61045e61358e565b61044061359d565b6104b861074936600461447c565b6135a3565b610473613c30565b6107696107643660046145d7565b613c42565b60405161044d92919061476a565b6104b8613c7a565b610787613cc6565b60405161044d9b9a9998979695949392919061509b565b610440613cf3565b610440613cf9565b61045e613cff565b610440613d0e565b6107c6613d14565b60405161044d91906150ed565b6104cd6107e13660046145d7565b613d9d565b6104b86107f4366004614363565b613dcb565b610440613e39565b61045e613e3f565b610440613e4e565b610440613e7f565b6107696108273660046145d7565b613e85565b60815481565b607c546001600160a01b031681565b608f5462010000900460ff1681565b6001600160a01b0382166000908152607a60205260408082209051634f16042360e01b81528291736A1B5334Ee77F1E3dBA0B62Fd43B8B9f0Ab9790791634f160423916108a4918790606d90600401614803565b60206040518083038186803b1580156108bc57600080fd5b505af41580156108d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f491906145ef565b9150505b92915050565b607e805461090b90615169565b80601f016020809104026020016040519081016040528092919081815260200182805461093790615169565b80156109845780601f1061095957610100808354040283529160200191610984565b820191906000526020600020905b81548152906001019060200180831161096757829003601f168201915b505050505081565b606a546001600160a01b031681565b606b546001600160a01b03166109af613e95565b6001600160a01b0316146109de5760405162461bcd60e51b81526004016109d590614d66565b60405180910390fd5b6082546081546080546109f191906150fb565b6109fb91906150fb565b421015610a1a5760405162461bcd60e51b81526004016109d590614a50565b60865415610a4657610a2a613e4e565b610a465760405162461bcd60e51b81526004016109d590614f12565b60785415610a6d57607954610a6d5760405162461bcd60e51b81526004016109d590614a9c565b608b5415610a9357610a83609054608c5461140f565b610a9357608b54608d8190556074555b608f805464ff000000001963ff000000199091166301000000171664010000000090811791829055607680549190920460ff1615156101000261ff00199091161790556040517fe8ef7a17c92d025d9c1ead1c6b3ca3b44d3283d0ee954f615c5c476911f629a590600090a1565b6001600160a01b0381166000908152607a602052604080822090516332a1b32160e01b815282918291829173A3C5E53644D9ef40506bBDD3111e8A390F5fc1D8916332a1b32191610b5a91606d90607790600401614803565b604080518083038186803b158015610b7157600080fd5b505af4158015610b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba99190614628565b90945092505050915091565b606b546001600160a01b0316610bc9613e95565b6001600160a01b031614610bef5760405162461bcd60e51b81526004016109d590614d66565b608f805462ff00ff19166001179055610c06613e99565b565b600054610100900460ff1680610c21575060005460ff16155b610c3d5760405162461bcd60e51b81526004016109d590614d18565b600054610100900460ff16158015610c68576000805460ff1961ff0019909116610100171660011790555b606580546001600160a01b0319166001600160a01b0384161790558015610c95576000805461ff00191690555b5050565b60008060008360875411610cae576000610cbb565b608754610cbb9085613ed7565b905080610ccf576000859250925050610cf3565b610cd98582613ee3565b610ced610ce68784613ee3565b8790613ed7565b92509250505b9250929050565b60675460009081906001600160a01b031663d06ca61f84610d1961212b565b6040518363ffffffff1660e01b8152600401610d36929190614ffb565b60006040518083038186803b158015610d4e57600080fd5b505afa158015610d62573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d8a91908101906144e5565b905080600181518110610dad57634e487b7160e01b600052603260045260246000fd5b60200260200101519150505b919050565b606b546001600160a01b0316610dd2613e95565b6001600160a01b031614610df85760405162461bcd60e51b81526004016109d590614d66565b610c06613e99565b606080600060788054905067ffffffffffffffff811115610e3157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e5a578160200160208202803683370190505b5060785490915060009067ffffffffffffffff811115610e8a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610eb3578160200160208202803683370190505b50905060005b607854811015610fb35760788181548110610ee457634e487b7160e01b600052603260045260246000fd5b600091825260209091206002909102015483516001600160a01b0390911690849083908110610f2357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505060788181548110610f6457634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154828281518110610f9657634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610fab816151a4565b915050610eb9565b5090925090509091565b606b546001600160a01b0316610fd1613e95565b6001600160a01b031614610ff75760405162461bcd60e51b81526004016109d590614d66565b60825460815460805461100a91906150fb565b61101491906150fb565b4210156110335760405162461bcd60e51b81526004016109d590614cc2565b6079541561104757611047607960006142af565b60005b601981101561122057600083826019811061107557634e487b7160e01b600052603260045260246000fd5b6020020160208101906110889190614363565b6001600160a01b0316141561109c57611220565b607960405180604001604052808584601981106110c957634e487b7160e01b600052603260045260246000fd5b6020020160208101906110dc9190614363565b6001600160a01b0316815260200184846019811061110a57634e487b7160e01b600052603260045260246000fd5b60209081029190910135909152825460018082018555600094855293829020835160029092020180546001600160a01b0319166001600160a01b03909216919091178155910151908201556111609082906150fb565b607a600085846019811061118457634e487b7160e01b600052603260045260246000fd5b6020020160208101906111979190614363565b6001600160a01b03166001600160a01b031681526020019081526020016000208383601981106111d757634e487b7160e01b600052603260045260246000fd5b6020020135815481106111fa57634e487b7160e01b600052603260045260246000fd5b600091825260209091206006600890920201015580611218816151a4565b91505061104a565b6077805482919061123390600190615152565b8154811061125157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000015410156112815760405162461bcd60e51b81526004016109d590614ea8565b6040517f5c243cc6e4f210bf2dd86b8eca0ca891d3f8ad2eb09fbf91735eb348bc199c7e90600090a1505050565b6001600160a01b0382166000908152607a6020908152604080832080548251818502810185019093528083528493849084015b8282101561137457600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e0850152610100918290041615159083015290835290920191016112e2565b505050509050600081511161139b5760405162461bcd60e51b81526004016109d590614ddc565b805183106113bb5760405162461bcd60e51b81526004016109d5906148cf565b8083815181106113db57634e487b7160e01b600052603260045260246000fd5b60200260200101516101000151156113f75760019150506108f8565b5060009392505050565b608f54610100900460ff1681565b600082821115611421575060006108f8565b608a5483111561146357608a546114388484613ed7565b11611445575060006108f8565b608a5461145c906114568585613ed7565b90613ed7565b90506108f8565b608a546114708484613efb565b1061147d575060006108f8565b61145c61148a8484613efb565b608a5490613ed7565b606b546001600160a01b03166114a7613e95565b6001600160a01b0316146114cd5760405162461bcd60e51b81526004016109d590614d66565b6000608654116114ef5760405162461bcd60e51b81526004016109d5906149c7565b6000821161150f5760405162461bcd60e51b81526004016109d590614c5c565b4281101561152f5760405162461bcd60e51b81526004016109d590614acc565b60006115396116ca565b90506115458184613f07565b600061155084610cfa565b9050600061156a6115638361012c613ee3565b8390613ed7565b905061157830868387613fd1565b5050505050565b60825481565b60835481565b606b546001600160a01b031661159f613e95565b6001600160a01b0316146115c55760405162461bcd60e51b81526004016109d590614d66565b607b546001600160a01b03848116911614156115f35760405162461bcd60e51b81526004016109d590614c1b565b60405163a9059cbb60e01b815283906001600160a01b0382169063a9059cbb90611623908590879060040161476a565b602060405180830381600087803b15801561163d57600080fd5b505af1158015611651573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157891906145bb565b60875481565b60885481565b611689613e95565b6001600160a01b031661169a611f6f565b6001600160a01b0316146116c05760405162461bcd60e51b81526004016109d590614da7565b610c066000614077565b6067546001600160a01b031690565b60865481565b60905481565b60855481565b6001600160a01b0381166000908152607a60205260408082209051630d46757760e41b8152829173A3C5E53644D9ef40506bBDD3111e8A390F5fc1D89163d46757709161173d91606d906004016147f5565b60206040518083038186803b15801561175557600080fd5b505af4158015611769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178d91906145ef565b9392505050565b608f5462010000900460ff1680156117ad575060805442115b6117c95760405162461bcd60e51b81526004016109d590614e27565b6081546080546117d991906150fb565b42106117f75760405162461bcd60e51b81526004016109d590614933565b608f546301000000900460ff16156118215760405162461bcd60e51b81526004016109d590614906565b6088548210156118435760405162461bcd60e51b81526004016109d590614e5e565b608854607b546040805163771a3a1d60e01b815290516000926001600160a01b03169163771a3a1d91600480830192602092919082900301818787803b15801561188c57600080fd5b505af11580156118a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c491906145ef565b607b549091506000906001600160a01b031663d1ecfc686118e3613e95565b6040518263ffffffff1660e01b81526004016118ff9190614732565b602060405180830381600087803b15801561191957600080fd5b505af115801561192d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195191906145bb565b6119645761195f8583613ee3565b611967565b60005b6083549091506119779084613efb565b6119908261145688608954613efb90919063ffffffff16565b11156119ae5760405162461bcd60e51b81526004016109d590614bd5565b60006119ba8684610c99565b607b549097509091506001600160a01b03166323b872dd6119d9613e95565b306119e4858b6150fb565b6040518463ffffffff1660e01b8152600401611a0293929190614746565b602060405180830381600087803b158015611a1c57600080fd5b505af1158015611a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5491906145bb565b50611a5f8683613ed7565b95508015611b6057607b5460408051634a5db0a960e01b815290516001600160a01b039092169163a9059cbb918391634a5db0a9916004808201926020929091908290030181600087803b158015611ab657600080fd5b505af1158015611aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aee919061437f565b836040518363ffffffff1660e01b8152600401611b0c92919061476a565b602060405180830381600087803b158015611b2657600080fd5b505af1158015611b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5e91906145bb565b505b6000607a6000611b6e613e95565b6001600160a01b031681526020810191909152604001600020549050611b9c611b95613e95565b88886140c9565b608954611ba99088613efb565b608981905560835411611bbe57611bbe613e99565b611bc6613e95565b6001600160a01b03167ff556991011e831bcfac4f406d547e5e32cdd98267efab83935230d5f8d02c446888884604051611c0293929190614803565b60405180910390a250505050505050565b608f54640100000000900460ff1681565b60895481565b607a6020528160005260406000208181548110611c4657600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701549598509396509194909391929160ff8082169161010090041689565b608f5460ff16611cba5760405162461bcd60e51b81526004016109d590614c93565b60007356Bc0AbAFf078E1a8fA340B2446FE2F00f2ec9C163066f1dee607a6000611ce2613e95565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401611d1e91906147ec565b60206040518083038186803b158015611d3657600080fd5b505af4158015611d4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6e91906145ef565b90508015611edd5773A3C5E53644D9ef40506bBDD3111e8A390F5fc1D863f66d9a4d607a6000611d9c613e95565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401611dd891906147ec565b60006040518083038186803b158015611df057600080fd5b505af4158015611e04573d6000803e3d6000fd5b5050607b546001600160a01b0316915063a9059cbb9050611e23613e95565b836040518363ffffffff1660e01b8152600401611e4192919061476a565b602060405180830381600087803b158015611e5b57600080fd5b505af1158015611e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9391906145bb565b50611e9c613e95565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd82604051611ed491906147ec565b60405180910390a25b50565b606b546001600160a01b0316611ef4613e95565b6001600160a01b031614611f1a5760405162461bcd60e51b81526004016109d590614d66565b608f805465ff00000000001916650100000000001790556040517f9331b2a38c658c57a39ea19b2709d928c28a12cc8fbb838d12b85148550f937d90600090a1565b608f546601000000000000900460ff1681565b6033546001600160a01b031690565b600080606560009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611fcf57600080fd5b505afa158015611fe3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612007919061464b565b505050915050600081121561201d57600061201f565b805b91505090565b600581565b607d546001600160a01b031681565b608f5460ff1681565b606b546001600160a01b0316612056613e95565b6001600160a01b03161461207c5760405162461bcd60e51b81526004016109d590614d66565b608f5460ff6201000090910416151581151514156120ac5760405162461bcd60e51b81526004016109d590614b4f565b608f805462ff00001916620100008315158102919091179182905560ff910416156120ff576040517f3d31b97eef590df350bb2cdbc390034c613c9f23ea6ae1906682628c85248b5390600090a1611edd565b6040517f763d36bfedf6707954f8bb39c2011a58a47a54844f2b3cdcd326c71cad0aa75390600090a150565b60408051600280825260608083018452926000929190602083019080368337505060685482519293506001600160a01b03169183915060009061217e57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526069548251911690829060019081106121bd57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152905090565b608f546301000000900460ff1681565b606b546001600160a01b03166121fe613e95565b6001600160a01b0316146122245760405162461bcd60e51b81526004016109d590614d66565b60825460815460805461223791906150fb565b61224191906150fb565b4210156122605760405162461bcd60e51b81526004016109d590614f87565b606c546001600160a01b031661227f57608a8190556070819055611edd565b612287611f7e565b608a81905560705550565b600054610100900460ff16806122ab575060005460ff16155b6122c75760405162461bcd60e51b81526004016109d590614d18565b600054610100900460ff161580156122f2576000805460ff1961ff0019909116610100171660011790555b606780546001600160a01b038087166001600160a01b0319928316179092556068805486841690831617905560698054928516929091169190911790558015612341576000805461ff00191690555b50505050565b60845481565b80607a600061235a613e95565b6001600160a01b0316815260208101919091526040016000205410156123925760405162461bcd60e51b81526004016109d590614f59565b607a600061239e613e95565b6001600160a01b031681526020810191909152604001600020546123d45760405162461bcd60e51b81526004016109d590614afa565b6000736A1B5334Ee77F1E3dBA0B62Fd43B8B9f0Ab97907634f160423607a60006123fc613e95565b6001600160a01b03166001600160a01b0316815260200190815260200160002084606d6040518463ffffffff1660e01b815260040161243d93929190614803565b60206040518083038186803b15801561245557600080fd5b505af4158015612469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248d91906145ef565b9050600080736A1B5334Ee77F1E3dBA0B62Fd43B8B9f0Ab9790763f7ac9cba607a60006124b8613e95565b6001600160a01b03166001600160a01b0316815260200190815260200160002086606d60776040518563ffffffff1660e01b81526004016124fc9493929190614819565b604080518083038186803b15801561251357600080fd5b505af4158015612527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254b9190614628565b9092509050600061255c84846150fb565b608f54909150640100000000900460ff16156129c8576086541561270457811561270457736A1B5334Ee77F1E3dBA0B62Fd43B8B9f0Ab979076393aaeaf9607a60006125a6613e95565b6001600160a01b03166001600160a01b03168152602001908152602001600020876040518363ffffffff1660e01b81526004016125e49291906147f5565b60006040518083038186803b1580156125fc57600080fd5b505af4158015612610573d6000803e3d6000fd5b5050607d546001600160a01b0316915063a9059cbb905061262f613e95565b846040518363ffffffff1660e01b815260040161264d92919061476a565b602060405180830381600087803b15801561266757600080fd5b505af115801561267b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269f91906145bb565b6126bb5760405162461bcd60e51b81526004016109d590614fdd565b6126c3613e95565b6001600160a01b03167fd93fc6d1e8779271f55cdb0d5f7b6b05be64a2226a1ad050d3036f5609c1cdcf836040516126fb91906147ec565b60405180910390a25b821561279f57736A1B5334Ee77F1E3dBA0B62Fd43B8B9f0Ab979076393aaeaf9607a6000612730613e95565b6001600160a01b03166001600160a01b03168152602001908152602001600020876040518363ffffffff1660e01b815260040161276e9291906147f5565b60006040518083038186803b15801561278657600080fd5b505af415801561279a573d6000803e3d6000fd5b505050505b6000736A1B5334Ee77F1E3dBA0B62Fd43B8B9f0Ab97907635eac7af3607a60006127c7613e95565b6001600160a01b03166001600160a01b03168152602001908152602001600020886040518363ffffffff1660e01b81526004016128059291906147f5565b60206040518083038186803b15801561281d57600080fd5b505af4158015612831573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285591906145ef565b905080156129c657736A1B5334Ee77F1E3dBA0B62Fd43B8B9f0Ab9790763ec8ecc02607a6000612883613e95565b6001600160a01b03166001600160a01b03168152602001908152602001600020886040518363ffffffff1660e01b81526004016128c19291906147f5565b60006040518083038186803b1580156128d957600080fd5b505af41580156128ed573d6000803e3d6000fd5b5050607b546001600160a01b0316915063a9059cbb905061290c613e95565b836040518363ffffffff1660e01b815260040161292a92919061476a565b602060405180830381600087803b15801561294457600080fd5b505af1158015612958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297c91906145bb565b50612985613e95565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd826040516129bd91906147ec565b60405180910390a25b505b801561157857607b54607c546040516370a0823160e01b815283926001600160a01b03908116926370a0823192612a059290911690600401614732565b60206040518083038186803b158015612a1d57600080fd5b505afa158015612a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5591906145ef565b1015612a735760405162461bcd60e51b81526004016109d590614b91565b736A1B5334Ee77F1E3dBA0B62Fd43B8B9f0Ab9790763eaff3050607a6000612a99613e95565b6001600160a01b03166001600160a01b0316815260200190815260200160002087606d6040518463ffffffff1660e01b8152600401612ada93929190614803565b60006040518083038186803b158015612af257600080fd5b505af4158015612b06573d6000803e3d6000fd5b5050607c546001600160a01b0316915063e4e103dc9050612b25613e95565b836040518363ffffffff1660e01b8152600401612b4392919061476a565b600060405180830381600087803b158015612b5d57600080fd5b505af1158015612b71573d6000803e3d6000fd5b50505050612b7d613e95565b6001600160a01b03167f115e2fe760f98d4fd0828d7741ae2070e7db700f892efbfe98448b53ac58388685604051612bb591906147ec565b60405180910390a2612bc5613e95565b6001600160a01b03167f723b06f6c3a94dc82019852e6aa01c0241fba5f84410b9003ddc3440ad499e5984604051612bfd91906147ec565b60405180910390a25050505050565b607f805461090b90615169565b6001600160a01b0382166000908152607a60205260408082209051637bd64e5d60e11b8152829182918291736A1B5334Ee77F1E3dBA0B62Fd43B8B9f0Ab979079163f7ac9cba91612c74918990606d90607790600401614819565b604080518083038186803b158015612c8b57600080fd5b505af4158015612c9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc39190614628565b9097909650945050505050565b600073A3C5E53644D9ef40506bBDD3111e8A390F5fc1D863d4675770607a6000612cf8613e95565b6001600160a01b03166001600160a01b03168152602001908152602001600020606d6040518363ffffffff1660e01b8152600401612d379291906147f5565b60206040518083038186803b158015612d4f57600080fd5b505af4158015612d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8791906145ef565b905060008073A3C5E53644D9ef40506bBDD3111e8A390F5fc1D86332a1b321607a6000612db2613e95565b6001600160a01b03166001600160a01b03168152602001908152602001600020606d60776040518463ffffffff1660e01b8152600401612df493929190614803565b604080518083038186803b158015612e0b57600080fd5b505af4158015612e1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e439190614628565b90925090506000612e5484846150fb565b608f54909150640100000000900460ff16156132b85760865415612ffa578115612ffa5773A3C5E53644D9ef40506bBDD3111e8A390F5fc1D86347dc9eee607a6000612e9e613e95565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401612eda91906147ec565b60006040518083038186803b158015612ef257600080fd5b505af4158015612f06573d6000803e3d6000fd5b5050607d546001600160a01b0316915063a9059cbb9050612f25613e95565b846040518363ffffffff1660e01b8152600401612f4392919061476a565b602060405180830381600087803b158015612f5d57600080fd5b505af1158015612f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9591906145bb565b612fb15760405162461bcd60e51b81526004016109d590614b31565b612fb9613e95565b6001600160a01b03167fd93fc6d1e8779271f55cdb0d5f7b6b05be64a2226a1ad050d3036f5609c1cdcf83604051612ff191906147ec565b60405180910390a25b82156130935773A3C5E53644D9ef40506bBDD3111e8A390F5fc1D86347dc9eee607a6000613026613e95565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b815260040161306291906147ec565b60006040518083038186803b15801561307a57600080fd5b505af415801561308e573d6000803e3d6000fd5b505050505b60007356Bc0AbAFf078E1a8fA340B2446FE2F00f2ec9C163066f1dee607a60006130bb613e95565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b81526004016130f791906147ec565b60206040518083038186803b15801561310f57600080fd5b505af4158015613123573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061314791906145ef565b905080156132b65773A3C5E53644D9ef40506bBDD3111e8A390F5fc1D863f66d9a4d607a6000613175613e95565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b81526004016131b191906147ec565b60006040518083038186803b1580156131c957600080fd5b505af41580156131dd573d6000803e3d6000fd5b5050607b546001600160a01b0316915063a9059cbb90506131fc613e95565b836040518363ffffffff1660e01b815260040161321a92919061476a565b602060405180830381600087803b15801561323457600080fd5b505af1158015613248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326c91906145bb565b50613275613e95565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd826040516132ad91906147ec565b60405180910390a25b505b801561234157607b54607c546040516370a0823160e01b815283926001600160a01b03908116926370a08231926132f59290911690600401614732565b60206040518083038186803b15801561330d57600080fd5b505afa158015613321573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061334591906145ef565b10156133635760405162461bcd60e51b81526004016109d590614b91565b73A3C5E53644D9ef40506bBDD3111e8A390F5fc1D8634142c652607a6000613389613e95565b6001600160a01b03166001600160a01b03168152602001908152602001600020606d6040518363ffffffff1660e01b81526004016133c89291906147f5565b60006040518083038186803b1580156133e057600080fd5b505af41580156133f4573d6000803e3d6000fd5b5050607c546001600160a01b0316915063e4e103dc9050613413613e95565b836040518363ffffffff1660e01b815260040161343192919061476a565b600060405180830381600087803b15801561344b57600080fd5b505af115801561345f573d6000803e3d6000fd5b5050505061346b613e95565b6001600160a01b03167f115e2fe760f98d4fd0828d7741ae2070e7db700f892efbfe98448b53ac583886856040516134a391906147ec565b60405180910390a26134b3613e95565b6001600160a01b03167f723b06f6c3a94dc82019852e6aa01c0241fba5f84410b9003ddc3440ad499e59846040516134eb91906147ec565b60405180910390a250505050565b606c546001600160a01b031681565b6066546040516370a0823160e01b81526000916001600160a01b0316906370a0823190613539903090600401614732565b60206040518083038186803b15801561355157600080fd5b505afa158015613565573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061358991906145ef565b905090565b606b546001600160a01b031681565b608a5481565b608f5462010000900460ff1680156135bc575060805442115b6135d85760405162461bcd60e51b81526004016109d590614e27565b6081546080546135e891906150fb565b42106136065760405162461bcd60e51b81526004016109d590614933565b608f546301000000900460ff16156136305760405162461bcd60e51b81526004016109d590614906565b82811461364f5760405162461bcd60e51b81526004016109d590614975565b6000805b848110156136f05760885486868381811061367e57634e487b7160e01b600052603260045260246000fd5b9050602002013510156136a35760405162461bcd60e51b81526004016109d590614e5e565b6136dc8686838181106136c657634e487b7160e01b600052603260045260246000fd5b9050602002013583613efb90919063ffffffff16565b9150806136e8816151a4565b915050613653565b50608854607b546040805163771a3a1d60e01b815290516000926001600160a01b03169163771a3a1d91600480830192602092919082900301818787803b15801561373a57600080fd5b505af115801561374e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377291906145ef565b607b549091506000906001600160a01b031663d1ecfc68613791613e95565b6040518263ffffffff1660e01b81526004016137ad9190614732565b602060405180830381600087803b1580156137c757600080fd5b505af11580156137db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137ff91906145bb565b6138125761380d8483613ee3565b613815565b60005b6083549091506138259084613efb565b61383e8261145687608954613efb90919063ffffffff16565b111561385c5760405162461bcd60e51b81526004016109d590614bd5565b60006138688584610c99565b607b549096509091506001600160a01b03166323b872dd613887613e95565b30613892858a6150fb565b6040518463ffffffff1660e01b81526004016138b093929190614746565b602060405180830381600087803b1580156138ca57600080fd5b505af11580156138de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061390291906145bb565b5061390d8583613ed7565b94508015613a0e57607b5460408051634a5db0a960e01b815290516001600160a01b039092169163a9059cbb918391634a5db0a9916004808201926020929091908290030181600087803b15801561396457600080fd5b505af1158015613978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061399c919061437f565b836040518363ffffffff1660e01b81526004016139ba92919061476a565b602060405180830381600087803b1580156139d457600080fd5b505af11580156139e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a0c91906145bb565b505b6000607a6000613a1c613e95565b6001600160a01b03168152602081019190915260400160009081205491505b89811015613b875760008b8b83818110613a6557634e487b7160e01b600052603260045260246000fd5b607b54602090910292909201359250506001600160a01b031663d1ecfc68613a8b613e95565b6040518263ffffffff1660e01b8152600401613aa79190614732565b602060405180830381600087803b158015613ac157600080fd5b505af1158015613ad5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613af991906145bb565b613b0c57613b078187613ee3565b613b0f565b60005b9450613b1b8187610c99565b9094509050613b2a8186613ed7565b9050613b64613b37613e95565b828c8c86818110613b5857634e487b7160e01b600052603260045260246000fd5b905060200201356140c9565b608954613b719082613efb565b6089555080613b7f816151a4565b915050613a3b565b5060006001607a6000613b98613e95565b6001600160a01b03168152602081019190915260400160002054613bbc9190615152565b905060835460895410613bd157613bd1613e99565b613bd9613e95565b6001600160a01b03167f852fe7a2ad7b2c8c0a0e9b927734feb1acc3e8bc608b8921d4c4768c6193c33b8c8c8c8c8787604051613c1b96959493929190614834565b60405180910390a25050505050505050505050565b608f5465010000000000900460ff1681565b60798181548110613c5257600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b606b546001600160a01b0316613c8e613e95565b6001600160a01b031614613cb45760405162461bcd60e51b81526004016109d590614d66565b606c80546001600160a01b0319169055565b606d54606e54606f5460705460715460725460735460745460755460765460ff808216916101009004168b565b608b5481565b608e5481565b607b546001600160a01b031681565b608c5481565b600080606560009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015613d6557600080fd5b505afa158015613d79573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201f919061469a565b60778181548110613dad57600080fd5b60009182526020909120600290910201805460019091015490915082565b613dd3613e95565b6001600160a01b0316613de4611f6f565b6001600160a01b031614613e0a5760405162461bcd60e51b81526004016109d590614da7565b6001600160a01b038116613e305760405162461bcd60e51b81526004016109d590614a0a565b611edd81614077565b608d5481565b6066546001600160a01b031690565b607d546040516370a0823160e01b81526000916001600160a01b0316906370a0823190613539903090600401614732565b60805481565b60788181548110613c5257600080fd5b3390565b608f805463ff000000191663010000001790556040517f2e136745550967f28b779ce8c395ca060a2f844edfb5b06631fe677f66f9e30590600090a1565b600061178d8284615152565b600061178d612710613ef5858561423d565b90614249565b600061178d82846150fb565b60665460405163095ea7b360e01b81526001600160a01b039091169063095ea7b390613f39908590859060040161476a565b602060405180830381600087803b158015613f5357600080fd5b505af1158015613f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f8b91906145bb565b50816001600160a01b03167fd77df63d9076d067d9fd7af16c3d67db48b84064c3314f5900ae919922d364a182604051613fc591906147ec565b60405180910390a25050565b6001600160a01b038416613fe457600080fd5b6067546001600160a01b03166338ed17398484613fff61212b565b88866040518663ffffffff1660e01b815260040161402195949392919061501c565b600060405180830381600087803b15801561403b57600080fd5b505af115801561404f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261157891908101906144e5565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040805180820182526001600160a01b038086168083526000908152607a602081815285832080548287019081526078805460018181018355918752975160029889027f8dc6fb69531d98d70dc0420e638d2dfd04e09e1ec783ede9aac77da9c5a0dac481018054929099166001600160a01b03199092169190911790975590517f8dc6fb69531d98d70dc0420e638d2dfd04e09e1ec783ede9aac77da9c5a0dac5909601959095559181528551610120810187528881524281830181815297820185815260608301918252608083018a815260001960a0850181815260c0860191825260e086018981526101008781018b81528a54808e018c559a8c5298909a20965160089099029096019788559a51988701989098559051978501979097555160038401559451600483015594516005820155915160068301559151600790910180549351151590920261ff001991151560ff199490941693909317169190911790556142388183614255565b505050565b600061178d8284615133565b600061178d8284615113565b60785460009061426790600190615152565b9050806142745760908390555b6089546142a7906142859084613efb565b613ef5614292868661423d565b6089546090546142a19161423d565b90613efb565b609055505050565b5080546000825560020290600052602060002090810190611edd91905b808211156142f15780546001600160a01b0319168155600060018201556002016142cc565b5090565b8061032081018310156108f857600080fd5b60008083601f840112614318578182fd5b50813567ffffffffffffffff81111561432f578182fd5b6020830191508360208083028501011115610cf357600080fd5b805169ffffffffffffffffffff81168114610db957600080fd5b600060208284031215614374578081fd5b813561178d816151eb565b600060208284031215614390578081fd5b815161178d816151eb565b6000806000606084860312156143af578182fd5b83356143ba816151eb565b925060208401356143ca816151eb565b915060408401356143da816151eb565b809150509250925092565b600080604083850312156143f7578182fd5b8235614402816151eb565b946020939093013593505050565b600080600060608486031215614424578283fd5b833561442f816151eb565b92506020840135915060408401356143da816151eb565b6000806106408385031215614459578182fd5b61446384846142f5565b91506144738461032085016142f5565b90509250929050565b60008060008060408587031215614491578081fd5b843567ffffffffffffffff808211156144a8578283fd5b6144b488838901614307565b909650945060208701359150808211156144cc578283fd5b506144d987828801614307565b95989497509550505050565b600060208083850312156144f7578182fd5b825167ffffffffffffffff8082111561450e578384fd5b818501915085601f830112614521578384fd5b815181811115614533576145336151d5565b83810260405185828201018181108582111715614552576145526151d5565b604052828152858101935084860182860187018a1015614570578788fd5b8795505b83861015614592578051855260019590950194938601938601614574565b5098975050505050505050565b6000602082840312156145b0578081fd5b813561178d81615200565b6000602082840312156145cc578081fd5b815161178d81615200565b6000602082840312156145e8578081fd5b5035919050565b600060208284031215614600578081fd5b5051919050565b60008060408385031215614619578182fd5b50508035926020909101359150565b6000806040838503121561463a578182fd5b505080516020909101519092909150565b600080600080600060a08688031215614662578283fd5b61466b86614349565b945060208601519350604086015192506060860151915061468e60808701614349565b90509295509295909350565b6000602082840312156146ab578081fd5b815160ff8116811461178d578182fd5b6000815180845260208085019450808401835b838110156146f35781516001600160a01b0316875295820195908201906001016146ce565b509495945050505050565b81835260006001600160fb1b03831115614716578081fd5b6020830280836020870137939093016020019283525090919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006020825261178d60208301846146bb565b6000604082526147a960408301856146bb565b828103602084810191909152845180835285820192820190845b818110156147df578451835293830193918301916001016147c3565b5090979650505050505050565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b60006080825261484860808301888a6146fe565b828103602084015261485b8187896146fe565b6040840195909552505060600152949350505050565b901515815260200190565b6000602080835283518082850152825b818110156148a85785810183015185820160400152820161488c565b818111156148b95783604083870101525b50601f01601f1916929092016040019392505050565b60208082526017908201527f30333831207468697320696e6465782065786365656473000000000000000000604082015260600190565b6020808252601390820152720c0ccc4c08141bdbdb081a5cc81b1bd8dad959606a1b604082015260600190565b60208082526022908201527f303331362043616e206e6f74207374616b65206166746572206c6f636b206461604082015261746560f01b606082015260800190565b60208082526032908201527f30333135207374616b696e67416d6f756e7420616e642070726564696374696f6040820152710dce640d8cadccee8d040dad2e6dac2e8c6d60731b606082015260800190565b60208082526023908201527f303334302054686520706f6f6c206973206f6e6c7920544f544d2072657761726040820152623232b960e91b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252602c908201527f303336302043616e277420656e6420706f6f6c206265666f726520746865206d60408201526b617475726974792074696d6560a01b606082015260800190565b6020808252601690820152750c0ccd8c88199a5c9cdd081cda1bdd5b19081cdbdc9d60521b604082015260600190565b6020808252601490820152733033343220446561646c696e65206973206c6f7760601b604082015260600190565b6020808252601d908201527f5573657220646f6573206e6f74206861766520616e79207374616b6573000000604082015260600190565b6020808252600490820152630303332360e41b604082015260600190565b60208082526022908201527f4e6f74206368616e67696e67207468652061637469766174696f6e2073746174604082015261757360f01b606082015260800190565b60208082526024908201527f4e6f7420656e6f7567682062616c616e636520696e20726577617264206d616e60408201526330b3b2b960e11b606082015260800190565b60208082526026908201527f303331322043616e2774207374616b652061626f76652073697a6520616c6c6f60408201526531b0ba34b7b760d11b606082015260800190565b60208082526021908201527f3033373020746f74656d732063616e206e6f74206265207472616e73666572656040820152601960fa1b606082015260800190565b60208082526019908201527f3033343120416d6f756e742063616e2774206265207a65726f00000000000000604082015260600190565b60208082526015908201527469742773206e6f7420616e20656d657267656e637960581b604082015260600190565b60208082526036908201527f303339302043616e27742073657420736f72746564207374616b657273206265604082015275666f726520746865206d617475726974792074696d6560501b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526021908201527f303330302063616c6c6572206973206e6f74206120706f6f6c2063726561746f6040820152603960f91b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f3033383020746869732061646472657373206469646e2774207374616b65206960408201526a1b881d1a1a5cc81c1bdbdb60aa1b606082015260800190565b60208082526017908201527f3033313320706f6f6c206973206e6f7420616374697665000000000000000000604082015260600190565b6020808252602a908201527f3033313120416d6f756e742063616e2774206265206c657373207468616e20746040820152696865206d696e696d756d60b01b606082015260800190565b60208082526044908201527f6e756d626572206f6620736f72746564207374616b657273206d75737420626560408201527f206c657373207468616e206f7220657175616c20746f20746865206c6173742060608201526372616e6b60e01b608082015260a00190565b60208082526027908201527f303336312057726170706564546f6b656e2052657761726473206e6f7420617660408201526661696c61626c6560c81b606082015260800190565b602080825260149082015273125b99195e08191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b60208082526036908201527f303335302043616e277420736574206d61747572696e67207072696365206265604082015275666f726520746865206d617475726974792074696d6560501b606082015260800190565b6020808252600490820152630303333360e41b604082015260600190565b60008382526040602083015261501460408301846146bb565b949350505050565b600086825285602083015260a0604083015261503b60a08301866146bb565b6001600160a01b0394909416606083015250608001529392505050565b988952602089019790975260408801959095526060870193909352608086019190915260a085015260c0840152151560e083015215156101008201526101200190565b9a8b5260208b019990995260408a01979097526060890195909552608088019390935260a087019190915260c086015260e0850152610100840152151561012083015215156101408201526101600190565b60ff91909116815260200190565b6000821982111561510e5761510e6151bf565b500190565b60008261512e57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561514d5761514d6151bf565b500290565b600082821015615164576151646151bf565b500390565b60028104600182168061517d57607f821691505b6020821081141561519e57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156151b8576151b86151bf565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611edd57600080fd5b8015158114611edd57600080fdfea2646970667358221220ddbbf88f227c25f52e68237c3d3082325526ff7619e0cef5982f8706353be0e664736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104335760003560e01c80638cf0e21e11610236578063c6c1decd1161013b578063e8153c93116100c3578063f3d9dc0d11610087578063f3d9dc0d146107f9578063f5e96fc914610801578063f8e829c314610809578063f8eeed6214610811578063fd5e6dd11461081957610433565b8063e8153c93146107ae578063eb850ae1146107b6578063f0141d84146107be578063f1b17a8b146107d3578063f2fde38b146107e657610433565b8063de09ee201161010a578063de09ee2014610756578063df7f92e014610777578063e08186691461077f578063e425df8c1461079e578063e68b52e7146107a657610433565b8063c6c1decd1461072b578063d025188b14610733578063d49fab8a1461073b578063d7efb6b71461074e57610433565b8063a7a48681116101be578063b1dd61b61161018d578063b1dd61b6146106f8578063b7b3017014610700578063b88a802f14610713578063bece75321461071b578063c12010541461072357610433565b8063a7a48681146106b7578063a8f7b346146106ca578063aa7bcb57146106dd578063b1b1e1c0146106e557610433565b8063996c6cc311610205578063996c6cc314610677578063a08b2c791461067f578063a118c9a714610687578063a35ef3a71461069a578063a4e2d634146106af57610433565b80638cf0e21e146106575780638da5cb5b1461065f5780638e15f4731461066757806395c2ba471461066f57610433565b80634ddc1bdc1161033c578063785df1f8116102c45780637f2b6a0d116102935780637f2b6a0d1461060f578063817b1cd214610617578063850fa7cb1461061f5780638a9920b7146106475780638bfbbcbe1461064f57610433565b8063785df1f8146105d9578063785fa627146105e157806378f4d413146105e95780637b0472f0146105fc57610433565b80636847d0c51161030b5780636847d0c5146105b15780636b036f45146105b9578063715018a6146105c1578063725c9c49146105c957806373f31703146105d157610433565b80634ddc1bdc1461057b5780634e8bfdaa1461058e57806351eacbf0146105965780635d2631e21461059e57610433565b806337c4f6a4116103bf57806343352d611161038e57806343352d6114610524578063444a49021461053a57806345e913191461054d5780634bc4eeb2146105605780634c7c77fc1461056857610433565b806337c4f6a4146104e3578063395b3dac146104f65780633fcdd82c146105095780634026478e1461051c57610433565b8063238a6c7411610406578063238a6c74146104935780632aa8195e146104a85780632d42cf7d146104b05780632d5cd1d6146104ba57806331e244e5146104db57610433565b80630d668087146104385780630f4ef8a61461045657806322f3e2d41461046b5780632342e48014610480575b600080fd5b61044061082c565b60405161044d91906147ec565b60405180910390f35b61045e610832565b60405161044d9190614732565b610473610841565b60405161044d9190614871565b61044061048e3660046143e5565b610850565b61049b6108fe565b60405161044d919061487c565b61045e61098c565b6104b861099b565b005b6104cd6104c8366004614363565b610b01565b60405161044d9291906147f5565b6104b8610bb5565b6104b86104f1366004614363565b610c08565b6104cd610504366004614607565b610c99565b6104406105173660046145d7565b610cfa565b6104b8610dbe565b61052c610e00565b60405161044d929190614796565b6104b8610548366004614446565b610fbd565b61047361055b3660046143e5565b6112af565b610473611401565b610440610576366004614607565b61140f565b6104b8610589366004614607565b611493565b61044061157f565b610440611585565b6104b86105ac366004614410565b61158b565b610440611675565b61044061167b565b6104b8611681565b61045e6116ca565b6104406116d9565b6104406116df565b6104406116e5565b6104406105f7366004614363565b6116eb565b6104b861060a366004614607565b611794565b610473611c13565b610440611c24565b61063261062d3660046143e5565b611c2a565b60405161044d99989796959493929190615058565b6104b8611c98565b6104b8611ee0565b610473611f5c565b61045e611f6f565b610440611f7e565b610440612025565b61045e61202a565b610473612039565b6104b861069536600461459f565b612042565b6106a261212b565b60405161044d9190614783565b6104736121da565b6104b86106c53660046145d7565b6121ea565b6104b86106d836600461439b565b612292565b610440612347565b6104b86106f33660046145d7565b61234d565b61049b612c0c565b6104cd61070e3660046143e5565b612c19565b6104b8612cd0565b61045e6134f9565b610440613508565b61045e61358e565b61044061359d565b6104b861074936600461447c565b6135a3565b610473613c30565b6107696107643660046145d7565b613c42565b60405161044d92919061476a565b6104b8613c7a565b610787613cc6565b60405161044d9b9a9998979695949392919061509b565b610440613cf3565b610440613cf9565b61045e613cff565b610440613d0e565b6107c6613d14565b60405161044d91906150ed565b6104cd6107e13660046145d7565b613d9d565b6104b86107f4366004614363565b613dcb565b610440613e39565b61045e613e3f565b610440613e4e565b610440613e7f565b6107696108273660046145d7565b613e85565b60815481565b607c546001600160a01b031681565b608f5462010000900460ff1681565b6001600160a01b0382166000908152607a60205260408082209051634f16042360e01b8152829173__$7fd944d8f8efff7c575121b9e933203c2c$__91634f160423916108a4918790606d90600401614803565b60206040518083038186803b1580156108bc57600080fd5b505af41580156108d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f491906145ef565b9150505b92915050565b607e805461090b90615169565b80601f016020809104026020016040519081016040528092919081815260200182805461093790615169565b80156109845780601f1061095957610100808354040283529160200191610984565b820191906000526020600020905b81548152906001019060200180831161096757829003601f168201915b505050505081565b606a546001600160a01b031681565b606b546001600160a01b03166109af613e95565b6001600160a01b0316146109de5760405162461bcd60e51b81526004016109d590614d66565b60405180910390fd5b6082546081546080546109f191906150fb565b6109fb91906150fb565b421015610a1a5760405162461bcd60e51b81526004016109d590614a50565b60865415610a4657610a2a613e4e565b610a465760405162461bcd60e51b81526004016109d590614f12565b60785415610a6d57607954610a6d5760405162461bcd60e51b81526004016109d590614a9c565b608b5415610a9357610a83609054608c5461140f565b610a9357608b54608d8190556074555b608f805464ff000000001963ff000000199091166301000000171664010000000090811791829055607680549190920460ff1615156101000261ff00199091161790556040517fe8ef7a17c92d025d9c1ead1c6b3ca3b44d3283d0ee954f615c5c476911f629a590600090a1565b6001600160a01b0381166000908152607a602052604080822090516332a1b32160e01b815282918291829173__$171d2da81d2a08eb52330533595f0c4998$__916332a1b32191610b5a91606d90607790600401614803565b604080518083038186803b158015610b7157600080fd5b505af4158015610b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba99190614628565b90945092505050915091565b606b546001600160a01b0316610bc9613e95565b6001600160a01b031614610bef5760405162461bcd60e51b81526004016109d590614d66565b608f805462ff00ff19166001179055610c06613e99565b565b600054610100900460ff1680610c21575060005460ff16155b610c3d5760405162461bcd60e51b81526004016109d590614d18565b600054610100900460ff16158015610c68576000805460ff1961ff0019909116610100171660011790555b606580546001600160a01b0319166001600160a01b0384161790558015610c95576000805461ff00191690555b5050565b60008060008360875411610cae576000610cbb565b608754610cbb9085613ed7565b905080610ccf576000859250925050610cf3565b610cd98582613ee3565b610ced610ce68784613ee3565b8790613ed7565b92509250505b9250929050565b60675460009081906001600160a01b031663d06ca61f84610d1961212b565b6040518363ffffffff1660e01b8152600401610d36929190614ffb565b60006040518083038186803b158015610d4e57600080fd5b505afa158015610d62573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d8a91908101906144e5565b905080600181518110610dad57634e487b7160e01b600052603260045260246000fd5b60200260200101519150505b919050565b606b546001600160a01b0316610dd2613e95565b6001600160a01b031614610df85760405162461bcd60e51b81526004016109d590614d66565b610c06613e99565b606080600060788054905067ffffffffffffffff811115610e3157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e5a578160200160208202803683370190505b5060785490915060009067ffffffffffffffff811115610e8a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610eb3578160200160208202803683370190505b50905060005b607854811015610fb35760788181548110610ee457634e487b7160e01b600052603260045260246000fd5b600091825260209091206002909102015483516001600160a01b0390911690849083908110610f2357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505060788181548110610f6457634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154828281518110610f9657634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610fab816151a4565b915050610eb9565b5090925090509091565b606b546001600160a01b0316610fd1613e95565b6001600160a01b031614610ff75760405162461bcd60e51b81526004016109d590614d66565b60825460815460805461100a91906150fb565b61101491906150fb565b4210156110335760405162461bcd60e51b81526004016109d590614cc2565b6079541561104757611047607960006142af565b60005b601981101561122057600083826019811061107557634e487b7160e01b600052603260045260246000fd5b6020020160208101906110889190614363565b6001600160a01b0316141561109c57611220565b607960405180604001604052808584601981106110c957634e487b7160e01b600052603260045260246000fd5b6020020160208101906110dc9190614363565b6001600160a01b0316815260200184846019811061110a57634e487b7160e01b600052603260045260246000fd5b60209081029190910135909152825460018082018555600094855293829020835160029092020180546001600160a01b0319166001600160a01b03909216919091178155910151908201556111609082906150fb565b607a600085846019811061118457634e487b7160e01b600052603260045260246000fd5b6020020160208101906111979190614363565b6001600160a01b03166001600160a01b031681526020019081526020016000208383601981106111d757634e487b7160e01b600052603260045260246000fd5b6020020135815481106111fa57634e487b7160e01b600052603260045260246000fd5b600091825260209091206006600890920201015580611218816151a4565b91505061104a565b6077805482919061123390600190615152565b8154811061125157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000015410156112815760405162461bcd60e51b81526004016109d590614ea8565b6040517f5c243cc6e4f210bf2dd86b8eca0ca891d3f8ad2eb09fbf91735eb348bc199c7e90600090a1505050565b6001600160a01b0382166000908152607a6020908152604080832080548251818502810185019093528083528493849084015b8282101561137457600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e0850152610100918290041615159083015290835290920191016112e2565b505050509050600081511161139b5760405162461bcd60e51b81526004016109d590614ddc565b805183106113bb5760405162461bcd60e51b81526004016109d5906148cf565b8083815181106113db57634e487b7160e01b600052603260045260246000fd5b60200260200101516101000151156113f75760019150506108f8565b5060009392505050565b608f54610100900460ff1681565b600082821115611421575060006108f8565b608a5483111561146357608a546114388484613ed7565b11611445575060006108f8565b608a5461145c906114568585613ed7565b90613ed7565b90506108f8565b608a546114708484613efb565b1061147d575060006108f8565b61145c61148a8484613efb565b608a5490613ed7565b606b546001600160a01b03166114a7613e95565b6001600160a01b0316146114cd5760405162461bcd60e51b81526004016109d590614d66565b6000608654116114ef5760405162461bcd60e51b81526004016109d5906149c7565b6000821161150f5760405162461bcd60e51b81526004016109d590614c5c565b4281101561152f5760405162461bcd60e51b81526004016109d590614acc565b60006115396116ca565b90506115458184613f07565b600061155084610cfa565b9050600061156a6115638361012c613ee3565b8390613ed7565b905061157830868387613fd1565b5050505050565b60825481565b60835481565b606b546001600160a01b031661159f613e95565b6001600160a01b0316146115c55760405162461bcd60e51b81526004016109d590614d66565b607b546001600160a01b03848116911614156115f35760405162461bcd60e51b81526004016109d590614c1b565b60405163a9059cbb60e01b815283906001600160a01b0382169063a9059cbb90611623908590879060040161476a565b602060405180830381600087803b15801561163d57600080fd5b505af1158015611651573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157891906145bb565b60875481565b60885481565b611689613e95565b6001600160a01b031661169a611f6f565b6001600160a01b0316146116c05760405162461bcd60e51b81526004016109d590614da7565b610c066000614077565b6067546001600160a01b031690565b60865481565b60905481565b60855481565b6001600160a01b0381166000908152607a60205260408082209051630d46757760e41b8152829173__$171d2da81d2a08eb52330533595f0c4998$__9163d46757709161173d91606d906004016147f5565b60206040518083038186803b15801561175557600080fd5b505af4158015611769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178d91906145ef565b9392505050565b608f5462010000900460ff1680156117ad575060805442115b6117c95760405162461bcd60e51b81526004016109d590614e27565b6081546080546117d991906150fb565b42106117f75760405162461bcd60e51b81526004016109d590614933565b608f546301000000900460ff16156118215760405162461bcd60e51b81526004016109d590614906565b6088548210156118435760405162461bcd60e51b81526004016109d590614e5e565b608854607b546040805163771a3a1d60e01b815290516000926001600160a01b03169163771a3a1d91600480830192602092919082900301818787803b15801561188c57600080fd5b505af11580156118a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c491906145ef565b607b549091506000906001600160a01b031663d1ecfc686118e3613e95565b6040518263ffffffff1660e01b81526004016118ff9190614732565b602060405180830381600087803b15801561191957600080fd5b505af115801561192d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195191906145bb565b6119645761195f8583613ee3565b611967565b60005b6083549091506119779084613efb565b6119908261145688608954613efb90919063ffffffff16565b11156119ae5760405162461bcd60e51b81526004016109d590614bd5565b60006119ba8684610c99565b607b549097509091506001600160a01b03166323b872dd6119d9613e95565b306119e4858b6150fb565b6040518463ffffffff1660e01b8152600401611a0293929190614746565b602060405180830381600087803b158015611a1c57600080fd5b505af1158015611a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5491906145bb565b50611a5f8683613ed7565b95508015611b6057607b5460408051634a5db0a960e01b815290516001600160a01b039092169163a9059cbb918391634a5db0a9916004808201926020929091908290030181600087803b158015611ab657600080fd5b505af1158015611aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aee919061437f565b836040518363ffffffff1660e01b8152600401611b0c92919061476a565b602060405180830381600087803b158015611b2657600080fd5b505af1158015611b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5e91906145bb565b505b6000607a6000611b6e613e95565b6001600160a01b031681526020810191909152604001600020549050611b9c611b95613e95565b88886140c9565b608954611ba99088613efb565b608981905560835411611bbe57611bbe613e99565b611bc6613e95565b6001600160a01b03167ff556991011e831bcfac4f406d547e5e32cdd98267efab83935230d5f8d02c446888884604051611c0293929190614803565b60405180910390a250505050505050565b608f54640100000000900460ff1681565b60895481565b607a6020528160005260406000208181548110611c4657600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701549598509396509194909391929160ff8082169161010090041689565b608f5460ff16611cba5760405162461bcd60e51b81526004016109d590614c93565b600073__$60b6e19b11029f04c25a43d0435d86b2be$__63066f1dee607a6000611ce2613e95565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401611d1e91906147ec565b60206040518083038186803b158015611d3657600080fd5b505af4158015611d4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6e91906145ef565b90508015611edd5773__$171d2da81d2a08eb52330533595f0c4998$__63f66d9a4d607a6000611d9c613e95565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401611dd891906147ec565b60006040518083038186803b158015611df057600080fd5b505af4158015611e04573d6000803e3d6000fd5b5050607b546001600160a01b0316915063a9059cbb9050611e23613e95565b836040518363ffffffff1660e01b8152600401611e4192919061476a565b602060405180830381600087803b158015611e5b57600080fd5b505af1158015611e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9391906145bb565b50611e9c613e95565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd82604051611ed491906147ec565b60405180910390a25b50565b606b546001600160a01b0316611ef4613e95565b6001600160a01b031614611f1a5760405162461bcd60e51b81526004016109d590614d66565b608f805465ff00000000001916650100000000001790556040517f9331b2a38c658c57a39ea19b2709d928c28a12cc8fbb838d12b85148550f937d90600090a1565b608f546601000000000000900460ff1681565b6033546001600160a01b031690565b600080606560009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611fcf57600080fd5b505afa158015611fe3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612007919061464b565b505050915050600081121561201d57600061201f565b805b91505090565b600581565b607d546001600160a01b031681565b608f5460ff1681565b606b546001600160a01b0316612056613e95565b6001600160a01b03161461207c5760405162461bcd60e51b81526004016109d590614d66565b608f5460ff6201000090910416151581151514156120ac5760405162461bcd60e51b81526004016109d590614b4f565b608f805462ff00001916620100008315158102919091179182905560ff910416156120ff576040517f3d31b97eef590df350bb2cdbc390034c613c9f23ea6ae1906682628c85248b5390600090a1611edd565b6040517f763d36bfedf6707954f8bb39c2011a58a47a54844f2b3cdcd326c71cad0aa75390600090a150565b60408051600280825260608083018452926000929190602083019080368337505060685482519293506001600160a01b03169183915060009061217e57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526069548251911690829060019081106121bd57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152905090565b608f546301000000900460ff1681565b606b546001600160a01b03166121fe613e95565b6001600160a01b0316146122245760405162461bcd60e51b81526004016109d590614d66565b60825460815460805461223791906150fb565b61224191906150fb565b4210156122605760405162461bcd60e51b81526004016109d590614f87565b606c546001600160a01b031661227f57608a8190556070819055611edd565b612287611f7e565b608a81905560705550565b600054610100900460ff16806122ab575060005460ff16155b6122c75760405162461bcd60e51b81526004016109d590614d18565b600054610100900460ff161580156122f2576000805460ff1961ff0019909116610100171660011790555b606780546001600160a01b038087166001600160a01b0319928316179092556068805486841690831617905560698054928516929091169190911790558015612341576000805461ff00191690555b50505050565b60845481565b80607a600061235a613e95565b6001600160a01b0316815260208101919091526040016000205410156123925760405162461bcd60e51b81526004016109d590614f59565b607a600061239e613e95565b6001600160a01b031681526020810191909152604001600020546123d45760405162461bcd60e51b81526004016109d590614afa565b600073__$7fd944d8f8efff7c575121b9e933203c2c$__634f160423607a60006123fc613e95565b6001600160a01b03166001600160a01b0316815260200190815260200160002084606d6040518463ffffffff1660e01b815260040161243d93929190614803565b60206040518083038186803b15801561245557600080fd5b505af4158015612469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248d91906145ef565b905060008073__$7fd944d8f8efff7c575121b9e933203c2c$__63f7ac9cba607a60006124b8613e95565b6001600160a01b03166001600160a01b0316815260200190815260200160002086606d60776040518563ffffffff1660e01b81526004016124fc9493929190614819565b604080518083038186803b15801561251357600080fd5b505af4158015612527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254b9190614628565b9092509050600061255c84846150fb565b608f54909150640100000000900460ff16156129c857608654156127045781156127045773__$7fd944d8f8efff7c575121b9e933203c2c$__6393aaeaf9607a60006125a6613e95565b6001600160a01b03166001600160a01b03168152602001908152602001600020876040518363ffffffff1660e01b81526004016125e49291906147f5565b60006040518083038186803b1580156125fc57600080fd5b505af4158015612610573d6000803e3d6000fd5b5050607d546001600160a01b0316915063a9059cbb905061262f613e95565b846040518363ffffffff1660e01b815260040161264d92919061476a565b602060405180830381600087803b15801561266757600080fd5b505af115801561267b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269f91906145bb565b6126bb5760405162461bcd60e51b81526004016109d590614fdd565b6126c3613e95565b6001600160a01b03167fd93fc6d1e8779271f55cdb0d5f7b6b05be64a2226a1ad050d3036f5609c1cdcf836040516126fb91906147ec565b60405180910390a25b821561279f5773__$7fd944d8f8efff7c575121b9e933203c2c$__6393aaeaf9607a6000612730613e95565b6001600160a01b03166001600160a01b03168152602001908152602001600020876040518363ffffffff1660e01b815260040161276e9291906147f5565b60006040518083038186803b15801561278657600080fd5b505af415801561279a573d6000803e3d6000fd5b505050505b600073__$7fd944d8f8efff7c575121b9e933203c2c$__635eac7af3607a60006127c7613e95565b6001600160a01b03166001600160a01b03168152602001908152602001600020886040518363ffffffff1660e01b81526004016128059291906147f5565b60206040518083038186803b15801561281d57600080fd5b505af4158015612831573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285591906145ef565b905080156129c65773__$7fd944d8f8efff7c575121b9e933203c2c$__63ec8ecc02607a6000612883613e95565b6001600160a01b03166001600160a01b03168152602001908152602001600020886040518363ffffffff1660e01b81526004016128c19291906147f5565b60006040518083038186803b1580156128d957600080fd5b505af41580156128ed573d6000803e3d6000fd5b5050607b546001600160a01b0316915063a9059cbb905061290c613e95565b836040518363ffffffff1660e01b815260040161292a92919061476a565b602060405180830381600087803b15801561294457600080fd5b505af1158015612958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297c91906145bb565b50612985613e95565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd826040516129bd91906147ec565b60405180910390a25b505b801561157857607b54607c546040516370a0823160e01b815283926001600160a01b03908116926370a0823192612a059290911690600401614732565b60206040518083038186803b158015612a1d57600080fd5b505afa158015612a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5591906145ef565b1015612a735760405162461bcd60e51b81526004016109d590614b91565b73__$7fd944d8f8efff7c575121b9e933203c2c$__63eaff3050607a6000612a99613e95565b6001600160a01b03166001600160a01b0316815260200190815260200160002087606d6040518463ffffffff1660e01b8152600401612ada93929190614803565b60006040518083038186803b158015612af257600080fd5b505af4158015612b06573d6000803e3d6000fd5b5050607c546001600160a01b0316915063e4e103dc9050612b25613e95565b836040518363ffffffff1660e01b8152600401612b4392919061476a565b600060405180830381600087803b158015612b5d57600080fd5b505af1158015612b71573d6000803e3d6000fd5b50505050612b7d613e95565b6001600160a01b03167f115e2fe760f98d4fd0828d7741ae2070e7db700f892efbfe98448b53ac58388685604051612bb591906147ec565b60405180910390a2612bc5613e95565b6001600160a01b03167f723b06f6c3a94dc82019852e6aa01c0241fba5f84410b9003ddc3440ad499e5984604051612bfd91906147ec565b60405180910390a25050505050565b607f805461090b90615169565b6001600160a01b0382166000908152607a60205260408082209051637bd64e5d60e11b815282918291829173__$7fd944d8f8efff7c575121b9e933203c2c$__9163f7ac9cba91612c74918990606d90607790600401614819565b604080518083038186803b158015612c8b57600080fd5b505af4158015612c9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc39190614628565b9097909650945050505050565b600073__$171d2da81d2a08eb52330533595f0c4998$__63d4675770607a6000612cf8613e95565b6001600160a01b03166001600160a01b03168152602001908152602001600020606d6040518363ffffffff1660e01b8152600401612d379291906147f5565b60206040518083038186803b158015612d4f57600080fd5b505af4158015612d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8791906145ef565b905060008073__$171d2da81d2a08eb52330533595f0c4998$__6332a1b321607a6000612db2613e95565b6001600160a01b03166001600160a01b03168152602001908152602001600020606d60776040518463ffffffff1660e01b8152600401612df493929190614803565b604080518083038186803b158015612e0b57600080fd5b505af4158015612e1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e439190614628565b90925090506000612e5484846150fb565b608f54909150640100000000900460ff16156132b85760865415612ffa578115612ffa5773__$171d2da81d2a08eb52330533595f0c4998$__6347dc9eee607a6000612e9e613e95565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401612eda91906147ec565b60006040518083038186803b158015612ef257600080fd5b505af4158015612f06573d6000803e3d6000fd5b5050607d546001600160a01b0316915063a9059cbb9050612f25613e95565b846040518363ffffffff1660e01b8152600401612f4392919061476a565b602060405180830381600087803b158015612f5d57600080fd5b505af1158015612f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9591906145bb565b612fb15760405162461bcd60e51b81526004016109d590614b31565b612fb9613e95565b6001600160a01b03167fd93fc6d1e8779271f55cdb0d5f7b6b05be64a2226a1ad050d3036f5609c1cdcf83604051612ff191906147ec565b60405180910390a25b82156130935773__$171d2da81d2a08eb52330533595f0c4998$__6347dc9eee607a6000613026613e95565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b815260040161306291906147ec565b60006040518083038186803b15801561307a57600080fd5b505af415801561308e573d6000803e3d6000fd5b505050505b600073__$60b6e19b11029f04c25a43d0435d86b2be$__63066f1dee607a60006130bb613e95565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b81526004016130f791906147ec565b60206040518083038186803b15801561310f57600080fd5b505af4158015613123573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061314791906145ef565b905080156132b65773__$171d2da81d2a08eb52330533595f0c4998$__63f66d9a4d607a6000613175613e95565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b81526004016131b191906147ec565b60006040518083038186803b1580156131c957600080fd5b505af41580156131dd573d6000803e3d6000fd5b5050607b546001600160a01b0316915063a9059cbb90506131fc613e95565b836040518363ffffffff1660e01b815260040161321a92919061476a565b602060405180830381600087803b15801561323457600080fd5b505af1158015613248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326c91906145bb565b50613275613e95565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd826040516132ad91906147ec565b60405180910390a25b505b801561234157607b54607c546040516370a0823160e01b815283926001600160a01b03908116926370a08231926132f59290911690600401614732565b60206040518083038186803b15801561330d57600080fd5b505afa158015613321573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061334591906145ef565b10156133635760405162461bcd60e51b81526004016109d590614b91565b73__$171d2da81d2a08eb52330533595f0c4998$__634142c652607a6000613389613e95565b6001600160a01b03166001600160a01b03168152602001908152602001600020606d6040518363ffffffff1660e01b81526004016133c89291906147f5565b60006040518083038186803b1580156133e057600080fd5b505af41580156133f4573d6000803e3d6000fd5b5050607c546001600160a01b0316915063e4e103dc9050613413613e95565b836040518363ffffffff1660e01b815260040161343192919061476a565b600060405180830381600087803b15801561344b57600080fd5b505af115801561345f573d6000803e3d6000fd5b5050505061346b613e95565b6001600160a01b03167f115e2fe760f98d4fd0828d7741ae2070e7db700f892efbfe98448b53ac583886856040516134a391906147ec565b60405180910390a26134b3613e95565b6001600160a01b03167f723b06f6c3a94dc82019852e6aa01c0241fba5f84410b9003ddc3440ad499e59846040516134eb91906147ec565b60405180910390a250505050565b606c546001600160a01b031681565b6066546040516370a0823160e01b81526000916001600160a01b0316906370a0823190613539903090600401614732565b60206040518083038186803b15801561355157600080fd5b505afa158015613565573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061358991906145ef565b905090565b606b546001600160a01b031681565b608a5481565b608f5462010000900460ff1680156135bc575060805442115b6135d85760405162461bcd60e51b81526004016109d590614e27565b6081546080546135e891906150fb565b42106136065760405162461bcd60e51b81526004016109d590614933565b608f546301000000900460ff16156136305760405162461bcd60e51b81526004016109d590614906565b82811461364f5760405162461bcd60e51b81526004016109d590614975565b6000805b848110156136f05760885486868381811061367e57634e487b7160e01b600052603260045260246000fd5b9050602002013510156136a35760405162461bcd60e51b81526004016109d590614e5e565b6136dc8686838181106136c657634e487b7160e01b600052603260045260246000fd5b9050602002013583613efb90919063ffffffff16565b9150806136e8816151a4565b915050613653565b50608854607b546040805163771a3a1d60e01b815290516000926001600160a01b03169163771a3a1d91600480830192602092919082900301818787803b15801561373a57600080fd5b505af115801561374e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377291906145ef565b607b549091506000906001600160a01b031663d1ecfc68613791613e95565b6040518263ffffffff1660e01b81526004016137ad9190614732565b602060405180830381600087803b1580156137c757600080fd5b505af11580156137db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137ff91906145bb565b6138125761380d8483613ee3565b613815565b60005b6083549091506138259084613efb565b61383e8261145687608954613efb90919063ffffffff16565b111561385c5760405162461bcd60e51b81526004016109d590614bd5565b60006138688584610c99565b607b549096509091506001600160a01b03166323b872dd613887613e95565b30613892858a6150fb565b6040518463ffffffff1660e01b81526004016138b093929190614746565b602060405180830381600087803b1580156138ca57600080fd5b505af11580156138de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061390291906145bb565b5061390d8583613ed7565b94508015613a0e57607b5460408051634a5db0a960e01b815290516001600160a01b039092169163a9059cbb918391634a5db0a9916004808201926020929091908290030181600087803b15801561396457600080fd5b505af1158015613978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061399c919061437f565b836040518363ffffffff1660e01b81526004016139ba92919061476a565b602060405180830381600087803b1580156139d457600080fd5b505af11580156139e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a0c91906145bb565b505b6000607a6000613a1c613e95565b6001600160a01b03168152602081019190915260400160009081205491505b89811015613b875760008b8b83818110613a6557634e487b7160e01b600052603260045260246000fd5b607b54602090910292909201359250506001600160a01b031663d1ecfc68613a8b613e95565b6040518263ffffffff1660e01b8152600401613aa79190614732565b602060405180830381600087803b158015613ac157600080fd5b505af1158015613ad5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613af991906145bb565b613b0c57613b078187613ee3565b613b0f565b60005b9450613b1b8187610c99565b9094509050613b2a8186613ed7565b9050613b64613b37613e95565b828c8c86818110613b5857634e487b7160e01b600052603260045260246000fd5b905060200201356140c9565b608954613b719082613efb565b6089555080613b7f816151a4565b915050613a3b565b5060006001607a6000613b98613e95565b6001600160a01b03168152602081019190915260400160002054613bbc9190615152565b905060835460895410613bd157613bd1613e99565b613bd9613e95565b6001600160a01b03167f852fe7a2ad7b2c8c0a0e9b927734feb1acc3e8bc608b8921d4c4768c6193c33b8c8c8c8c8787604051613c1b96959493929190614834565b60405180910390a25050505050505050505050565b608f5465010000000000900460ff1681565b60798181548110613c5257600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b606b546001600160a01b0316613c8e613e95565b6001600160a01b031614613cb45760405162461bcd60e51b81526004016109d590614d66565b606c80546001600160a01b0319169055565b606d54606e54606f5460705460715460725460735460745460755460765460ff808216916101009004168b565b608b5481565b608e5481565b607b546001600160a01b031681565b608c5481565b600080606560009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015613d6557600080fd5b505afa158015613d79573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201f919061469a565b60778181548110613dad57600080fd5b60009182526020909120600290910201805460019091015490915082565b613dd3613e95565b6001600160a01b0316613de4611f6f565b6001600160a01b031614613e0a5760405162461bcd60e51b81526004016109d590614da7565b6001600160a01b038116613e305760405162461bcd60e51b81526004016109d590614a0a565b611edd81614077565b608d5481565b6066546001600160a01b031690565b607d546040516370a0823160e01b81526000916001600160a01b0316906370a0823190613539903090600401614732565b60805481565b60788181548110613c5257600080fd5b3390565b608f805463ff000000191663010000001790556040517f2e136745550967f28b779ce8c395ca060a2f844edfb5b06631fe677f66f9e30590600090a1565b600061178d8284615152565b600061178d612710613ef5858561423d565b90614249565b600061178d82846150fb565b60665460405163095ea7b360e01b81526001600160a01b039091169063095ea7b390613f39908590859060040161476a565b602060405180830381600087803b158015613f5357600080fd5b505af1158015613f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f8b91906145bb565b50816001600160a01b03167fd77df63d9076d067d9fd7af16c3d67db48b84064c3314f5900ae919922d364a182604051613fc591906147ec565b60405180910390a25050565b6001600160a01b038416613fe457600080fd5b6067546001600160a01b03166338ed17398484613fff61212b565b88866040518663ffffffff1660e01b815260040161402195949392919061501c565b600060405180830381600087803b15801561403b57600080fd5b505af115801561404f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261157891908101906144e5565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040805180820182526001600160a01b038086168083526000908152607a602081815285832080548287019081526078805460018181018355918752975160029889027f8dc6fb69531d98d70dc0420e638d2dfd04e09e1ec783ede9aac77da9c5a0dac481018054929099166001600160a01b03199092169190911790975590517f8dc6fb69531d98d70dc0420e638d2dfd04e09e1ec783ede9aac77da9c5a0dac5909601959095559181528551610120810187528881524281830181815297820185815260608301918252608083018a815260001960a0850181815260c0860191825260e086018981526101008781018b81528a54808e018c559a8c5298909a20965160089099029096019788559a51988701989098559051978501979097555160038401559451600483015594516005820155915160068301559151600790910180549351151590920261ff001991151560ff199490941693909317169190911790556142388183614255565b505050565b600061178d8284615133565b600061178d8284615113565b60785460009061426790600190615152565b9050806142745760908390555b6089546142a7906142859084613efb565b613ef5614292868661423d565b6089546090546142a19161423d565b90613efb565b609055505050565b5080546000825560020290600052602060002090810190611edd91905b808211156142f15780546001600160a01b0319168155600060018201556002016142cc565b5090565b8061032081018310156108f857600080fd5b60008083601f840112614318578182fd5b50813567ffffffffffffffff81111561432f578182fd5b6020830191508360208083028501011115610cf357600080fd5b805169ffffffffffffffffffff81168114610db957600080fd5b600060208284031215614374578081fd5b813561178d816151eb565b600060208284031215614390578081fd5b815161178d816151eb565b6000806000606084860312156143af578182fd5b83356143ba816151eb565b925060208401356143ca816151eb565b915060408401356143da816151eb565b809150509250925092565b600080604083850312156143f7578182fd5b8235614402816151eb565b946020939093013593505050565b600080600060608486031215614424578283fd5b833561442f816151eb565b92506020840135915060408401356143da816151eb565b6000806106408385031215614459578182fd5b61446384846142f5565b91506144738461032085016142f5565b90509250929050565b60008060008060408587031215614491578081fd5b843567ffffffffffffffff808211156144a8578283fd5b6144b488838901614307565b909650945060208701359150808211156144cc578283fd5b506144d987828801614307565b95989497509550505050565b600060208083850312156144f7578182fd5b825167ffffffffffffffff8082111561450e578384fd5b818501915085601f830112614521578384fd5b815181811115614533576145336151d5565b83810260405185828201018181108582111715614552576145526151d5565b604052828152858101935084860182860187018a1015614570578788fd5b8795505b83861015614592578051855260019590950194938601938601614574565b5098975050505050505050565b6000602082840312156145b0578081fd5b813561178d81615200565b6000602082840312156145cc578081fd5b815161178d81615200565b6000602082840312156145e8578081fd5b5035919050565b600060208284031215614600578081fd5b5051919050565b60008060408385031215614619578182fd5b50508035926020909101359150565b6000806040838503121561463a578182fd5b505080516020909101519092909150565b600080600080600060a08688031215614662578283fd5b61466b86614349565b945060208601519350604086015192506060860151915061468e60808701614349565b90509295509295909350565b6000602082840312156146ab578081fd5b815160ff8116811461178d578182fd5b6000815180845260208085019450808401835b838110156146f35781516001600160a01b0316875295820195908201906001016146ce565b509495945050505050565b81835260006001600160fb1b03831115614716578081fd5b6020830280836020870137939093016020019283525090919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006020825261178d60208301846146bb565b6000604082526147a960408301856146bb565b828103602084810191909152845180835285820192820190845b818110156147df578451835293830193918301916001016147c3565b5090979650505050505050565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b60006080825261484860808301888a6146fe565b828103602084015261485b8187896146fe565b6040840195909552505060600152949350505050565b901515815260200190565b6000602080835283518082850152825b818110156148a85785810183015185820160400152820161488c565b818111156148b95783604083870101525b50601f01601f1916929092016040019392505050565b60208082526017908201527f30333831207468697320696e6465782065786365656473000000000000000000604082015260600190565b6020808252601390820152720c0ccc4c08141bdbdb081a5cc81b1bd8dad959606a1b604082015260600190565b60208082526022908201527f303331362043616e206e6f74207374616b65206166746572206c6f636b206461604082015261746560f01b606082015260800190565b60208082526032908201527f30333135207374616b696e67416d6f756e7420616e642070726564696374696f6040820152710dce640d8cadccee8d040dad2e6dac2e8c6d60731b606082015260800190565b60208082526023908201527f303334302054686520706f6f6c206973206f6e6c7920544f544d2072657761726040820152623232b960e91b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252602c908201527f303336302043616e277420656e6420706f6f6c206265666f726520746865206d60408201526b617475726974792074696d6560a01b606082015260800190565b6020808252601690820152750c0ccd8c88199a5c9cdd081cda1bdd5b19081cdbdc9d60521b604082015260600190565b6020808252601490820152733033343220446561646c696e65206973206c6f7760601b604082015260600190565b6020808252601d908201527f5573657220646f6573206e6f74206861766520616e79207374616b6573000000604082015260600190565b6020808252600490820152630303332360e41b604082015260600190565b60208082526022908201527f4e6f74206368616e67696e67207468652061637469766174696f6e2073746174604082015261757360f01b606082015260800190565b60208082526024908201527f4e6f7420656e6f7567682062616c616e636520696e20726577617264206d616e60408201526330b3b2b960e11b606082015260800190565b60208082526026908201527f303331322043616e2774207374616b652061626f76652073697a6520616c6c6f60408201526531b0ba34b7b760d11b606082015260800190565b60208082526021908201527f3033373020746f74656d732063616e206e6f74206265207472616e73666572656040820152601960fa1b606082015260800190565b60208082526019908201527f3033343120416d6f756e742063616e2774206265207a65726f00000000000000604082015260600190565b60208082526015908201527469742773206e6f7420616e20656d657267656e637960581b604082015260600190565b60208082526036908201527f303339302043616e27742073657420736f72746564207374616b657273206265604082015275666f726520746865206d617475726974792074696d6560501b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526021908201527f303330302063616c6c6572206973206e6f74206120706f6f6c2063726561746f6040820152603960f91b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f3033383020746869732061646472657373206469646e2774207374616b65206960408201526a1b881d1a1a5cc81c1bdbdb60aa1b606082015260800190565b60208082526017908201527f3033313320706f6f6c206973206e6f7420616374697665000000000000000000604082015260600190565b6020808252602a908201527f3033313120416d6f756e742063616e2774206265206c657373207468616e20746040820152696865206d696e696d756d60b01b606082015260800190565b60208082526044908201527f6e756d626572206f6620736f72746564207374616b657273206d75737420626560408201527f206c657373207468616e206f7220657175616c20746f20746865206c6173742060608201526372616e6b60e01b608082015260a00190565b60208082526027908201527f303336312057726170706564546f6b656e2052657761726473206e6f7420617660408201526661696c61626c6560c81b606082015260800190565b602080825260149082015273125b99195e08191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b60208082526036908201527f303335302043616e277420736574206d61747572696e67207072696365206265604082015275666f726520746865206d617475726974792074696d6560501b606082015260800190565b6020808252600490820152630303333360e41b604082015260600190565b60008382526040602083015261501460408301846146bb565b949350505050565b600086825285602083015260a0604083015261503b60a08301866146bb565b6001600160a01b0394909416606083015250608001529392505050565b988952602089019790975260408801959095526060870193909352608086019190915260a085015260c0840152151560e083015215156101008201526101200190565b9a8b5260208b019990995260408a01979097526060890195909552608088019390935260a087019190915260c086015260e0850152610100840152151561012083015215156101408201526101600190565b60ff91909116815260200190565b6000821982111561510e5761510e6151bf565b500190565b60008261512e57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561514d5761514d6151bf565b500290565b600082821015615164576151646151bf565b500390565b60028104600182168061517d57607f821691505b6020821081141561519e57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156151b8576151b86151bf565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611edd57600080fd5b8015158114611edd57600080fdfea2646970667358221220ddbbf88f227c25f52e68237c3d3082325526ff7619e0cef5982f8706353be0e664736f6c63430008000033",
  "libraries": {
    "CalculateRewardLib": "0x56Bc0AbAFf078E1a8fA340B2446FE2F00f2ec9C1",
    "ClaimRewardLib": "0xA3C5E53644D9ef40506bBDD3111e8A390F5fc1D8",
    "IndexedClaimRewardLib": "0x6A1B5334Ee77F1E3dBA0B62Fd43B8B9f0Ab97907"
>>>>>>> dev
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "__PriceConsumer_initialize(address)": {
        "params": {
          "_oracle": "The chainlink node oracle address to send requests"
        }
      },
      "getEstimatedWrappedTokenForUSD(uint256)": {
        "params": {
          "_amount": "Amount"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateMaturingPrice(uint256)": {
        "params": {
          "_price": "is ignored if oracle is not zero address.When there is no oracle, _price is the maturingPrice and is set manually by the pool creator"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "collaborativeReward()": {
        "notice": "Based on the white paper, the collaborative reward can be 20% (2000), 25% (2500) or 35% (3500)."
      },
<<<<<<< HEAD
      "getAveragePricePrediction()": {
        "notice": "Gets the avgerage price prediction for calculating collaborative reward"
      },
=======
>>>>>>> dev
      "getDecimals()": {
        "notice": "Returns decimals for oracle contract"
      },
      "getLatestPrice()": {
        "notice": "Returns the latest price from oracle contract"
      },
      "hasUnStaked(address,uint256)": {
        "notice": "hasUnStaked return true if the user staked in the pool and then  has unStaked it (claimed)"
      },
      "setOracleToZero()": {
        "notice": "Sets oracle to zero in case it was given incorrectly by the owner,         or it is not available"
      },
      "usdPrizeAmount()": {
        "notice": "usdPrizeAmount is the enabler of WrappedToken rewarder; If it is set to 0  then the pool is only TOTM rewarder."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 176,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 179,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 259,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 56,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 169,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1585,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "priceFeed",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 1353,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "USDCContract",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IERC20)988"
      },
      {
        "astId": 1438,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "swapRouter",
        "offset": 0,
        "slot": "103",
<<<<<<< HEAD
        "type": "t_contract(IPancakeRouter02)7385"
=======
        "type": "t_contract(IPancakeRouter02)7456"
>>>>>>> dev
      },
      {
        "astId": 1440,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "BUSD_CONTRACT_ADDRESS",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 1442,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "WRAPPED_Token_CONTRACT_ADDRESS",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
<<<<<<< HEAD
        "astId": 4724,
=======
        "astId": 4793,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "stakingPoolImplementation",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
<<<<<<< HEAD
        "astId": 4726,
=======
        "astId": 4795,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "poolCreator",
        "offset": 0,
        "slot": "107",
        "type": "t_address"
      },
      {
<<<<<<< HEAD
        "astId": 4728,
=======
        "astId": 4797,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "oracleContract",
        "offset": 0,
        "slot": "108",
        "type": "t_address"
      },
      {
<<<<<<< HEAD
        "astId": 4783,
=======
        "astId": 4852,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "lps",
        "offset": 0,
        "slot": "109",
<<<<<<< HEAD
        "type": "t_struct(LibParams)4751_storage"
      },
      {
        "astId": 4787,
=======
        "type": "t_struct(LibParams)4820_storage"
      },
      {
        "astId": 4856,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "prizeRewardRates",
        "offset": 0,
        "slot": "119",
<<<<<<< HEAD
        "type": "t_array(t_struct(PrizeRewardRate)4780_storage)dyn_storage"
      },
      {
        "astId": 4791,
=======
        "type": "t_array(t_struct(PrizeRewardRate)4849_storage)dyn_storage"
      },
      {
        "astId": 4860,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "stakers",
        "offset": 0,
        "slot": "120",
<<<<<<< HEAD
        "type": "t_array(t_struct(Staker)4775_storage)dyn_storage"
      },
      {
        "astId": 4795,
=======
        "type": "t_array(t_struct(Staker)4844_storage)dyn_storage"
      },
      {
        "astId": 4864,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "sortedStakers",
        "offset": 0,
        "slot": "121",
<<<<<<< HEAD
        "type": "t_array(t_struct(Staker)4775_storage)dyn_storage"
      },
      {
        "astId": 4801,
=======
        "type": "t_array(t_struct(Staker)4844_storage)dyn_storage"
      },
      {
        "astId": 4870,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "predictions",
        "offset": 0,
        "slot": "122",
<<<<<<< HEAD
        "type": "t_mapping(t_address,t_array(t_struct(StakeWithPrediction)4770_storage)dyn_storage)"
      },
      {
        "astId": 4804,
=======
        "type": "t_mapping(t_address,t_array(t_struct(StakeWithPrediction)4839_storage)dyn_storage)"
      },
      {
        "astId": 4873,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "totemToken",
        "offset": 0,
        "slot": "123",
<<<<<<< HEAD
        "type": "t_contract(ITotemToken)7506"
      },
      {
        "astId": 4807,
=======
        "type": "t_contract(ITotemToken)7577"
      },
      {
        "astId": 4876,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "rewardManager",
        "offset": 0,
        "slot": "124",
<<<<<<< HEAD
        "type": "t_contract(IRewardManager)7413"
      },
      {
        "astId": 4810,
=======
        "type": "t_contract(IRewardManager)7484"
      },
      {
        "astId": 4879,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "wrappedToken",
        "offset": 0,
        "slot": "125",
        "type": "t_contract(IERC20)988"
      },
      {
<<<<<<< HEAD
        "astId": 4812,
=======
        "astId": 4881,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "wrappedTokenSymbol",
        "offset": 0,
        "slot": "126",
        "type": "t_string_storage"
      },
      {
<<<<<<< HEAD
        "astId": 4814,
=======
        "astId": 4883,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "poolType",
        "offset": 0,
        "slot": "127",
        "type": "t_string_storage"
      },
      {
<<<<<<< HEAD
        "astId": 4819,
=======
        "astId": 4888,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "launchDate",
        "offset": 0,
        "slot": "128",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 4821,
=======
        "astId": 4890,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "lockTime",
        "offset": 0,
        "slot": "129",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 4823,
=======
        "astId": 4892,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "maturityTime",
        "offset": 0,
        "slot": "130",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 4825,
=======
        "astId": 4894,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "sizeAllocation",
        "offset": 0,
        "slot": "131",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 4827,
=======
        "astId": 4896,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "stakeApr",
        "offset": 0,
        "slot": "132",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 4829,
=======
        "astId": 4898,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "prizeAmount",
        "offset": 0,
        "slot": "133",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 4832,
=======
        "astId": 4901,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "usdPrizeAmount",
        "offset": 0,
        "slot": "134",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 4834,
=======
        "astId": 4903,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "stakeTaxRate",
        "offset": 0,
        "slot": "135",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 4836,
=======
        "astId": 4905,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "minimumStakeAmount",
        "offset": 0,
        "slot": "136",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 4838,
=======
        "astId": 4907,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "totalStaked",
        "offset": 0,
        "slot": "137",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 4840,
=======
        "astId": 4909,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "maturingPrice",
        "offset": 0,
        "slot": "138",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 4842,
=======
        "astId": 4911,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "potentialCollabReward",
        "offset": 0,
        "slot": "139",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 4844,
=======
        "astId": 4913,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "collaborativeRange",
        "offset": 0,
        "slot": "140",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 4847,
=======
        "astId": 4916,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "collaborativeReward",
        "offset": 0,
        "slot": "141",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 4849,
=======
        "astId": 4918,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "oracleDecimals",
        "offset": 0,
        "slot": "142",
        "type": "t_uint256"
      },
      {
<<<<<<< HEAD
        "astId": 4851,
=======
        "astId": 4920,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "isAnEmergency",
        "offset": 0,
        "slot": "143",
        "type": "t_bool"
      },
      {
<<<<<<< HEAD
        "astId": 4853,
=======
        "astId": 4922,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "isEnhancedEnabled",
        "offset": 1,
        "slot": "143",
        "type": "t_bool"
      },
      {
<<<<<<< HEAD
        "astId": 4855,
=======
        "astId": 4924,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "isActive",
        "offset": 2,
        "slot": "143",
        "type": "t_bool"
      },
      {
<<<<<<< HEAD
        "astId": 4857,
=======
        "astId": 4926,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "isLocked",
        "offset": 3,
        "slot": "143",
        "type": "t_bool"
      },
      {
<<<<<<< HEAD
        "astId": 4859,
=======
        "astId": 4928,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "isMatured",
        "offset": 4,
        "slot": "143",
        "type": "t_bool"
      },
      {
<<<<<<< HEAD
        "astId": 4861,
=======
        "astId": 4930,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "isDeleted",
        "offset": 5,
        "slot": "143",
        "type": "t_bool"
      },
      {
<<<<<<< HEAD
        "astId": 4864,
=======
        "astId": 4933,
>>>>>>> dev
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "upgradeEnabled",
        "offset": 6,
        "slot": "143",
        "type": "t_bool"
<<<<<<< HEAD
=======
      },
      {
        "astId": 4935,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "averagePricePrediction",
        "offset": 0,
        "slot": "144",
        "type": "t_uint256"
>>>>>>> dev
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
<<<<<<< HEAD
      "t_array(t_struct(PrizeRewardRate)4780_storage)dyn_storage": {
        "base": "t_struct(PrizeRewardRate)4780_storage",
=======
      "t_array(t_struct(PrizeRewardRate)4849_storage)dyn_storage": {
        "base": "t_struct(PrizeRewardRate)4849_storage",
>>>>>>> dev
        "encoding": "dynamic_array",
        "label": "struct StakingPoolStorageStructure.PrizeRewardRate[]",
        "numberOfBytes": "32"
      },
<<<<<<< HEAD
      "t_array(t_struct(StakeWithPrediction)4770_storage)dyn_storage": {
        "base": "t_struct(StakeWithPrediction)4770_storage",
=======
      "t_array(t_struct(StakeWithPrediction)4839_storage)dyn_storage": {
        "base": "t_struct(StakeWithPrediction)4839_storage",
>>>>>>> dev
        "encoding": "dynamic_array",
        "label": "struct StakingPoolStorageStructure.StakeWithPrediction[]",
        "numberOfBytes": "32"
      },
<<<<<<< HEAD
      "t_array(t_struct(Staker)4775_storage)dyn_storage": {
        "base": "t_struct(Staker)4775_storage",
=======
      "t_array(t_struct(Staker)4844_storage)dyn_storage": {
        "base": "t_struct(Staker)4844_storage",
>>>>>>> dev
        "encoding": "dynamic_array",
        "label": "struct StakingPoolStorageStructure.Staker[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)988": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
<<<<<<< HEAD
      "t_contract(IPancakeRouter02)7385": {
=======
      "t_contract(IPancakeRouter02)7456": {
>>>>>>> dev
        "encoding": "inplace",
        "label": "contract IPancakeRouter02",
        "numberOfBytes": "20"
      },
<<<<<<< HEAD
      "t_contract(IRewardManager)7413": {
=======
      "t_contract(IRewardManager)7484": {
>>>>>>> dev
        "encoding": "inplace",
        "label": "contract IRewardManager",
        "numberOfBytes": "20"
      },
<<<<<<< HEAD
      "t_contract(ITotemToken)7506": {
=======
      "t_contract(ITotemToken)7577": {
>>>>>>> dev
        "encoding": "inplace",
        "label": "contract ITotemToken",
        "numberOfBytes": "20"
      },
<<<<<<< HEAD
      "t_mapping(t_address,t_array(t_struct(StakeWithPrediction)4770_storage)dyn_storage)": {
=======
      "t_mapping(t_address,t_array(t_struct(StakeWithPrediction)4839_storage)dyn_storage)": {
>>>>>>> dev
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingPoolStorageStructure.StakeWithPrediction[])",
        "numberOfBytes": "32",
<<<<<<< HEAD
        "value": "t_array(t_struct(StakeWithPrediction)4770_storage)dyn_storage"
=======
        "value": "t_array(t_struct(StakeWithPrediction)4839_storage)dyn_storage"
>>>>>>> dev
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
<<<<<<< HEAD
      "t_struct(LibParams)4751_storage": {
=======
      "t_struct(LibParams)4820_storage": {
>>>>>>> dev
        "encoding": "inplace",
        "label": "struct StakingPoolStorageStructure.LibParams",
        "members": [
          {
<<<<<<< HEAD
            "astId": 4730,
=======
            "astId": 4799,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "launchDate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 4732,
=======
            "astId": 4801,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "lockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 4734,
=======
            "astId": 4803,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "maturityTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 4736,
=======
            "astId": 4805,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "maturingPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 4738,
=======
            "astId": 4807,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "usdPrizeAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 4740,
=======
            "astId": 4809,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "prizeAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 4742,
=======
            "astId": 4811,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "stakeApr",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 4744,
=======
            "astId": 4813,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "collaborativeReward",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 4746,
=======
            "astId": 4815,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "oracleDecimals",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 4748,
=======
            "astId": 4817,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "isEnhancedEnabled",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          },
          {
<<<<<<< HEAD
            "astId": 4750,
=======
            "astId": 4819,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "isMatured",
            "offset": 1,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
<<<<<<< HEAD
      "t_struct(PrizeRewardRate)4780_storage": {
=======
      "t_struct(PrizeRewardRate)4849_storage": {
>>>>>>> dev
        "encoding": "inplace",
        "label": "struct StakingPoolStorageStructure.PrizeRewardRate",
        "members": [
          {
<<<<<<< HEAD
            "astId": 4777,
=======
            "astId": 4846,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "rank",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 4779,
=======
            "astId": 4848,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "percentage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
<<<<<<< HEAD
      "t_struct(StakeWithPrediction)4770_storage": {
=======
      "t_struct(StakeWithPrediction)4839_storage": {
>>>>>>> dev
        "encoding": "inplace",
        "label": "struct StakingPoolStorageStructure.StakeWithPrediction",
        "members": [
          {
<<<<<<< HEAD
            "astId": 4753,
=======
            "astId": 4822,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "stakedBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 4755,
=======
            "astId": 4824,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "stakedTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 4757,
=======
            "astId": 4826,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "amountWithdrawn",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 4759,
=======
            "astId": 4828,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "lastWithdrawalTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 4761,
=======
            "astId": 4830,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "pricePrediction",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 4763,
=======
            "astId": 4832,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "difference",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 4765,
=======
            "astId": 4834,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "rank",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
<<<<<<< HEAD
            "astId": 4767,
=======
            "astId": 4836,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "prizeRewardWithdrawn",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
<<<<<<< HEAD
            "astId": 4769,
=======
            "astId": 4838,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "didUnstake",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
<<<<<<< HEAD
      "t_struct(Staker)4775_storage": {
=======
      "t_struct(Staker)4844_storage": {
>>>>>>> dev
        "encoding": "inplace",
        "label": "struct StakingPoolStorageStructure.Staker",
        "members": [
          {
<<<<<<< HEAD
            "astId": 4772,
=======
            "astId": 4841,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "stakerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
<<<<<<< HEAD
            "astId": 4774,
=======
            "astId": 4843,
>>>>>>> dev
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "index",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
<<<<<<< HEAD
}
=======
}
>>>>>>> dev
