/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ITotemTokenInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "distributeTokens()": FunctionFragment;
    "setDistributionTeamsAddresses(address,address,address,address,address,address,address,address,address)": FunctionFragment;
    "setLocker(address)": FunctionFragment;
    "setTaxExemptStatus(address,bool)": FunctionFragment;
    "setTaxRate(uint256)": FunctionFragment;
    "setTaxationWallet(address)": FunctionFragment;
    "taxExempt(address)": FunctionFragment;
    "taxRate()": FunctionFragment;
    "taxationWallet()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "distributeTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionTeamsAddresses",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "setLocker", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTaxExemptStatus",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxationWallet",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "taxExempt", values: [string]): string;
  encodeFunctionData(functionFragment: "taxRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "taxationWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionTeamsAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLocker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTaxExemptStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTaxRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTaxationWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taxExempt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taxationWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {};
}

export class ITotemToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITotemTokenInterface;

  functions: {
    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    distributeTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "distributeTokens()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDistributionTeamsAddresses(
      _CommunityDevelopmentAddr: string,
      _StakingRewardsAddr: string,
      _LiquidityPoolAddr: string,
      _PublicSaleAddr: string,
      _AdvisorsAddr: string,
      _SeedInvestmentAddr: string,
      _PrivateSaleAddr: string,
      _TeamAllocationAddr: string,
      _StrategicRoundAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setDistributionTeamsAddresses(address,address,address,address,address,address,address,address,address)"(
      _CommunityDevelopmentAddr: string,
      _StakingRewardsAddr: string,
      _LiquidityPoolAddr: string,
      _PublicSaleAddr: string,
      _AdvisorsAddr: string,
      _SeedInvestmentAddr: string,
      _PrivateSaleAddr: string,
      _TeamAllocationAddr: string,
      _StrategicRoundAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLocker(
      _locker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLocker(address)"(
      _locker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaxExemptStatus(
      account: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTaxExemptStatus(address,bool)"(
      account: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaxRate(
      newTaxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTaxRate(uint256)"(
      newTaxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaxationWallet(
      newTaxationWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTaxationWallet(address)"(
      newTaxationWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taxExempt(
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "taxExempt(address)"(
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taxRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "taxRate()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taxationWallet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "taxationWallet()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  distributeTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "distributeTokens()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDistributionTeamsAddresses(
    _CommunityDevelopmentAddr: string,
    _StakingRewardsAddr: string,
    _LiquidityPoolAddr: string,
    _PublicSaleAddr: string,
    _AdvisorsAddr: string,
    _SeedInvestmentAddr: string,
    _PrivateSaleAddr: string,
    _TeamAllocationAddr: string,
    _StrategicRoundAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setDistributionTeamsAddresses(address,address,address,address,address,address,address,address,address)"(
    _CommunityDevelopmentAddr: string,
    _StakingRewardsAddr: string,
    _LiquidityPoolAddr: string,
    _PublicSaleAddr: string,
    _AdvisorsAddr: string,
    _SeedInvestmentAddr: string,
    _PrivateSaleAddr: string,
    _TeamAllocationAddr: string,
    _StrategicRoundAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLocker(
    _locker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLocker(address)"(
    _locker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaxExemptStatus(
    account: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTaxExemptStatus(address,bool)"(
    account: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaxRate(
    newTaxRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTaxRate(uint256)"(
    newTaxRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaxationWallet(
    newTaxationWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTaxationWallet(address)"(
    newTaxationWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taxExempt(
    _msgSender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "taxExempt(address)"(
    _msgSender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taxRate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "taxRate()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taxationWallet(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "taxationWallet()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeTokens(overrides?: CallOverrides): Promise<void>;

    "distributeTokens()"(overrides?: CallOverrides): Promise<void>;

    setDistributionTeamsAddresses(
      _CommunityDevelopmentAddr: string,
      _StakingRewardsAddr: string,
      _LiquidityPoolAddr: string,
      _PublicSaleAddr: string,
      _AdvisorsAddr: string,
      _SeedInvestmentAddr: string,
      _PrivateSaleAddr: string,
      _TeamAllocationAddr: string,
      _StrategicRoundAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDistributionTeamsAddresses(address,address,address,address,address,address,address,address,address)"(
      _CommunityDevelopmentAddr: string,
      _StakingRewardsAddr: string,
      _LiquidityPoolAddr: string,
      _PublicSaleAddr: string,
      _AdvisorsAddr: string,
      _SeedInvestmentAddr: string,
      _PrivateSaleAddr: string,
      _TeamAllocationAddr: string,
      _StrategicRoundAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLocker(_locker: string, overrides?: CallOverrides): Promise<void>;

    "setLocker(address)"(
      _locker: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxExemptStatus(
      account: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTaxExemptStatus(address,bool)"(
      account: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxRate(
      newTaxRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTaxRate(uint256)"(
      newTaxRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxationWallet(
      newTaxationWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTaxationWallet(address)"(
      newTaxationWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    taxExempt(_msgSender: string, overrides?: CallOverrides): Promise<boolean>;

    "taxExempt(address)"(
      _msgSender: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    taxRate(overrides?: CallOverrides): Promise<BigNumber>;

    "taxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    taxationWallet(overrides?: CallOverrides): Promise<string>;

    "taxationWallet()"(overrides?: CallOverrides): Promise<string>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "distributeTokens()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDistributionTeamsAddresses(
      _CommunityDevelopmentAddr: string,
      _StakingRewardsAddr: string,
      _LiquidityPoolAddr: string,
      _PublicSaleAddr: string,
      _AdvisorsAddr: string,
      _SeedInvestmentAddr: string,
      _PrivateSaleAddr: string,
      _TeamAllocationAddr: string,
      _StrategicRoundAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setDistributionTeamsAddresses(address,address,address,address,address,address,address,address,address)"(
      _CommunityDevelopmentAddr: string,
      _StakingRewardsAddr: string,
      _LiquidityPoolAddr: string,
      _PublicSaleAddr: string,
      _AdvisorsAddr: string,
      _SeedInvestmentAddr: string,
      _PrivateSaleAddr: string,
      _TeamAllocationAddr: string,
      _StrategicRoundAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLocker(
      _locker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLocker(address)"(
      _locker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaxExemptStatus(
      account: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTaxExemptStatus(address,bool)"(
      account: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaxRate(
      newTaxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTaxRate(uint256)"(
      newTaxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaxationWallet(
      newTaxationWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTaxationWallet(address)"(
      newTaxationWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taxExempt(
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "taxExempt(address)"(
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taxRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "taxRate()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taxationWallet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "taxationWallet()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributeTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "distributeTokens()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDistributionTeamsAddresses(
      _CommunityDevelopmentAddr: string,
      _StakingRewardsAddr: string,
      _LiquidityPoolAddr: string,
      _PublicSaleAddr: string,
      _AdvisorsAddr: string,
      _SeedInvestmentAddr: string,
      _PrivateSaleAddr: string,
      _TeamAllocationAddr: string,
      _StrategicRoundAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setDistributionTeamsAddresses(address,address,address,address,address,address,address,address,address)"(
      _CommunityDevelopmentAddr: string,
      _StakingRewardsAddr: string,
      _LiquidityPoolAddr: string,
      _PublicSaleAddr: string,
      _AdvisorsAddr: string,
      _SeedInvestmentAddr: string,
      _PrivateSaleAddr: string,
      _TeamAllocationAddr: string,
      _StrategicRoundAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLocker(
      _locker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLocker(address)"(
      _locker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaxExemptStatus(
      account: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTaxExemptStatus(address,bool)"(
      account: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaxRate(
      newTaxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTaxRate(uint256)"(
      newTaxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaxationWallet(
      newTaxationWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTaxationWallet(address)"(
      newTaxationWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taxExempt(
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "taxExempt(address)"(
      _msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taxRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "taxRate()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taxationWallet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "taxationWallet()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
