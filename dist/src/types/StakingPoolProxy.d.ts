/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StakingPoolProxyInterface extends ethers.utils.Interface {
  functions: {
    "__WrappedTokenDistributor_initialize(address,address,address)": FunctionFragment;
    "averagePricePrediction()": FunctionFragment;
    "collaborativeRange()": FunctionFragment;
    "collaborativeReward()": FunctionFragment;
    "disableUpgrade()": FunctionFragment;
    "enableUpgrade()": FunctionFragment;
    "getEstimatedWrappedTokenForUSD(uint256)": FunctionFragment;
    "getPathForUSDToWrappedToken()": FunctionFragment;
    "getSwapRouter()": FunctionFragment;
    "getUSDBalance()": FunctionFragment;
    "getUSDToken()": FunctionFragment;
    "initialize(string,string,address,address,address,address[4],uint256[12],uint256[8],uint256[8],bool)": FunctionFragment;
    "isActive()": FunctionFragment;
    "isAnEmergency()": FunctionFragment;
    "isDeleted()": FunctionFragment;
    "isEnhancedEnabled()": FunctionFragment;
    "isLocked()": FunctionFragment;
    "isMatured()": FunctionFragment;
    "launchDate()": FunctionFragment;
    "lockTime()": FunctionFragment;
    "lps()": FunctionFragment;
    "maturingPrice()": FunctionFragment;
    "maturityTime()": FunctionFragment;
    "minimumStakeAmount()": FunctionFragment;
    "oracleContract()": FunctionFragment;
    "oracleDecimals()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolCreator()": FunctionFragment;
    "poolType()": FunctionFragment;
    "potentialCollabReward()": FunctionFragment;
    "predictions(address,uint256)": FunctionFragment;
    "prizeAmount()": FunctionFragment;
    "prizeRewardRates(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardManager()": FunctionFragment;
    "sizeAllocation()": FunctionFragment;
    "sizeLimitRangeRate()": FunctionFragment;
    "sortedStakers(uint256)": FunctionFragment;
    "stakeApr()": FunctionFragment;
    "stakeTaxRate()": FunctionFragment;
    "stakers(uint256)": FunctionFragment;
    "stakingPoolImplementation()": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "totemToken()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeEnabled()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "usdPrizeAmount()": FunctionFragment;
    "wrappedToken()": FunctionFragment;
    "wrappedTokenSymbol()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__WrappedTokenDistributor_initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "averagePricePrediction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collaborativeRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collaborativeReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEstimatedWrappedTokenForUSD",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPathForUSDToWrappedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUSDBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUSDToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      string,
      [string, string, string, string],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAnEmergency",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isDeleted", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isEnhancedEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isLocked", values?: undefined): string;
  encodeFunctionData(functionFragment: "isMatured", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "launchDate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lockTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "lps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maturingPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maturityTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolCreator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "potentialCollabReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "predictions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prizeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prizeRewardRates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sizeAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sizeLimitRangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sortedStakers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stakeApr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakeTaxRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingPoolImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totemToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "usdPrizeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedTokenSymbol",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "__WrappedTokenDistributor_initialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "averagePricePrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collaborativeRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collaborativeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEstimatedWrappedTokenForUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPathForUSDToWrappedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSDBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSDToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAnEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDeleted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEnhancedEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMatured", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "launchDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maturingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maturityTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "potentialCollabReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prizeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prizeRewardRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sizeAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sizeLimitRangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sortedStakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeApr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeTaxRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingPoolImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totemToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usdPrizeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedTokenSymbol",
    data: BytesLike
  ): Result;

  events: {
    "ApproveTokens(address,uint256)": EventFragment;
    "DistributedBTC(address,uint256)": EventFragment;
    "ImplementationUpgraded()": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReceivedTokens(address,uint256)": EventFragment;
    "TransferTokens(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApproveTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributedBTC"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ImplementationUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferTokens"): EventFragment;
}

export class StakingPoolProxy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingPoolProxyInterface;

  functions: {
    __WrappedTokenDistributor_initialize(
      swapRouterAddress: string,
      BUSDContractAddress: string,
      WrappedTokenContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "__WrappedTokenDistributor_initialize(address,address,address)"(
      swapRouterAddress: string,
      BUSDContractAddress: string,
      WrappedTokenContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    averagePricePrediction(overrides?: CallOverrides): Promise<[BigNumber]>;

    "averagePricePrediction()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    collaborativeRange(overrides?: CallOverrides): Promise<[BigNumber]>;

    "collaborativeRange()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    collaborativeReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    "collaborativeReward()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    disableUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "disableUpgrade()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "enableUpgrade()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEstimatedWrappedTokenForUSD(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getEstimatedWrappedTokenForUSD(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPathForUSDToWrappedToken(overrides?: CallOverrides): Promise<[string[]]>;

    "getPathForUSDToWrappedToken()"(
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getSwapRouter(overrides?: CallOverrides): Promise<[string]>;

    "getSwapRouter()"(overrides?: CallOverrides): Promise<[string]>;

    getUSDBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getUSDBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUSDToken(overrides?: CallOverrides): Promise<[string]>;

    "getUSDToken()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _wrappedTokenSymbol: string,
      _poolType: string,
      _totemToken: string,
      _rewardManager: string,
      _poolCreator: string,
      _addrs: [string, string, string, string],
      _variables: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _ranks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _percentages: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _isEnhancedEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(string,string,address,address,address,address[4],uint256[12],uint256[8],uint256[8],bool)"(
      _wrappedTokenSymbol: string,
      _poolType: string,
      _totemToken: string,
      _rewardManager: string,
      _poolCreator: string,
      _addrs: [string, string, string, string],
      _variables: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _ranks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _percentages: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _isEnhancedEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    "isActive()"(overrides?: CallOverrides): Promise<[boolean]>;

    isAnEmergency(overrides?: CallOverrides): Promise<[boolean]>;

    "isAnEmergency()"(overrides?: CallOverrides): Promise<[boolean]>;

    isDeleted(overrides?: CallOverrides): Promise<[boolean]>;

    "isDeleted()"(overrides?: CallOverrides): Promise<[boolean]>;

    isEnhancedEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    "isEnhancedEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;

    isLocked(overrides?: CallOverrides): Promise<[boolean]>;

    "isLocked()"(overrides?: CallOverrides): Promise<[boolean]>;

    isMatured(overrides?: CallOverrides): Promise<[boolean]>;

    "isMatured()"(overrides?: CallOverrides): Promise<[boolean]>;

    launchDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "launchDate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lockTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lps(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        launchDate: BigNumber;
        lockTime: BigNumber;
        maturityTime: BigNumber;
        maturingPrice: BigNumber;
        usdPrizeAmount: BigNumber;
        prizeAmount: BigNumber;
        stakeApr: BigNumber;
        collaborativeReward: BigNumber;
        oracleDecimals: BigNumber;
        isEnhancedEnabled: boolean;
        isMatured: boolean;
      }
    >;

    "lps()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        launchDate: BigNumber;
        lockTime: BigNumber;
        maturityTime: BigNumber;
        maturingPrice: BigNumber;
        usdPrizeAmount: BigNumber;
        prizeAmount: BigNumber;
        stakeApr: BigNumber;
        collaborativeReward: BigNumber;
        oracleDecimals: BigNumber;
        isEnhancedEnabled: boolean;
        isMatured: boolean;
      }
    >;

    maturingPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maturingPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maturityTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maturityTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumStakeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minimumStakeAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracleContract(overrides?: CallOverrides): Promise<[string]>;

    "oracleContract()"(overrides?: CallOverrides): Promise<[string]>;

    oracleDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    "oracleDecimals()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    poolCreator(overrides?: CallOverrides): Promise<[string]>;

    "poolCreator()"(overrides?: CallOverrides): Promise<[string]>;

    poolType(overrides?: CallOverrides): Promise<[string]>;

    "poolType()"(overrides?: CallOverrides): Promise<[string]>;

    potentialCollabReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    "potentialCollabReward()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    predictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        stakedBalance: BigNumber;
        stakedTime: BigNumber;
        amountWithdrawn: BigNumber;
        lastWithdrawalTime: BigNumber;
        pricePrediction: BigNumber;
        difference: BigNumber;
        rank: BigNumber;
        prizeRewardWithdrawn: boolean;
        didUnstake: boolean;
      }
    >;

    "predictions(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        stakedBalance: BigNumber;
        stakedTime: BigNumber;
        amountWithdrawn: BigNumber;
        lastWithdrawalTime: BigNumber;
        pricePrediction: BigNumber;
        difference: BigNumber;
        rank: BigNumber;
        prizeRewardWithdrawn: boolean;
        didUnstake: boolean;
      }
    >;

    prizeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "prizeAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    prizeRewardRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { rank: BigNumber; percentage: BigNumber }
    >;

    "prizeRewardRates(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { rank: BigNumber; percentage: BigNumber }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardManager(overrides?: CallOverrides): Promise<[string]>;

    "rewardManager()"(overrides?: CallOverrides): Promise<[string]>;

    sizeAllocation(overrides?: CallOverrides): Promise<[BigNumber]>;

    "sizeAllocation()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    sizeLimitRangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "sizeLimitRangeRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    sortedStakers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { stakerAddress: string; index: BigNumber }
    >;

    "sortedStakers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { stakerAddress: string; index: BigNumber }
    >;

    stakeApr(overrides?: CallOverrides): Promise<[BigNumber]>;

    "stakeApr()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakeTaxRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "stakeTaxRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { stakerAddress: string; index: BigNumber }
    >;

    "stakers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { stakerAddress: string; index: BigNumber }
    >;

    stakingPoolImplementation(overrides?: CallOverrides): Promise<[string]>;

    "stakingPoolImplementation()"(overrides?: CallOverrides): Promise<[string]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalStaked()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totemToken(overrides?: CallOverrides): Promise<[string]>;

    "totemToken()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    "upgradeEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;

    upgradeTo(
      _newStakingPoolImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeTo(address)"(
      _newStakingPoolImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdPrizeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "usdPrizeAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    wrappedToken(overrides?: CallOverrides): Promise<[string]>;

    "wrappedToken()"(overrides?: CallOverrides): Promise<[string]>;

    wrappedTokenSymbol(overrides?: CallOverrides): Promise<[string]>;

    "wrappedTokenSymbol()"(overrides?: CallOverrides): Promise<[string]>;
  };

  __WrappedTokenDistributor_initialize(
    swapRouterAddress: string,
    BUSDContractAddress: string,
    WrappedTokenContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "__WrappedTokenDistributor_initialize(address,address,address)"(
    swapRouterAddress: string,
    BUSDContractAddress: string,
    WrappedTokenContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  averagePricePrediction(overrides?: CallOverrides): Promise<BigNumber>;

  "averagePricePrediction()"(overrides?: CallOverrides): Promise<BigNumber>;

  collaborativeRange(overrides?: CallOverrides): Promise<BigNumber>;

  "collaborativeRange()"(overrides?: CallOverrides): Promise<BigNumber>;

  collaborativeReward(overrides?: CallOverrides): Promise<BigNumber>;

  "collaborativeReward()"(overrides?: CallOverrides): Promise<BigNumber>;

  disableUpgrade(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "disableUpgrade()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableUpgrade(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "enableUpgrade()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEstimatedWrappedTokenForUSD(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getEstimatedWrappedTokenForUSD(uint256)"(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPathForUSDToWrappedToken(overrides?: CallOverrides): Promise<string[]>;

  "getPathForUSDToWrappedToken()"(overrides?: CallOverrides): Promise<string[]>;

  getSwapRouter(overrides?: CallOverrides): Promise<string>;

  "getSwapRouter()"(overrides?: CallOverrides): Promise<string>;

  getUSDBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "getUSDBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  getUSDToken(overrides?: CallOverrides): Promise<string>;

  "getUSDToken()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _wrappedTokenSymbol: string,
    _poolType: string,
    _totemToken: string,
    _rewardManager: string,
    _poolCreator: string,
    _addrs: [string, string, string, string],
    _variables: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _ranks: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _percentages: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _isEnhancedEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(string,string,address,address,address,address[4],uint256[12],uint256[8],uint256[8],bool)"(
    _wrappedTokenSymbol: string,
    _poolType: string,
    _totemToken: string,
    _rewardManager: string,
    _poolCreator: string,
    _addrs: [string, string, string, string],
    _variables: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _ranks: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _percentages: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _isEnhancedEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  "isActive()"(overrides?: CallOverrides): Promise<boolean>;

  isAnEmergency(overrides?: CallOverrides): Promise<boolean>;

  "isAnEmergency()"(overrides?: CallOverrides): Promise<boolean>;

  isDeleted(overrides?: CallOverrides): Promise<boolean>;

  "isDeleted()"(overrides?: CallOverrides): Promise<boolean>;

  isEnhancedEnabled(overrides?: CallOverrides): Promise<boolean>;

  "isEnhancedEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  isLocked(overrides?: CallOverrides): Promise<boolean>;

  "isLocked()"(overrides?: CallOverrides): Promise<boolean>;

  isMatured(overrides?: CallOverrides): Promise<boolean>;

  "isMatured()"(overrides?: CallOverrides): Promise<boolean>;

  launchDate(overrides?: CallOverrides): Promise<BigNumber>;

  "launchDate()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  lps(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean
    ] & {
      launchDate: BigNumber;
      lockTime: BigNumber;
      maturityTime: BigNumber;
      maturingPrice: BigNumber;
      usdPrizeAmount: BigNumber;
      prizeAmount: BigNumber;
      stakeApr: BigNumber;
      collaborativeReward: BigNumber;
      oracleDecimals: BigNumber;
      isEnhancedEnabled: boolean;
      isMatured: boolean;
    }
  >;

  "lps()"(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean
    ] & {
      launchDate: BigNumber;
      lockTime: BigNumber;
      maturityTime: BigNumber;
      maturingPrice: BigNumber;
      usdPrizeAmount: BigNumber;
      prizeAmount: BigNumber;
      stakeApr: BigNumber;
      collaborativeReward: BigNumber;
      oracleDecimals: BigNumber;
      isEnhancedEnabled: boolean;
      isMatured: boolean;
    }
  >;

  maturingPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "maturingPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  maturityTime(overrides?: CallOverrides): Promise<BigNumber>;

  "maturityTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  oracleContract(overrides?: CallOverrides): Promise<string>;

  "oracleContract()"(overrides?: CallOverrides): Promise<string>;

  oracleDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  "oracleDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  poolCreator(overrides?: CallOverrides): Promise<string>;

  "poolCreator()"(overrides?: CallOverrides): Promise<string>;

  poolType(overrides?: CallOverrides): Promise<string>;

  "poolType()"(overrides?: CallOverrides): Promise<string>;

  potentialCollabReward(overrides?: CallOverrides): Promise<BigNumber>;

  "potentialCollabReward()"(overrides?: CallOverrides): Promise<BigNumber>;

  predictions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean
    ] & {
      stakedBalance: BigNumber;
      stakedTime: BigNumber;
      amountWithdrawn: BigNumber;
      lastWithdrawalTime: BigNumber;
      pricePrediction: BigNumber;
      difference: BigNumber;
      rank: BigNumber;
      prizeRewardWithdrawn: boolean;
      didUnstake: boolean;
    }
  >;

  "predictions(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean
    ] & {
      stakedBalance: BigNumber;
      stakedTime: BigNumber;
      amountWithdrawn: BigNumber;
      lastWithdrawalTime: BigNumber;
      pricePrediction: BigNumber;
      difference: BigNumber;
      rank: BigNumber;
      prizeRewardWithdrawn: boolean;
      didUnstake: boolean;
    }
  >;

  prizeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "prizeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  prizeRewardRates(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { rank: BigNumber; percentage: BigNumber }
  >;

  "prizeRewardRates(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { rank: BigNumber; percentage: BigNumber }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardManager(overrides?: CallOverrides): Promise<string>;

  "rewardManager()"(overrides?: CallOverrides): Promise<string>;

  sizeAllocation(overrides?: CallOverrides): Promise<BigNumber>;

  "sizeAllocation()"(overrides?: CallOverrides): Promise<BigNumber>;

  sizeLimitRangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  "sizeLimitRangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  sortedStakers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { stakerAddress: string; index: BigNumber }>;

  "sortedStakers(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { stakerAddress: string; index: BigNumber }>;

  stakeApr(overrides?: CallOverrides): Promise<BigNumber>;

  "stakeApr()"(overrides?: CallOverrides): Promise<BigNumber>;

  stakeTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

  "stakeTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  stakers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { stakerAddress: string; index: BigNumber }>;

  "stakers(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { stakerAddress: string; index: BigNumber }>;

  stakingPoolImplementation(overrides?: CallOverrides): Promise<string>;

  "stakingPoolImplementation()"(overrides?: CallOverrides): Promise<string>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

  totemToken(overrides?: CallOverrides): Promise<string>;

  "totemToken()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeEnabled(overrides?: CallOverrides): Promise<boolean>;

  "upgradeEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  upgradeTo(
    _newStakingPoolImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeTo(address)"(
    _newStakingPoolImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdPrizeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "usdPrizeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  wrappedToken(overrides?: CallOverrides): Promise<string>;

  "wrappedToken()"(overrides?: CallOverrides): Promise<string>;

  wrappedTokenSymbol(overrides?: CallOverrides): Promise<string>;

  "wrappedTokenSymbol()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    __WrappedTokenDistributor_initialize(
      swapRouterAddress: string,
      BUSDContractAddress: string,
      WrappedTokenContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "__WrappedTokenDistributor_initialize(address,address,address)"(
      swapRouterAddress: string,
      BUSDContractAddress: string,
      WrappedTokenContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    averagePricePrediction(overrides?: CallOverrides): Promise<BigNumber>;

    "averagePricePrediction()"(overrides?: CallOverrides): Promise<BigNumber>;

    collaborativeRange(overrides?: CallOverrides): Promise<BigNumber>;

    "collaborativeRange()"(overrides?: CallOverrides): Promise<BigNumber>;

    collaborativeReward(overrides?: CallOverrides): Promise<BigNumber>;

    "collaborativeReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    disableUpgrade(overrides?: CallOverrides): Promise<void>;

    "disableUpgrade()"(overrides?: CallOverrides): Promise<void>;

    enableUpgrade(overrides?: CallOverrides): Promise<void>;

    "enableUpgrade()"(overrides?: CallOverrides): Promise<void>;

    getEstimatedWrappedTokenForUSD(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEstimatedWrappedTokenForUSD(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPathForUSDToWrappedToken(overrides?: CallOverrides): Promise<string[]>;

    "getPathForUSDToWrappedToken()"(
      overrides?: CallOverrides
    ): Promise<string[]>;

    getSwapRouter(overrides?: CallOverrides): Promise<string>;

    "getSwapRouter()"(overrides?: CallOverrides): Promise<string>;

    getUSDBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getUSDBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUSDToken(overrides?: CallOverrides): Promise<string>;

    "getUSDToken()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _wrappedTokenSymbol: string,
      _poolType: string,
      _totemToken: string,
      _rewardManager: string,
      _poolCreator: string,
      _addrs: [string, string, string, string],
      _variables: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _ranks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _percentages: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _isEnhancedEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(string,string,address,address,address,address[4],uint256[12],uint256[8],uint256[8],bool)"(
      _wrappedTokenSymbol: string,
      _poolType: string,
      _totemToken: string,
      _rewardManager: string,
      _poolCreator: string,
      _addrs: [string, string, string, string],
      _variables: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _ranks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _percentages: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _isEnhancedEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    "isActive()"(overrides?: CallOverrides): Promise<boolean>;

    isAnEmergency(overrides?: CallOverrides): Promise<boolean>;

    "isAnEmergency()"(overrides?: CallOverrides): Promise<boolean>;

    isDeleted(overrides?: CallOverrides): Promise<boolean>;

    "isDeleted()"(overrides?: CallOverrides): Promise<boolean>;

    isEnhancedEnabled(overrides?: CallOverrides): Promise<boolean>;

    "isEnhancedEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    isLocked(overrides?: CallOverrides): Promise<boolean>;

    "isLocked()"(overrides?: CallOverrides): Promise<boolean>;

    isMatured(overrides?: CallOverrides): Promise<boolean>;

    "isMatured()"(overrides?: CallOverrides): Promise<boolean>;

    launchDate(overrides?: CallOverrides): Promise<BigNumber>;

    "launchDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    lps(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        launchDate: BigNumber;
        lockTime: BigNumber;
        maturityTime: BigNumber;
        maturingPrice: BigNumber;
        usdPrizeAmount: BigNumber;
        prizeAmount: BigNumber;
        stakeApr: BigNumber;
        collaborativeReward: BigNumber;
        oracleDecimals: BigNumber;
        isEnhancedEnabled: boolean;
        isMatured: boolean;
      }
    >;

    "lps()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        launchDate: BigNumber;
        lockTime: BigNumber;
        maturityTime: BigNumber;
        maturingPrice: BigNumber;
        usdPrizeAmount: BigNumber;
        prizeAmount: BigNumber;
        stakeApr: BigNumber;
        collaborativeReward: BigNumber;
        oracleDecimals: BigNumber;
        isEnhancedEnabled: boolean;
        isMatured: boolean;
      }
    >;

    maturingPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "maturingPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    maturityTime(overrides?: CallOverrides): Promise<BigNumber>;

    "maturityTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracleContract(overrides?: CallOverrides): Promise<string>;

    "oracleContract()"(overrides?: CallOverrides): Promise<string>;

    oracleDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "oracleDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    poolCreator(overrides?: CallOverrides): Promise<string>;

    "poolCreator()"(overrides?: CallOverrides): Promise<string>;

    poolType(overrides?: CallOverrides): Promise<string>;

    "poolType()"(overrides?: CallOverrides): Promise<string>;

    potentialCollabReward(overrides?: CallOverrides): Promise<BigNumber>;

    "potentialCollabReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    predictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        stakedBalance: BigNumber;
        stakedTime: BigNumber;
        amountWithdrawn: BigNumber;
        lastWithdrawalTime: BigNumber;
        pricePrediction: BigNumber;
        difference: BigNumber;
        rank: BigNumber;
        prizeRewardWithdrawn: boolean;
        didUnstake: boolean;
      }
    >;

    "predictions(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        stakedBalance: BigNumber;
        stakedTime: BigNumber;
        amountWithdrawn: BigNumber;
        lastWithdrawalTime: BigNumber;
        pricePrediction: BigNumber;
        difference: BigNumber;
        rank: BigNumber;
        prizeRewardWithdrawn: boolean;
        didUnstake: boolean;
      }
    >;

    prizeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "prizeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    prizeRewardRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { rank: BigNumber; percentage: BigNumber }
    >;

    "prizeRewardRates(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { rank: BigNumber; percentage: BigNumber }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardManager(overrides?: CallOverrides): Promise<string>;

    "rewardManager()"(overrides?: CallOverrides): Promise<string>;

    sizeAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    "sizeAllocation()"(overrides?: CallOverrides): Promise<BigNumber>;

    sizeLimitRangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "sizeLimitRangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    sortedStakers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { stakerAddress: string; index: BigNumber }
    >;

    "sortedStakers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { stakerAddress: string; index: BigNumber }
    >;

    stakeApr(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeApr()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakeTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { stakerAddress: string; index: BigNumber }
    >;

    "stakers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { stakerAddress: string; index: BigNumber }
    >;

    stakingPoolImplementation(overrides?: CallOverrides): Promise<string>;

    "stakingPoolImplementation()"(overrides?: CallOverrides): Promise<string>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    totemToken(overrides?: CallOverrides): Promise<string>;

    "totemToken()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeEnabled(overrides?: CallOverrides): Promise<boolean>;

    "upgradeEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    upgradeTo(
      _newStakingPoolImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeTo(address)"(
      _newStakingPoolImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usdPrizeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "usdPrizeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    wrappedToken(overrides?: CallOverrides): Promise<string>;

    "wrappedToken()"(overrides?: CallOverrides): Promise<string>;

    wrappedTokenSymbol(overrides?: CallOverrides): Promise<string>;

    "wrappedTokenSymbol()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ApproveTokens(
      to: string | null,
      amount: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    DistributedBTC(
      to: string | null,
      amount: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    ImplementationUpgraded(): TypedEventFilter<[], {}>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    ReceivedTokens(
      from: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; amount: BigNumber }
    >;

    TransferTokens(
      to: string | null,
      amount: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;
  };

  estimateGas: {
    __WrappedTokenDistributor_initialize(
      swapRouterAddress: string,
      BUSDContractAddress: string,
      WrappedTokenContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "__WrappedTokenDistributor_initialize(address,address,address)"(
      swapRouterAddress: string,
      BUSDContractAddress: string,
      WrappedTokenContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    averagePricePrediction(overrides?: CallOverrides): Promise<BigNumber>;

    "averagePricePrediction()"(overrides?: CallOverrides): Promise<BigNumber>;

    collaborativeRange(overrides?: CallOverrides): Promise<BigNumber>;

    "collaborativeRange()"(overrides?: CallOverrides): Promise<BigNumber>;

    collaborativeReward(overrides?: CallOverrides): Promise<BigNumber>;

    "collaborativeReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    disableUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "disableUpgrade()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "enableUpgrade()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEstimatedWrappedTokenForUSD(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEstimatedWrappedTokenForUSD(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPathForUSDToWrappedToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getPathForUSDToWrappedToken()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "getSwapRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUSDBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getUSDBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUSDToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getUSDToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _wrappedTokenSymbol: string,
      _poolType: string,
      _totemToken: string,
      _rewardManager: string,
      _poolCreator: string,
      _addrs: [string, string, string, string],
      _variables: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _ranks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _percentages: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _isEnhancedEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(string,string,address,address,address,address[4],uint256[12],uint256[8],uint256[8],bool)"(
      _wrappedTokenSymbol: string,
      _poolType: string,
      _totemToken: string,
      _rewardManager: string,
      _poolCreator: string,
      _addrs: [string, string, string, string],
      _variables: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _ranks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _percentages: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _isEnhancedEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    "isActive()"(overrides?: CallOverrides): Promise<BigNumber>;

    isAnEmergency(overrides?: CallOverrides): Promise<BigNumber>;

    "isAnEmergency()"(overrides?: CallOverrides): Promise<BigNumber>;

    isDeleted(overrides?: CallOverrides): Promise<BigNumber>;

    "isDeleted()"(overrides?: CallOverrides): Promise<BigNumber>;

    isEnhancedEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "isEnhancedEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    isLocked(overrides?: CallOverrides): Promise<BigNumber>;

    "isLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    isMatured(overrides?: CallOverrides): Promise<BigNumber>;

    "isMatured()"(overrides?: CallOverrides): Promise<BigNumber>;

    launchDate(overrides?: CallOverrides): Promise<BigNumber>;

    "launchDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lockTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    lps(overrides?: CallOverrides): Promise<BigNumber>;

    "lps()"(overrides?: CallOverrides): Promise<BigNumber>;

    maturingPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "maturingPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    maturityTime(overrides?: CallOverrides): Promise<BigNumber>;

    "maturityTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracleContract(overrides?: CallOverrides): Promise<BigNumber>;

    "oracleContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracleDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "oracleDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolCreator(overrides?: CallOverrides): Promise<BigNumber>;

    "poolCreator()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolType(overrides?: CallOverrides): Promise<BigNumber>;

    "poolType()"(overrides?: CallOverrides): Promise<BigNumber>;

    potentialCollabReward(overrides?: CallOverrides): Promise<BigNumber>;

    "potentialCollabReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    predictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "predictions(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prizeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "prizeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    prizeRewardRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "prizeRewardRates(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardManager(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    sizeAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    "sizeAllocation()"(overrides?: CallOverrides): Promise<BigNumber>;

    sizeLimitRangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "sizeLimitRangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    sortedStakers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sortedStakers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeApr(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeApr()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakeTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "stakers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingPoolImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingPoolImplementation()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    totemToken(overrides?: CallOverrides): Promise<BigNumber>;

    "totemToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "upgradeEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      _newStakingPoolImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeTo(address)"(
      _newStakingPoolImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdPrizeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "usdPrizeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    wrappedToken(overrides?: CallOverrides): Promise<BigNumber>;

    "wrappedToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    wrappedTokenSymbol(overrides?: CallOverrides): Promise<BigNumber>;

    "wrappedTokenSymbol()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    __WrappedTokenDistributor_initialize(
      swapRouterAddress: string,
      BUSDContractAddress: string,
      WrappedTokenContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "__WrappedTokenDistributor_initialize(address,address,address)"(
      swapRouterAddress: string,
      BUSDContractAddress: string,
      WrappedTokenContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    averagePricePrediction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "averagePricePrediction()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collaborativeRange(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collaborativeRange()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collaborativeReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collaborativeReward()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "disableUpgrade()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableUpgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "enableUpgrade()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEstimatedWrappedTokenForUSD(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEstimatedWrappedTokenForUSD(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPathForUSDToWrappedToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPathForUSDToWrappedToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSwapRouter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUSDBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getUSDBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUSDToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getUSDToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _wrappedTokenSymbol: string,
      _poolType: string,
      _totemToken: string,
      _rewardManager: string,
      _poolCreator: string,
      _addrs: [string, string, string, string],
      _variables: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _ranks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _percentages: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _isEnhancedEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(string,string,address,address,address,address[4],uint256[12],uint256[8],uint256[8],bool)"(
      _wrappedTokenSymbol: string,
      _poolType: string,
      _totemToken: string,
      _rewardManager: string,
      _poolCreator: string,
      _addrs: [string, string, string, string],
      _variables: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _ranks: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _percentages: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _isEnhancedEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isActive()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAnEmergency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isAnEmergency()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDeleted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isDeleted()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isEnhancedEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isEnhancedEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isLocked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMatured(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isMatured()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    launchDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "launchDate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lps()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maturingPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maturingPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maturityTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maturityTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumStakeAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minimumStakeAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracleContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracleDecimals()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolCreator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolCreator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolType()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    potentialCollabReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "potentialCollabReward()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    predictions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "predictions(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prizeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "prizeAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prizeRewardRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "prizeRewardRates(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sizeAllocation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sizeAllocation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sizeLimitRangeRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sizeLimitRangeRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sortedStakers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sortedStakers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeApr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakeApr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeTaxRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakeTaxRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingPoolImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakingPoolImplementation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalStaked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totemToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totemToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "upgradeEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      _newStakingPoolImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeTo(address)"(
      _newStakingPoolImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdPrizeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "usdPrizeAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrappedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wrappedToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wrappedTokenSymbol(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wrappedTokenSymbol()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
